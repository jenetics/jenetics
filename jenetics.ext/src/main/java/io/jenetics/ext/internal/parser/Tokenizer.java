/*
 * Java Genetic Algorithm Library (@__identifier__@).
 * Copyright (c) @__year__@ Franz Wilhelmstötter
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:
 *    Franz Wilhelmstötter (franz.wilhelmstoetter@gmail.com)
 */
package io.jenetics.ext.internal.parser;

import java.util.Objects;
import java.util.stream.Stream;

/**
 * Interface for all tokenizers.
 *
 * @param <T> the token value type
 *
 * @author <a href="mailto:franz.wilhelmstoetter@gmail.com">Franz Wilhelmstötter</a>
 * @since 7.1
 * @version 7.1
 */
@FunctionalInterface
public interface Tokenizer<T> {

	/**
	 * Return the next available <em>token</em>, or {@code null} if no further
	 * tokens are available.
	 *
	 * @return the next available token
	 */
	T next();

	/**
	 * Return a stream of tokens, generated by {@code this} tokenizer. The
	 * returned stream terminates, when the {@code null}-token is encountered.
	 *
	 * @return a new tokens stream of {@code this} tokenizer
	 */
	default Stream<T> tokens() {
		return Stream.generate(this::next).takeWhile(Objects::nonNull);
	}

}
