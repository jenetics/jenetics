#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extbook
\begin_preamble
\usepackage{transparent}
\usepackage{eso-pic}
\newcommand\BackgroundPic{%
\put(0,0){%
\parbox[b][\paperheight]{\paperwidth}{%
\vfill
\centering
{\transparent{0.9}
\includegraphics[width=\paperwidth,height=\paperheight,keepaspectratio]
{../resources/graphic/manual-title.jpg}}
\vfill
}}}

\usepackage{ifpdf} % part of the hyperref bundle
\ifpdf % if pdflatex is used
 % set fonts for nicer pdf view
 \IfFileExists{lmodern.sty}{\usepackage{lmodern}}{}
\fi % end if pdflatex is used

\renewcommand\part{%
   \if@openright
     \cleardoublepage
   \else
     \clearpage
   \fi
   \thispagestyle{empty}%
   \if@twocolumn
     \onecolumn
     \@tempswatrue
   \else
     \@tempswafalse
   \fi
   \null\vfil
   \secdef\@part\@spart}
\makeatother

\usepackage{listings}
\usepackage{color}
\usepackage{url}
\usepackage[usenames,dvipsnames]{xcolor}
\usepackage{cclicenses}
\usepackage{multicol}
\usepackage{changepage}
\usepackage{newunicodechar}
\usepackage{fancyhdr}

\pagestyle{fancy}

\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.3,0.3,0.3}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\definecolor{keyword}{rgb}{0.5,0,0.5}
\definecolor{background}{rgb}{0.8984,0.9492,1.0}
\definecolor{white}{rgb}{1.0,1.0,1.0}
\definecolor{covercolor}{RGB}{13,126,168}

\newunicodechar{Σ}{\lstsum}

\lstset{
  language=java,
  basicstyle=\footnotesize,
  numbers=left,
  numberstyle=\footnotesize,
  stepnumber=1,
  numbersep=6pt,
  rulesep=5pt,
  backgroundcolor=\color{background},
  showspaces=false,
  showstringspaces=false,
  showtabs=false,
  frame=single,
  frameshape={}{nny}{nny}{},
  tabsize=4,
  captionpos=b,
  breaklines=true,
  breakatwhitespace=false,
  numberstyle=\tiny\color{gray},
  keywordstyle=\color{keyword}\bfseries,
  commentstyle=\color{dkgreen},
  stringstyle=\color{mauve},
  escapeinside={\%*}{*)},
  morekeywords={*,...,public,extends,assert,var}
}
\end_preamble
\options utf8
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
tabs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype true
\use_dash_ligatures false
\graphics default
\default_output_format pdf2
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement h
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Jenetics"
\pdf_author "Franz Wilhelmstötter"
\pdf_subject "Genetic Algorithm"
\pdf_keywords "research, artificial Intelligence, AI, bio-informatics, evolutionary algorithm, optimization, genetic algorithm, genetic programming, parallelized, algorithms, evolutionary, metaheuristics, stream, evolutionstream, evolution, machine learning, grammatical evolution, moo, multi-objective optimization"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\boxbgcolor #ffffff
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style danish
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\bullet 1 0 9 -1
\bullet 2 0 10 -1
\bullet 3 0 0 -1
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 1
\html_be_strict true
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
pagecolor{covercolor}
\end_layout

\begin_layout Plain Layout


\backslash
AddToShipoutPicture*{
\backslash
BackgroundPic}
\end_layout

\begin_layout Plain Layout


\backslash
begin{adjustwidth*}{-4.5cm}{-4.5cm}
\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fontsize{140pt}{140pt}
\end_layout

\begin_layout Plain Layout


\backslash
textsf{
\backslash
textbf{
\backslash
textsc{
\backslash
textcolor{white}{J}}}}
\backslash
fontsize{95pt}{95pt}
\backslash
textsf{
\backslash
textbf{
\backslash
textsc{
\backslash
textcolor{white}{ENETICS}}}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 0.5cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1.5cm
\end_inset


\end_layout

\begin_layout Standard
\align center

\family sans
\series bold
\size giant
\color white
LIBRARY USER'S MANUAL @__minor_version__@
\end_layout

\begin_layout Standard
\align center
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align right

\family sans
\size huge
\color white
Franz Wilhelmstötter
\begin_inset space \hspace{}
\length 2.5cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{adjustwidth*}
\end_layout

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagecolor{white}
\end_layout

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\begin_layout Plain Layout


\backslash
pagenumbering{roman}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 2cm
\end_inset


\end_layout

\begin_layout Standard
\noindent

\size small
Franz Wilhelmstötter
\end_layout

\begin_layout Standard
\noindent

\family typewriter
\begin_inset CommandInset href
LatexCommand href
name "franz.wilhelmstoetter@gmail.com"
target "franz.wilhelmstoetter@gmail.com"
type "mailto:"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Phantom VPhantom
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing single
\noindent
\align left
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://jenetics.io
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left

\size small
@__identifier__@
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill*
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../resources/graphic/by-sa.svg

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\size footnotesize
This work is licensed under a
\begin_inset CommandInset href
LatexCommand href
name "Creative Commons"
target "http://creativecommons.org/licenses/by-sa/3.0/"
literal "false"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
License
\end_layout

\end_inset

 Attribution-ShareAlike 3.0 License.
 To view a copy of this license, visit
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://creativecommons.org/licenses/by-sa/3.0/
\end_layout

\end_inset

 or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain
 View, California, 94041, USA.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Fundamentals
\end_layout

\begin_layout Standard

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 is an advanced
\series bold
 Genetic Algorithm
\series default
,
\series bold
 Evolutionary Algorithm
\series default
 and
\series bold
 Genetic Programming
\series default
 library, written in modern day Java.
 It is designed with a clear separation of the several algorithm concepts,
 e.
\begin_inset space ~
\end_inset

g.

\family typewriter
 Gene
\family default
,
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
,
\family typewriter
 Genotype
\family default
,
\family typewriter
 Phenotype
\family default
, population and fitness
\family typewriter
 Function
\family default
.

\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 allows you to minimize or maximize a given fitness function without tweaking
 it.
 In contrast to other GA implementations, the library uses the concept of
 an evolution
\emph on
 stream
\emph default
 (
\family typewriter
Evolution\SpecialChar softhyphen
Stream
\family default
) for executing the evolution steps.
 Since the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 implements the Java
\family typewriter
 Stream
\family default
 interface, it works smoothly with the rest of the Java Stream API.
 This chapter describes the design concepts and its implementation.
 It also gives some basic examples and best practice tips.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The classes described in this chapter reside in the
\family typewriter
 io.jenetics.base
\family default
 module or
\family typewriter
 io:jenetics:jenetics:@__version__@
\family default
 artifact, respectively.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 is a library, written in Java
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The library is build with and depends on Java SE 17:
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://adoptium.net/
\end_layout

\end_inset


\end_layout

\end_inset

, which provides a
\begin_inset CommandInset href
LatexCommand href
name "Genetic algorithm"
target "http://en.wikipedia.org/wiki/Genetic_algorithm"
literal "false"

\end_inset

 (GA),
\begin_inset CommandInset href
LatexCommand href
name "Evolutionary algorithm"
target "https://en.wikipedia.org/wiki/Evolutionary_algorithm"
literal "false"

\end_inset

 (EA),
\begin_inset CommandInset href
LatexCommand href
name "Multi-objective optimization"
target "https://en.wikipedia.org/wiki/Multi-objective_optimization"
literal "false"

\end_inset

 (MOO) and
\begin_inset CommandInset href
LatexCommand href
name "Genetic programming"
target "https://en.wikipedia.org/wiki/Genetic_programming"
literal "false"

\end_inset

 (GP) implementation.
 It has no runtime dependencies to other libraries, except the Java 17 runtime.

\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 is available on the Maven central repository
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://mvnrepository.com/artifact/io.jenetics/jenetics
\end_layout

\end_inset

: If you are using Gradle, you can use the following dependency string:
\family typewriter

\begin_inset Quotes ald
\end_inset

io.jenetics:\SpecialChar softhyphen
jenetics:\SpecialChar softhyphen
@__version__@
\family default

\begin_inset Quotes ard
\end_inset

.
\end_layout

\end_inset

 and can be easily integrated into existing projects.
 The very clear structuring of the different parts of the GA allows an easy
 adaption for different problem domains.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
This manual is not an introduction or a tutorial for genetic and/or evolutionary
 algorithms in general.
 It is assumed that the reader has a knowledge about the structure and the
 functionality of genetic algorithms.
 Good introductions to GAs can be found in
\begin_inset CommandInset citation
LatexCommand cite
key "Sivanandam2010"
literal "true"

\end_inset

,
\begin_inset CommandInset citation
LatexCommand cite
key "michalewicz1996genetic"
literal "true"

\end_inset

,
\begin_inset CommandInset citation
LatexCommand cite
key "Shiffman2012"
literal "true"

\end_inset

,
\begin_inset CommandInset citation
LatexCommand cite
key "Luke2013Metaheuristics"
literal "true"

\end_inset

,
\begin_inset CommandInset citation
LatexCommand cite
key "Mitchell1998"
literal "true"

\end_inset

 or
\begin_inset CommandInset citation
LatexCommand cite
key "Whitley94agenetic"
literal "true"

\end_inset

.
 For genetic programming you can have a look at
\begin_inset CommandInset citation
LatexCommand cite
key "Koza:1992:GPP:138936"
literal "true"

\end_inset

 or
\begin_inset CommandInset citation
LatexCommand cite
key "Koza:2008:IGP:1388969.1389057"
literal "true"

\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To give you a first impression on how to use
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
, let's start with a simple 
\begin_inset Quotes ald
\end_inset

Hello World
\begin_inset Quotes ard
\end_inset

 program.
 This first example implements the well known
\emph on
 bit counting
\emph default
 problem.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

import io.jenetics.BitChromosome;
\end_layout

\begin_layout Plain Layout

import io.jenetics.BitGene;
\end_layout

\begin_layout Plain Layout

import io.jenetics.Genotype;
\end_layout

\begin_layout Plain Layout

import io.jenetics.engine.Engine;
\end_layout

\begin_layout Plain Layout

import io.jenetics.engine.EvolutionResult;
\end_layout

\begin_layout Plain Layout

import io.jenetics.util.Factory;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public final class HelloWorld {
\end_layout

\begin_layout Plain Layout

    // 2.) Definition of the fitness function.
\end_layout

\begin_layout Plain Layout

    private static int eval(final Genotype<BitGene> gt) {
\end_layout

\begin_layout Plain Layout

        return gt.chromosome()
\end_layout

\begin_layout Plain Layout

            .as(BitChromosome.class)
\end_layout

\begin_layout Plain Layout

            .bitCount();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

        // 1.) Define the genotype (factory) suitable
\end_layout

\begin_layout Plain Layout

        //     for the problem.
\end_layout

\begin_layout Plain Layout

        final Factory<Genotype<BitGene>> gtf =
\end_layout

\begin_layout Plain Layout

            Genotype.of(BitChromosome.of(10, 0.5));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // 3.) Create the execution environment.
\end_layout

\begin_layout Plain Layout

        final Engine<BitGene, Integer> engine = Engine
\end_layout

\begin_layout Plain Layout

            .builder(HelloWorld::eval, gtf)
\end_layout

\begin_layout Plain Layout

            .build();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // 4.) Start the execution (evolution) and
\end_layout

\begin_layout Plain Layout

        //     collect the result.
\end_layout

\begin_layout Plain Layout

        final Genotype<BitGene> result = engine.stream()
\end_layout

\begin_layout Plain Layout

            .limit(100)
\end_layout

\begin_layout Plain Layout

            .collect(EvolutionResult.toBestGenotype());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        System.out.println("Hello World:
\backslash
n
\backslash
t" + result);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Hello-World-GA"

\end_inset


\begin_inset Quotes ald
\end_inset

Hello World
\begin_inset Quotes ard
\end_inset

 GA
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Hello World
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In contrast to other GA implementations,
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 uses the concept of an evolution
\emph on
 stream
\emph default
 (
\family typewriter
Evolution\SpecialChar softhyphen
Stream
\family default
) for executing the evolution steps.
 Since the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 extends the Java
\family typewriter
 Stream
\family default
 interface, it works smoothly with the rest of the Java Stream API.
 Now let's have a closer look at listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Hello-World-GA"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and discuss this simple program step by step:
\end_layout

\begin_layout Enumerate
Probably the most challenging part when setting up a new evolution
\family typewriter
 Engine
\family default
, is to transform the
\emph on
 native
\emph default
 problem domain into an appropriate
\family typewriter
 Genotype
\family default
 (factory) representation.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Encoding"

\end_inset

 describes some common problem encodings.
\end_layout

\end_inset

 In our example we want to count the number of
\emph on
 ones
\emph default
 of a
\family typewriter
 Bit\SpecialChar softhyphen
Chromosome
\family default
.
 Since we are counting only the ones of one chromosome, we are adding only
 one
\family typewriter
 Bit\SpecialChar softhyphen
Chromosome
\family default
 to our
\family typewriter
 Genotype
\family default
.
 In general, the
\family typewriter
 Genotype
\family default
 can be created with 1 to 
\begin_inset Formula $n$
\end_inset

 chromosomes.
 For a detailed description of the genotype's structure have a look at section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsubsec:Domain-classes-Genotype"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Enumerate
Once this is done, the fitness function, which we are trying to maximize,
 can be defined.
 We can simply write a private static method, which takes the
\family typewriter
 Geno\SpecialChar softhyphen
type
\family default
 we defined and calculate its fitness value.
 If we want to use the optimized bit counting method,
\family typewriter
 bitCount()
\family default
, we have to cast the
\family typewriter
 Chromosome\SpecialChar softhyphen
<BitGene>
\family default
 class to the actual used
\family typewriter
 Bit\SpecialChar softhyphen
Chromosome
\family default
 class.
 Since we know for sure that we created the
\family typewriter
 Genotype
\family default
 with a
\family typewriter
 BitChromosome
\family default
, this is a safe operation.
 A reference to the
\family typewriter
 eval
\family default
 method is then used as a fitness function and passed to the
\family typewriter
 Engine\SpecialChar softhyphen
::build
\family default
 method.
\end_layout

\begin_layout Enumerate
In the third step we are creating the
\emph on
 evolution
\family typewriter
\emph default
 Engine
\family default
, which is responsible for evolving the given population.
 The
\family typewriter
 Engine
\family default
 is highly configurable and takes parameters for controlling the evolutionary
 and the computational environment.
 For changing the evolutionary behavior, you can set different alterers
 and selectors (see section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Operation-classes"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 By changing the used
\family typewriter
 Executor
\family default
 service, you control the number of threads, the
\family typewriter
 Engine
\family default
 is allowed to use.
 A new
\family typewriter
 Engine
\family default
 instance can only be created via its builder, which is created by calling
 the
\family typewriter
 Engine.builder
\family default
 method.
\end_layout

\begin_layout Enumerate
In the last step, we will create a new
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 from our
\family typewriter
 Engine
\family default
.
 The
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 is the model (or view) of the
\emph on
 evolutionary
\emph default
 process.
 It serves as a 
\begin_inset Quotes ald
\end_inset

process handle
\begin_inset Quotes ard
\end_inset

 and allows us, among other things, to control the termination of the evolution.
 In our example, we simply truncate the stream after 100 generations.
 If you don't limit the stream, the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 will never terminate and run forever.
 The final result, the best
\family typewriter
 Genotype
\family default
 in our example, is then collected with one of the predefined collectors
 of the
\family typewriter
 EvolutionResult
\family default
 class.
\end_layout

\begin_layout Standard
As the example shows,
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 makes heavy use of the
\family typewriter
 Stream
\family default
 and
\family typewriter
 Collector
\family default
 classes.
 Also lambda expressions and the functional interfaces (SAM types) plays
 an important roll in the library design.
\end_layout

\begin_layout Standard
There are many other GA implementations out there and they may slightly
 differ in the order of the single execution steps.

\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 uses an classical approach.
 Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Genetic-algorithm"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the (imperative) pseudocode of the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 genetic algorithm steps.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "extendedchars=true,language=C,mathescape=true,numbers=left,showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

$P_{0}
\backslash
leftarrow P_{initial}$
\end_layout

\begin_layout Plain Layout

$F(P_{0})$
\end_layout

\begin_layout Plain Layout

while !$finished$ do
\end_layout

\begin_layout Plain Layout

    $g
\backslash
leftarrow g + 1$
\end_layout

\begin_layout Plain Layout

    $S_g
\backslash
leftarrow select_{S}(P_{g - 1})$
\end_layout

\begin_layout Plain Layout

    $O_g
\backslash
leftarrow select_{O}(P_{g - 1})$
\end_layout

\begin_layout Plain Layout

    $O_g
\backslash
leftarrow alter(O_g)$
\end_layout

\begin_layout Plain Layout

    $P_g
\backslash
leftarrow filter[g_i
\backslash
ge g_{max}](S_g) + filter[g_i
\backslash
ge g_{max}](O_g)$
\end_layout

\begin_layout Plain Layout

    $F(P_g)$
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Genetic-algorithm"

\end_inset

Genetic algorithm
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genetic algorithm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

In line (1) the initial population is created and line (2) calculates the
 fitness value of the individuals.
 The initial population is created implicitly before the first evolution
 step is performed.
 Line (4) increases the generation number and line (5) and (6) selects the
 survivor and the offspring population.
 The offspring/survivors fraction is determined by the
\family typewriter
 offspringFraction
\family default
 property of the
\family typewriter
 Engine\SpecialChar softhyphen
.Builder
\family default
.
 The selected offspring are altered in line (7).
 The next line combines the survivor population and the altered offspring
 population—after removing the
\shape italic
 killed
\shape default
 individuals—to the new population.
 The steps from line (4) to (9) are repeated until a given termination criterion
 is fulfilled.
\end_layout

\begin_layout Section
Architecture
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Architecture
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The basic metaphor of the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library is the
\emph on
 Evolution Stream
\emph default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Evolution!Stream
\end_layout

\end_inset

, implemented as Java
\family typewriter
 Stream
\family default
.
 An evolution stream is powered by—and bound to—an
\emph on
 Evolution Engine
\emph default
, which performs the needed evolution steps for each generation; the steps
 are described in the body of the
\emph on
 while
\emph default
 loop of listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Genetic-algorithm"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/EvolutionStream.eps
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evolution-workflow"

\end_inset

Evolution workflow
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Evolution workflow
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The described evolution workflow is also illustrated in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Evolution-workflow"
plural "false"
caps "false"
noprefix "false"

\end_inset

, where 
\begin_inset Formula $E_{S(i)}$
\end_inset

 denotes the
\family typewriter
 Evolution\SpecialChar softhyphen
Start
\family default
 object at generation
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $E_{R(i)}$
\end_inset

 the
\family typewriter
 Evo\SpecialChar softhyphen
lution\SpecialChar softhyphen
Result
\family default
 at the 
\begin_inset Formula $i^{th}$
\end_inset

 generation.
 Once the evolution
\family typewriter
 Engine
\family default
 is created, it can be used by multiple
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
s which can be safely used in different execution threads.
 This is possible because the evolution
\family typewriter
 Engine
\family default
 doesn't have any mutable global state and is therefore thread safe.
 It is practically a stateless function, 
\begin_inset Formula $f_{E}:\,\mathrm{P}\rightarrow\mathrm{P}$
\end_inset

, which maps a start population,
\begin_inset Formula $\mathrm{P}$
\end_inset

, to an evolved result population.
 The
\family typewriter
 Engine
\family default
 function, 
\begin_inset Formula $f_{E}$
\end_inset

, is, of course,
\emph on
 non
\emph default
deterministic.
 Calling it twice with the same start population will lead to different
 result populations.
\end_layout

\begin_layout Standard
The evolution process terminates, if the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 is truncated.
 The
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 truncation is controlled by the
\family typewriter
 limit
\family default
 predicate.
 As long as the predicate returns true, the evolution is continued.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Termination"

\end_inset

 for a detailed description of the available termination strategies.
\end_layout

\end_inset

 At last, the
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 is collected from the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 by one of the available
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 collectors.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/model/EngineModel.eps
	width 85text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evolution-engine-model"

\end_inset

Evolution engine model
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Evolution-engine-model"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the static view of the main evolution classes, together with its
 dependencies.
 Since the
\family typewriter
 Engine
\family default
 class itself is immutable, and can't be changed after creation, it is instantia
ted (configured) via a builder.
 The
\family typewriter
 Engine
\family default
 can be used to create an arbitrary number of
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
s.
 The
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 is used to control the evolutionary process and collect the final result.
 This is done in the same way as for the normal
\family typewriter
 java.\SpecialChar softhyphen
util.\SpecialChar softhyphen
stream.\SpecialChar softhyphen
Stream
\family default
 classes.
 With the additional
\family typewriter
 limit(Predicate)
\family default
 method, it is possible to truncate the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 if some termination criteria is fulfilled.
 The separation of
\family typewriter
 Engine
\family default
 and
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 is the separation of evolution definition and evolution execution.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/model/PackageModel.eps
	width 60text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Package-structure"

\end_inset

Package structure
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Package structure
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Package-structure"
plural "false"
caps "false"
noprefix "false"

\end_inset

 the package structure of the library is shown and it consists of the following
 packages:
\end_layout

\begin_layout Description

\family typewriter
io.jenetics
\family default
 This is the base package of the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library and contains all domain classes like
\family typewriter
 Gene
\family default
,
\family typewriter
 Chromosome
\family default
,
\family typewriter
 Genotype
\family default
 or
\family typewriter
 Phenotype
\family default
.
 All of this types are immutable data classes.
 It also contains the
\family typewriter
 Selector
\family default
 and
\family typewriter
 Alterer
\family default
 interfaces and its implementations.
 The classes in this package are (almost) sufficient to implement an own
 evolution
\emph on
 engine
\emph default
.
\end_layout

\begin_layout Description

\family typewriter
io.jenetics.engine
\family default
 This package contains the actual GA implementation classes, e.
\begin_inset space ~
\end_inset

g.

\family typewriter
 Engine
\family default
,
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 or
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
.
 They mainly operate on the domain classes in the
\family typewriter
 io.jenetics
\family default
 package.
\end_layout

\begin_layout Description

\family typewriter
io.jenetics.stat
\family default
 This package contains additional statistics classes which are not available
 in the Java core library.
 Java only includes classes for calculating the sum and the average of a
 given numeric stream (e.
\begin_inset space ~
\end_inset

g.

\family typewriter
 Double\SpecialChar softhyphen
Summary\SpecialChar softhyphen
Statistics
\family default
).
 With this additions it is also possible to calculate the variance, skewness
 and kurtosis—using the
\family typewriter
 Double\SpecialChar softhyphen
Moment\SpecialChar softhyphen
Statistics
\family default
 class.
 The
\family typewriter
 Evolution\SpecialChar softhyphen
Statistics
\family default
 object, which can be calculated for every generation, relies on the classes
 in this package.
\end_layout

\begin_layout Description

\family typewriter
io.jenetics.util
\family default
 This package contains the collection classes (
\family typewriter
BaseSeq
\family default
,
\family typewriter
 Seq
\family default
,
\family typewriter
 ISeq
\family default
 and
\family typewriter
 MSeq
\family default
) which are used in the public interfaces of the
\family typewriter
 Chromosome
\family default
 and
\family typewriter
 Geno\SpecialChar softhyphen
type
\family default
.
 It also contains the
\family typewriter
 Random\SpecialChar softhyphen
Registry
\family default
, which implements the
\emph on
 global
\emph default
 PRNG lookup, as well as helper
\family typewriter
 IO
\family default
 classes for serializing
\family typewriter
 Geno\SpecialChar softhyphen
type
\family default
s and whole populations.
\end_layout

\begin_layout Section
Base classes
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Base classes
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Base-classes"

\end_inset


\end_layout

\begin_layout Standard
This chapter describes the base classes which are needed to setup and run
 an genetic algorithm with the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The documentation of the whole API is part of the download package or can
 be viewed online:
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://jenetics.io/javadoc/jenetics/@__minor_version__@/index.html
\end_layout

\end_inset

.
\end_layout

\end_inset

 library.
 They can roughly divided into three types:
\end_layout

\begin_layout Description
Domain
\begin_inset space ~
\end_inset

classes These classes form the domain model of the evolutionary algorithm
 and contain the structural classes like
\family typewriter
 Gene
\family default
 and
\family typewriter
 Chromosome
\family default
.
 They are directly located in the
\family typewriter
 io.jen\SpecialChar softhyphen
etics
\family default
 package.
\end_layout

\begin_layout Description
Operation
\begin_inset space ~
\end_inset

classes These classes operate on the domain classes and includes the
\family typewriter
 Alterer
\family default
 and
\family typewriter
 Selector
\family default
 interfaces.
 They are also located in the
\family typewriter
 io.jen\SpecialChar softhyphen
etics
\family default
 package.
\end_layout

\begin_layout Description
Engine
\begin_inset space ~
\end_inset

classes These classes implement the actual evolutionary algorithm and can
 be found in the
\family typewriter
 io.jenetics\SpecialChar softhyphen
.engine
\family default
 package.
\end_layout

\begin_layout Subsection
Domain classes
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Domain classes
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Population
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the domain classes are pure data classes and can be treated as
\emph on
 value
\emph default
 objects
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Value_object
\end_layout

\end_inset


\end_layout

\end_inset

.
 All
\family typewriter
 Gene
\family default
 and
\family typewriter
 Chromosome
\family default
 implementations are immutable as well as the
\family typewriter
 Genotype
\family default
 and
\family typewriter
 Phenotype
\family default
 class.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/model/DomainModel.eps
	width 85text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Domain-model"

\end_inset

Domain model
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Domain model
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Domain-model"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the class diagram of the domain classes.
 The
\family typewriter
 Gene
\family default
 is the base of the class structure.

\family typewriter
 Gene
\family default
s are aggregated in
\family typewriter
 Chromosome
\family default
s, and one to n
\family typewriter
 Chromosome
\family default
s are aggregated in
\family typewriter
 Genotype
\family default
s.
 A
\family typewriter
 Genotype
\family default
 and a fitness
\family typewriter
 Function
\family default
 form the
\family typewriter
 Phenotype, which
\family default
 are collected into a population
\family typewriter
 Seq
\family default
.
\end_layout

\begin_layout Subsubsection
Gene
\begin_inset CommandInset label
LatexCommand label
name "subsubsec:Domain-classes-Gene"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Gene
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
T
\family default
he basic building blocks of the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library contain the actual information of the encoded solution, the allele
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Allele
\end_layout

\end_inset

.
 Some of the implementations also contain domain information of the wrapped
 allele.
 This is the case for all
\family typewriter
 Bounded\SpecialChar softhyphen
Gene
\family default
s, which contain the allowed minimum and maximum values.
 All
\family typewriter
 Gene
\family default
 implementations are final and immutable.
 In fact, they are all value based classes and fulfill the properties which
 are described in the Java API documentation
\begin_inset CommandInset citation
LatexCommand cite
key "OracleJDKValueBasedClasses"
literal "true"

\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
It is also worth reading the blog entry from Stephen Colebourne:
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://blog.joda.org/2014/03/valjos-value-java-objects.html
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Beside the container functionality for the allele, every
\family typewriter
 Gene
\family default
 is its own factory and is able to create new, random instances of the same
 type and with the same constraints
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A constraint can restrict the space of valid values of a given problem domain.
 An example will be a
\family typewriter
Double\SpecialChar softhyphen
Gene
\family default
, where the allowed minimal and maximal value of the double allele is part
 of the gene.
\end_layout

\end_inset

.
 The factory methods are used by the
\family typewriter
 Alterer
\family default
s for creating new
\family typewriter
 Gene
\family default
s from the existing one and play a crucial role by the exploration of the
 problem space.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface Gene<A, G extends Gene<A, G>>
\end_layout

\begin_layout Plain Layout

    extends Factory<G>, Verifiable
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    A allele();
\end_layout

\begin_layout Plain Layout

    boolean isValid();
\end_layout

\begin_layout Plain Layout

    G newInstance();
\end_layout

\begin_layout Plain Layout

    G newInstance(A allele);
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Gene-interface"

\end_inset


\family typewriter
Gene
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Gene-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the most important methods of the
\family typewriter
 Gene
\family default
 interface.
 The
\family typewriter
 isValid
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Gene!validation
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Validation
\end_layout

\end_inset


\family default
 method, defined in the
\family typewriter
 Verifiable
\family default
 interface, allows the gene to mark itself as invalid, e.
\begin_inset space ~
\end_inset

g.
 when its allele is not within the allowed range.
 All invalid genes are replaced with new ones during the evolution phase.
 The available
\family typewriter
 Gene
\family default
 implementations in the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library cover a wide range of problem encodings.
 Refer to chapter
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Genes"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for how to implement your own
\family typewriter
 Gene
\family default
 types.
\end_layout

\begin_layout Subsubsection
Chromosome
\begin_inset CommandInset label
LatexCommand label
name "subsubsec:Domain-classes-Chromosome"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Chromosome
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A
\family typewriter
 Chromosome
\family default
 is a collection of
\family typewriter
 Gene
\family default
s which must contain at least one
\family typewriter
 Gene
\family default
.
 This allows defining problems which require more than one
\family typewriter
 Gene
\family default
 to encode.
 Like the
\family typewriter
 Gene
\family default
 interface, the
\family typewriter
 Chromosome
\family default
 is also its own factory and allows creation of a new
\family typewriter
 Chromosome
\family default
 from a given
\family typewriter
 Gene
\family default
 sequence.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface Chromosome<G extends Gene<?, G>>
\end_layout

\begin_layout Plain Layout

	extends Factory<Chromosome<G>>, BaseSeq<G>, Verifiable
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    G get(int index);
\end_layout

\begin_layout Plain Layout

    int length();
\end_layout

\begin_layout Plain Layout

    Chromosome<G> newInstance(ISeq<G> genes);
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Chromosome-interface"

\end_inset


\family typewriter
Chromosome
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Chromosome-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the main methods of the
\family typewriter
 Chromosome
\family default
 interface.
 These are the methods for accessing single
\family typewriter
 Gene
\family default
s by its index and the factory method for creating a new
\family typewriter
 Chromosome
\family default
 from a given sequence of
\family typewriter
 Gene
\family default
s.
 The factory method is used by the
\family typewriter
 Alterer
\family default
 classes which were able to create altered
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
s from a (changed)
\family typewriter
 Gene
\family default
 sequence.
 Most of the
\family typewriter
 Chromosome
\family default
 implementations can be created with variable length.
 E.
\begin_inset space ~
\end_inset

g.
 the
\family typewriter
 Integer\SpecialChar softhyphen
Chromosome
\family default
 can be created with variable length, where the minimum value of the length
 range is included and the maximum value of the length range is excluded.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

IntegerChromosome chromosome = IntegerChromosome.of(
\end_layout

\begin_layout Plain Layout

    0, 1_000, IntRange.of(5, 9)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The factory method of the
\family typewriter
 Integer\SpecialChar softhyphen
Chromosome
\family default
 will now create chromosome instances with a length between 
\begin_inset Formula $\left[range_{min},range_{max}\right)$
\end_inset

, equally distributed.
 Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Chromosome-structure"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the structure of a
\family typewriter
 Chromosome
\family default
 with variable length.
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Chromosome!variable length
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/Chromosome.eps
	width 48text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Chromosome-structure"

\end_inset


\family typewriter
Chromosome
\family default
 structure
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Chromosome
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Genotype
\begin_inset CommandInset label
LatexCommand label
name "subsubsec:Domain-classes-Genotype"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genotype
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The central processing class, the evolution
\family typewriter
 Engine
\family default
 is working with, is the
\family typewriter
 Genotype
\family default
.
 It is the
\emph on
 structural
\emph default
 and immutable representative of an individual and consists of one to 
\begin_inset Formula $n$
\end_inset


\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
s.
 All
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
s must be parameterized with the same
\family typewriter
 Gene
\family default
 type, but each
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
 is allowed to have different lengths and constraints.
 The allowed minimal and maximal values of a
\family typewriter
 Numeric\SpecialChar softhyphen
Chromosome
\family default
 is an example of such a constraint.
 Within the same
\family typewriter
 Chromosome
\family default
, all alleles must lay within the defined minimal and maximal values.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/Genotype.eps
	width 90text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Genotype-structure"

\end_inset


\family typewriter
Genotype
\family default
 structure
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genotype
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Genotype-structure"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the
\family typewriter
 Genotype
\family default
 structure.
 A
\family typewriter
 Genotype
\family default
 consists of 
\begin_inset Formula $N_{G}$
\end_inset


\family typewriter
 Chromosome
\family default
s and a
\family typewriter
 Chromosome
\family default
 consists of 
\begin_inset Formula $N_{C[i]}$
\end_inset


\family typewriter
 Gene
\family default
s (depending on the
\family typewriter
 Chromosome
\family default
).
 The overall number of
\family typewriter
 Gene
\family default
s of a
\family typewriter
 Genotype
\family default
 is given by the sum of the
\family typewriter
 Chromosome
\family default
's
\family typewriter
 Gene
\family default
s, which can be accessed via the
\family typewriter
 Genotype\SpecialChar softhyphen
.gene\SpecialChar softhyphen
Count()
\family default
 method:
\begin_inset Formula 
\begin{equation}
N_{g}=\sum_{i=0}^{N_{G}-1}N_{C[i]}\label{eq:Number of genes}
\end{equation}

\end_inset

As already mentioned, the
\family typewriter
 Chromosome
\family default
s of a
\family typewriter
 Genotype
\family default
 don't necessarily have to have the same size.
 It is only required that all genes are from the same type and the
\family typewriter
 Gene
\family default
s within a
\family typewriter
 Chromosome
\family default
 have the same constraints; e.
\begin_inset space ~
\end_inset

g.
 the same minimal and maximal values for numerical
\family typewriter
 Gene
\family default
s.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype<DoubleGene> genotype = Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(0.0,  1.0,  8),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(1.0,  2.0, 10),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(0.0, 10.0,  9),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(0.1,  0.9,  5)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code snippet in the listing above creates a
\family typewriter
 Genotype
\family default
 with the same structure as shown in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Genotype-structure"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 In this example the
\family typewriter
 Double\SpecialChar softhyphen
Gene
\family default
 has been chosen as the
\family typewriter
 Gene
\family default
 type.
\end_layout

\begin_layout Paragraph

\family typewriter
Genotype
\family default
 vector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genotype!vector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Genotype
\family default
 is essentially a two-dimensional composition of
\family typewriter
 Gene
\family default
s.
 This makes it trivial to create
\family typewriter
 Genotype
\family default
s which can be treated as a
\family typewriter
 Gene
\family default
 matrices.
 If its needed to create a vector of
\family typewriter
 Gene
\family default
s, there are two possibilities to do so:
\end_layout

\begin_layout Enumerate
creating a
\emph on
 row major
\emph default
 or
\end_layout

\begin_layout Enumerate
creating a
\emph on
 column major
\end_layout

\begin_layout Standard

\family typewriter
Genotype
\family default
 vector.
 Each of the two possibilities have specific advantages and disadvantages.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/RowMajorGenotype.eps
	width 65text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Row-major-genotype-vector"

\end_inset

Row major
\family typewriter
 Genotype
\family default
 vector
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Row-major-genotype-vector"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows a
\family typewriter
 Genotype
\family default
 vector in row major layout.
 A
\family typewriter
 Genotype
\family default
 vector of length
\begin_inset Formula $n$
\end_inset

 needs one
\family typewriter
 Chromosome
\family default
 of length 
\begin_inset Formula $n$
\end_inset

.
 Each
\family typewriter
 Gene
\family default
 of such a vector must obey the same constraints.
 E.
\begin_inset space ~
\end_inset

g., for
\family typewriter
 Genotype
\family default
 vectors containing
\family typewriter
 Numeric\SpecialChar softhyphen
Gene
\family default
s, all
\family typewriter
 Gene
\family default
s must have the same minimum and maximum values.
 If the problem space doesn't need to have different minimum and maximum
 values, the row major
\family typewriter
 Genotype
\family default
 vector is the preferred choice.
 Beside the easier
\family typewriter
 Geno\SpecialChar softhyphen
type
\family default
 creation, the available
\family typewriter
 Re\SpecialChar softhyphen
com\SpecialChar softhyphen
bi\SpecialChar softhyphen
na\SpecialChar softhyphen
tor
\family default
 alterers are more efficient in exploring the search domain.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
If the problem space allows equal
\family typewriter
 Gene
\family sans
 constraint, the row major
\family typewriter
 Genotype
\family sans
 vector encoding should be chosen.
 It is easier to create and the available
\family typewriter
 Recombinator
\family sans
 classes are more efficient in exploring the search domain.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following code snippet shows the creation of a row major
\family typewriter
 Genotype
\family default
 vector.
 All
\family typewriter
 Alterer
\family default
s derived from the
\family typewriter
 Recombinator
\family default
 do a fairly good job in exploring the problem space for a row major
\family typewriter
 Genotype
\family default
 vector.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype<DoubleGene> genotype = Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(0.0,  1.0,  8)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset

The column major
\family typewriter
 Genotype
\family default
 vector layout must be chosen when the problem space requires
\family typewriter
 Gene
\family default
s with different constraints.
 This is almost the only reason for choosing the column major layout.
 The layout of this
\family typewriter
 Genotype
\family default
 vector is shown in
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Column-major-genotype-vector"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 For a vector of length 
\begin_inset Formula $n$
\end_inset

, 
\begin_inset Formula $n$
\end_inset


\family typewriter
 Chromosome
\family default
s of length one are needed.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/ColumnMajorGenotype.eps
	width 23text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Column-major-genotype-vector"

\end_inset

Column major
\family typewriter
 Genotype
\family default
 vector
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code snippet below shows how to create a
\family typewriter
 Genotype
\family default
 vector in column major layout.
 It's a little bit more effort to create such a vector, since every
\family typewriter
 Gene
\family default
 has to be wrapped into a separate
\family typewriter
 Chromosome
\family default
.
 The
\family typewriter
 Double\SpecialChar softhyphen
Chromosome
\family default
 in the given example has a length of one, when the length parameter is
 omitted.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype<DoubleGene> genotype = Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(0.0,  1.0),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(1.0,  2.0),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(0.0, 10.0),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(0.1,  0.9)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The greater flexibility of a column major
\family typewriter
 Genotype
\family default
 vector has to be paid with a lower exploration capability of the
\family typewriter
 Recombinator
\family default
 alterers.
 Using
\family typewriter
 Crossover
\family default
 alterers will have the same effect as the
\family typewriter
 Swap\SpecialChar softhyphen
Mutator
\family default
, when used with row major
\family typewriter
 Genotype
\family default
 vectors.
 Recommended alterers for vectors of
\family typewriter
 Numeric\SpecialChar softhyphen
Gene
\family default
s are:
\end_layout

\begin_layout Itemize

\family typewriter
MeanAlterer
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See
\begin_inset CommandInset ref
LatexCommand vref
reference "par:Mean-alterer"

\end_inset

.
\end_layout

\end_inset

,
\end_layout

\begin_layout Itemize

\family typewriter
LineCrossover
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See
\begin_inset CommandInset ref
LatexCommand vref
reference "par:Line-crossover"

\end_inset

.
\end_layout

\end_inset

 and
\end_layout

\begin_layout Itemize

\family typewriter
IntermediateCrossover
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See
\begin_inset CommandInset ref
LatexCommand vref
reference "par:Intermediate-crossover"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
See also
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Vector-codec"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for an advanced description on how to use the predefined vector codecs.
\end_layout

\begin_layout Paragraph

\family typewriter
Genotype
\family default
 scalar
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genotype!scalar
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A special case of a
\family typewriter
 Genotype
\family default
 contains only one
\family typewriter
 Chro\SpecialChar softhyphen
mo\SpecialChar softhyphen
some
\family default
 with length one.
 The layout of such a
\family typewriter
 Genotype
\family default
\emph on
 scalar
\emph default
 is shown in
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Genotype-scalar"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Such
\family typewriter
 Genotype
\family default
s are mostly used for encoding real function problems.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/ScalarGenotype.eps
	width 23text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Genotype-scalar"

\end_inset


\family typewriter
Genotype
\family default
 scalar
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
How to create a
\family typewriter
 Genotype
\family default
 for a real function optimization problem is shown in the code snippet below.
 The recommended
\family typewriter
 Alterer
\family default
s are the same as for column major
\family typewriter
 Genotype
\family default
 vectors:
\family typewriter
 Mean\SpecialChar softhyphen
Alterer
\family default
,
\family typewriter
 Line\SpecialChar softhyphen
Crossover
\family default
 and
\family typewriter
 Inter\SpecialChar softhyphen
me\SpecialChar softhyphen
di\SpecialChar softhyphen
ate\SpecialChar softhyphen
Cross\SpecialChar softhyphen
over
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype<DoubleGene> genotype = Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(0.0, 1.0)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
See also
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Scalar-codec"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for an advanced description on how to use the predefined scalar codecs.
\end_layout

\begin_layout Subsubsection
Phenotype
\begin_inset CommandInset label
LatexCommand label
name "subsubsec:Domain-classes-Phenotype"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Phenotype
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Phenotype
\family default
 is the
\emph on
 actual
\emph default
 representative of an individual and consists of the
\family typewriter
 Genotype
\family default
, the generation where the
\family typewriter
 Pheno\SpecialChar softhyphen
type
\family default
 has been created and an optional fitness value.
 Like the
\family typewriter
 Genotype
\family default
, the
\family typewriter
 Phenotype
\family default
 is immutable and can't be changed after creation.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public final class Phenotype<
\end_layout

\begin_layout Plain Layout

    G extends Gene<?, G>,
\end_layout

\begin_layout Plain Layout

    C extends Comparable<? super C>
\end_layout

\begin_layout Plain Layout

>
\end_layout

\begin_layout Plain Layout

    implements Comparable<Phenotype<G, C>>
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    public Genotype<G> genotype();
\end_layout

\begin_layout Plain Layout

    public long generation();
\end_layout

\begin_layout Plain Layout

    public C fitness();
\end_layout

\begin_layout Plain Layout

    public boolean isEvaluated();
\end_layout

\begin_layout Plain Layout

    public Phenotype<G, C> withFitness(C fitness);
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
\begin_inset CommandInset label
LatexCommand label
name "lis:Phenotype-class"

\end_inset

Phenotype
\family default
 class
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Phenotype-class"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the main methods of the
\family typewriter
 Pheno\SpecialChar softhyphen
type
\family default
.
 The
\family typewriter
 fitness
\family default
 property will return the actual fitness value of the
\family typewriter
 Genotype
\family default
, and the
\family typewriter
 Genotype
\family default
 can be fetched with the
\family typewriter
 geno\SpecialChar softhyphen
type()
\family default
 method.
 If no fitness value is associated with the
\family typewriter
 Pheno\SpecialChar softhyphen
type
\family default
 yet, the
\family typewriter
 fitness()
\family default
 method will throw an
\family typewriter
 No\SpecialChar softhyphen
Such\SpecialChar softhyphen
Ele\SpecialChar softhyphen
ment\SpecialChar softhyphen
Exc\SpecialChar softhyphen
eption
\family default
.
 Whether the fitness value has been set can be checked with the
\family typewriter
 isEvaluated()
\family default
 method.
 Setting a fitness value can be done with the
\family typewriter
 with\SpecialChar softhyphen
Fitness(\SpecialChar softhyphen
C\SpecialChar softhyphen
)
\family default
 method.
 Since the
\family typewriter
 Pheno\SpecialChar softhyphen
type
\family default
 is immutable, this method returns a new
\family typewriter
 Phenotype
\family default
 with the set fitness value.
 Additionally to the fitness value, the
\family typewriter
 Phenotype
\family default
 contains the generation when it was created.
 This allows for the calculation of the current age and allows for the removal
 of overaged individuals from the population.
\end_layout

\begin_layout Subsubsection
Population
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Population
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There is no special class which represents a population.
 It's
\emph on
 just
\emph default
 a collection of
\family typewriter
 Phenotype
\family default
s.
 As a collection class, the
\family typewriter
 ISeq
\family default
 interface is used.
 The
\family typewriter
 ISeq
\family default
 interface allows for the expression of the immutability of the population
 at the type level and makes the code more readable.
 For a detailed description of this collection classes see section
\begin_inset CommandInset ref
LatexCommand ref
reference "par:io.jenetics.util.Seq"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Operation classes
\begin_inset CommandInset label
LatexCommand label
name "subsec:Operation-classes"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Operation classes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Genetic operators"
target "https://en.wikipedia.org/wiki/Genetic_operator"
literal "false"

\end_inset

 are used for creating
\shape italic
\emph on
 genetic
\shape default
\emph default
 diversity (
\family typewriter
Alterer
\family default
) and selecting potentially useful solutions for recombination (
\family typewriter
Selector
\family default
).
 This section gives an overview about the genetic operators available in
 the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library.
 It also contains some theoretical information, which should help you to
 choose the right combination of operators and parameters, for the problem
 to be solved.
\end_layout

\begin_layout Subsubsection
Selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Selectors are responsible for selecting a given number of individuals from
 the population.
 The selectors are used to divide the population into
\shape italic
\emph on
 survivors
\shape default
\emph default
 and
\shape italic
\emph on
 offspring
\shape default
\emph default
.
 The selectors for
\shape italic
\emph on
 offspring
\shape default
\emph default
 and for the
\shape italic
\emph on
 survivors
\shape default
\emph default
 can be set independently.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
The selection process of the
\series bold
\shape smallcaps
 Jenetics
\series default
\shape default
 library acts on
\family typewriter
 Phenotype
\family sans
s and indirectly, via the fitness function, on
\family typewriter
 Genotype
\family sans
s.
 Direct
\family typewriter
 Gene
\family sans
 or population selection is not supported by the library.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Engine<DoubleGene, Double> engine = Engine.builder(...)
\end_layout

\begin_layout Plain Layout

    .offspringFraction(0.7)
\end_layout

\begin_layout Plain Layout

    .survivorsSelector(new RouletteWheelSelector<>())
\end_layout

\begin_layout Plain Layout

    .offspringSelector(new TournamentSelector<>())
\end_layout

\begin_layout Plain Layout

    .build();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 offspringFraction
\family default
, 
\begin_inset Formula $f_{O}\in[0,1]$
\end_inset

, determines the number of selected offspring
\begin_inset Formula 
\begin{equation}
N_{O_{g}}=\left\Vert O_{g}\right\Vert =\textrm{rint}\left(\left\Vert P_{g}\right\Vert \cdot f_{O}\right)
\end{equation}

\end_inset

and the number of selected survivors
\begin_inset Formula 
\begin{equation}
N_{S_{g}}=\left\Vert S_{g}\right\Vert =\left\Vert P_{g}\right\Vert -\left\Vert O_{g}\right\Vert .
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
The
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library contains the following selector implementations:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
TournamentSelector
\end_layout

\begin_layout Itemize

\family typewriter
TruncationSelector
\end_layout

\begin_layout Itemize

\family typewriter
MonteCarloSelector
\end_layout

\begin_layout Itemize

\family typewriter
ProbabilitySelector
\end_layout

\begin_layout Itemize

\family typewriter
RouletteWheelSelector
\end_layout

\begin_layout Itemize

\family typewriter
LinearRankSelector
\end_layout

\begin_layout Itemize

\family typewriter
ExponentialRankSelector
\end_layout

\begin_layout Itemize

\family typewriter
BoltzmannSelector
\end_layout

\begin_layout Itemize

\family typewriter
StochasticUniversalSelector
\end_layout

\begin_layout Itemize

\family typewriter
EliteSelector
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Beside the well known standard selector implementation, the
\family typewriter
 Probability\SpecialChar softhyphen
Selector
\family default
 is the base of a set of fitness proportional selectors.
\end_layout

\begin_layout Paragraph
Tournament selector
\begin_inset CommandInset label
LatexCommand label
name "par:Tournament-selector"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Tournament selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In
\begin_inset CommandInset href
LatexCommand href
name "tournament selection"
target "https://en.wikipedia.org/wiki/Tournament_selection"
literal "false"

\end_inset

 the best individual from a random sample of 
\begin_inset Formula $s$
\end_inset

 individuals is chosen from the population, 
\begin_inset Formula $P_{g}$
\end_inset

.
 The samples are drawn with replacement.
 An individual will win a tournament only if the fitness is greater than
 the fitness of the other 
\begin_inset Formula $s-1$
\end_inset

 competitors.
 Note that the worst individual never survives, and the best individual
 wins in all the tournaments in which it participates.
 The selection pressure can be varied by changing the tournament size,
\begin_inset Formula $s$
\end_inset

.
 For large values of 
\begin_inset Formula $s$
\end_inset

, weak individuals have less chance of being selected.
 Compared with fitness proportional selectors, the tournament selector is
 often used in practice because of its lack of stochastic noise.
 Tournament selectors are also independent to the scaling of the genetic
 algorithm fitness function.
\end_layout

\begin_layout Paragraph
Truncation selector
\begin_inset CommandInset label
LatexCommand label
name "par:Truncation-selector"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Truncation selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In
\begin_inset CommandInset href
LatexCommand href
name "truncation selection"
target "https://en.wikipedia.org/wiki/Truncation_selection"
literal "false"

\end_inset

 individuals are sorted according to their fitness and only the
\begin_inset Formula $n$
\end_inset

 best individuals are selected.
 The truncation selection is a very basic selection algorithm.
 It has its strength in fast selecting individuals in large populations,
 but is not very often used in practice; whereas the truncation selection
 is a standard method in animal and plant breeding.
 Only the best animals, ranked by their phenotypic value, are selected for
 reproduction.
\end_layout

\begin_layout Paragraph
Monte Carlo selector
\begin_inset CommandInset label
LatexCommand label
name "par:Monte-Carlo-selector"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Monte Carlo selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Monte Carlo selector selects the individuals from a given population
 randomly.
 Instead of a directed search, the Monte Carlo selector performs a random
 search.
 This selector can be used to measure the performance of other selectors.
 In general, the
\shape italic
\emph on
 performance
\shape default
\emph default
 of a selector should be better than the selection performance of the Monte
 Carlo selector.
 If the Monte Carlo selector is used for selecting the parents for the populatio
n, it will be a little bit more disruptive, on average, than roulette wheel
 selection.
\begin_inset CommandInset citation
LatexCommand cite
key "Sivanandam2010"
literal "true"

\end_inset


\end_layout

\begin_layout Paragraph
Probability selectors
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Probability selector
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "par:Probability-selectors"

\end_inset


\end_layout

\begin_layout Standard
Probability selectors are a variation of
\shape italic
 fitness proportional
\shape default
 selectors and selects individuals from a given population based on its
\shape italic
\emph on
 selection
\shape default
\emph default
 probability, 
\begin_inset Formula $P\left(i\right)$
\end_inset

.
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/FitnessProportionalSelection.eps
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Fitness-proportional-selection"

\end_inset

Fitness proportional selection
\end_layout

\end_inset


\end_layout

\end_inset

Fitness proportional selection works as shown in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fitness-proportional-selection"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 An uniform distributed random number 
\begin_inset Formula $r\in\left[0,F\right)$
\end_inset

 specifies which individual is selected, by argument minimization:
\begin_inset Formula 
\begin{equation}
i\leftarrow\underset{n\in\left[0,N\right)}{\textrm{argmin}}\left\{ r<\sum_{i=0}^{n}f_{i}\right\} ,
\end{equation}

\end_inset

where 
\begin_inset Formula $N$
\end_inset

 is the number of individuals and 
\begin_inset Formula $f_{i}$
\end_inset

 the fitness value of the 
\begin_inset Formula $i^{\textrm{th}}$
\end_inset

 individual.
 The probability selector works the same way, only the fitness value, 
\begin_inset Formula $f_{i}$
\end_inset

, is replaced by the individual's selection probability, 
\begin_inset Formula $P(i)$
\end_inset

.
 It is not necessary to sort the population.
 The selection probability of an individual,
\begin_inset Formula $i$
\end_inset

, follows a binomial distribution
\begin_inset Formula 
\begin{equation}
P\left(i,k\right)=\left(\begin{array}{c}
n\\
k
\end{array}\right)P\left(i\right){}^{k}\left(1-P\left(i\right)\right)^{n-k}
\end{equation}

\end_inset

where
\begin_inset Formula $n$
\end_inset

 is the overall number of selected individuals and
\begin_inset Formula $k$
\end_inset

 the number of individuals
\begin_inset Formula $i$
\end_inset

 in the set of selected individuals.
 The runtime complexity of the implemented probability selectors is 
\begin_inset Formula $O\left(n+\log\left(n\right)\right)$
\end_inset

 instead of 
\begin_inset Formula $O\left(n\text{²}\right)$
\end_inset

 as for the naive approach:
\emph on
 A binary (index) search is performed on the summed probability array.
\end_layout

\begin_layout Paragraph
Roulette-wheel selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Roulette-wheel selector
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "par:Roulette-wheel-selector"

\end_inset


\end_layout

\begin_layout Standard
The roulette-wheel selector is also known as the fitness proportional selector
 and
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 implements it as a probability selector.
 For calculating the selection probability, 
\begin_inset Formula $P\left(i\right)$
\end_inset

, the fitness value, 
\begin_inset Formula $f_{i}$
\end_inset

, of individual 
\begin_inset Formula $i$
\end_inset

 is used.
\begin_inset Formula 
\begin{equation}
P\left(i\right)=\frac{f_{i}}{\sum_{j=0}^{N-1}f_{j}}\label{eq:roulette-wheele-distribution}
\end{equation}

\end_inset

Selecting 
\begin_inset Formula $n$
\end_inset

 individuals from a given population is equivalent to play 
\begin_inset Formula $n$
\end_inset

 times on the roulette-wheel.
 The population doesn't have to be sorted before selecting the individuals.
 Notice that equation
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:roulette-wheele-distribution"
plural "false"
caps "false"
noprefix "false"

\end_inset

 assumes that all fitness values are positive and the sum of the fitness
 values is not zero.
 To cope with negative fitnesses, an adapted formula is used for calculating
 the selection probabilities.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
P'\left(i\right)=\frac{f_{i}-f_{\mathrm{min}}}{\sum_{j=0}^{N-1}\left(f_{j}-f_{\mathrm{min}}\right)},
\end{equation}

\end_inset

where
\begin_inset Formula 
\[
f_{\mathrm{min}}=\min_{i\in\left[0,N\right)}\left\{ f_{i},0\right\} 
\]

\end_inset

As you can see, the worst fitness value, 
\begin_inset Formula $f_{\mathrm{min}}$
\end_inset

, if negative, now has a selection probability of zero.
 In the case that the sum of the corrected fitness values is zero, the selection
 probability of all fitness values will be set 
\begin_inset Formula $\frac{1}{N}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Linear-rank selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Linear-rank selector
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "par:Linear-rank-selector"

\end_inset


\end_layout

\begin_layout Standard
The roulette-wheel selector will have problems when the fitness values differ
 very much.
 If the best
\family typewriter
 Chromosome
\family default
 fitness is 90%, its circumference occupies 90% of roulette-wheel, and then
 other
\family typewriter
 Chromosomes
\family default
 have too few chances to be selected.
\begin_inset CommandInset citation
LatexCommand cite
key "Sivanandam2010"
literal "true"

\end_inset

 In linear-ranking selection the individuals are sorted according to their
 fitness values.
 The rank 
\begin_inset Formula $N$
\end_inset

 is assigned to the best individual and the rank 1 to the worst individual.
 The selection probability, 
\begin_inset Formula $P\left(i\right)$
\end_inset

, of individual
\begin_inset Formula $i$
\end_inset

 is linearly assigned to the individuals according to their rank.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
P\left(i\right)=\frac{1}{N}\left(n^{-}+\left(n^{+}-n^{-}\right)\frac{i-1}{N-1}\right).
\end{equation}

\end_inset

Here 
\begin_inset Formula $\frac{n^{-}}{N}$
\end_inset

 is the probability of the worst individual to be selected and 
\begin_inset Formula $\frac{n^{+}}{N}$
\end_inset

 the probability of the best individual to be selected.
 As the population size is held constant, the condition 
\begin_inset Formula $n^{+}=2-n^{-}$
\end_inset

 and 
\begin_inset Formula $n^{-}\geq0$
\end_inset

 must be fulfilled.
 Note that all individuals get a different rank, respectively a different
 selection probability, even if they have the same fitness value.
\begin_inset CommandInset citation
LatexCommand cite
key "Blickle97acomparison"
literal "true"

\end_inset


\end_layout

\begin_layout Paragraph
Exponential-rank selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Exponential-rank selector
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "par:Exponential-rank-selector"

\end_inset


\end_layout

\begin_layout Standard
An alternative to the
\shape italic
 weak
\shape default
 linear-rank selector is to assign survival probabilities to the sorted
 individuals using an exponential function:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
P\left(i\right)=\left(c-1\right)\frac{c^{i-1}}{c^{N}-1},
\end{equation}

\end_inset

where
\begin_inset Formula $c$
\end_inset

 must be within the range 
\begin_inset Formula $\left[0,1\right)$
\end_inset

.
 A small value of
\begin_inset Formula $c$
\end_inset

 increases the probability of the best individual to be selected.
 If 
\begin_inset Formula $c$
\end_inset

 is set to zero, the selection probability of the best individual is set
 to one.
 The selection probability of all other individuals is zero.
 A value near one equalizes the selection probabilities.
 This selector sorts the population in descending order before calculating
 the selection probabilities.
\end_layout

\begin_layout Paragraph
Boltzmann selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Boltzmann selector
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "par:Boltzmann-selector"

\end_inset


\end_layout

\begin_layout Standard
The selection probability of the Boltzmann selector is defined as
\begin_inset Formula 
\begin{equation}
P\left(i\right)=\frac{\textrm{e}^{b\cdot f_{i}}}{Z},
\end{equation}

\end_inset

where 
\begin_inset Formula $b$
\end_inset

 is a parameter which controls the selection intensity and
\begin_inset Formula $Z$
\end_inset

 is defined as
\begin_inset Formula 
\begin{equation}
Z=\sum_{i=1}^{n}\textrm{e}^{f_{i}}.
\end{equation}

\end_inset

Positive values of 
\begin_inset Formula $b$
\end_inset

 increases the selection probability of individuals with high fitness values
 and negative values of 
\begin_inset Formula $b$
\end_inset

 decreases it.
 If 
\begin_inset Formula $b$
\end_inset

 is zero, the selection probability of all individuals is set to 
\begin_inset Formula $\frac{1}{N}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Stochastic-universal selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Stochastic-universal selector
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "par:Stochastic-universal-selector"

\end_inset


\end_layout

\begin_layout Standard
Stochastic-universal selection
\begin_inset CommandInset citation
LatexCommand cite
key "back1996evolutionary"
literal "true"

\end_inset

 (SUS) is a method for selecting individuals according to some given probability
 in a way that minimizes the chance of fluctuations.
 It can be viewed as a type of roulette game where we now have 
\begin_inset Formula $p$
\end_inset

 equally spaced points which we spin.
 SUS uses a single random value for selecting individuals by choosing them
 at equally spaced intervals.
 Weaker members of the population (according to their fitness) have a better
 chance to be chosen, which reduces the unfair nature of fitness-proportional
 selection methods.
 The selection method was introduced by James Baker.
\begin_inset CommandInset citation
LatexCommand cite
key "baker1987selection"
literal "true"

\end_inset


\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/StochasticUniversalSelection.eps
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Stochastic-universal-selection"

\end_inset

Stochastic-universal selection
\end_layout

\end_inset


\end_layout

\end_inset

Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Stochastic-universal-selection"

\end_inset

 shows the function of the stochastic-universal selection, where
\begin_inset Formula $n$
\end_inset

 is the number of individuals to select.
 Stochastic-universal sampling ensures a selection of offspring, which is
 closer to what is deserved than roulette wheel selection.
\begin_inset CommandInset citation
LatexCommand cite
key "Sivanandam2010"
literal "true"

\end_inset


\end_layout

\begin_layout Paragraph
Elite selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Elite selector
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Elitism
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 EliteSelector
\family default
 copies a small proportion of the fittest candidates, without changes, into
 the next generation.
 This may have a dramatic impact on performance by ensuring that the GA
 doesn't waste time rediscovering previously refused partial solutions.
 Individuals that are preserved through elitism remain eligible for selection
 as parents of the next generation.
 Elitism is also related with memory:
\emph on
 remember the best solution found so far
\emph default
.
 A problem with elitism is that it may cause the GA to converge to a
\emph on
 local
\emph default
 optimum, so pure elitism is a race to the nearest local optimum.
 The elite selector implementation of the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library also lets you specify the selector for the
\emph on
 non
\emph default
 elite individuals.
\end_layout

\begin_layout Subsubsection
Alterer
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Alterer
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Alterer"

\end_inset


\end_layout

\begin_layout Standard
The problem encoding/representation determines the bounds of the search
 space, but the
\family typewriter
 Alterer
\family default
s determine how the space can be traversed:
\family typewriter
 Alterer
\family default
s are responsible for the genetic diversity of the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
.
 The two
\family typewriter
 Alterer
\family default
 hierarchies used in
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 are:
\end_layout

\begin_layout Enumerate
\begin_inset CommandInset href
LatexCommand href
name "mutation"
target "https://en.wikipedia.org/wiki/Mutation_(genetic_algorithm)"
literal "false"

\end_inset

 and
\end_layout

\begin_layout Enumerate
recombination (e.
\begin_inset space ~
\end_inset

g.
\begin_inset CommandInset href
LatexCommand href
name "crossover"
target "https://en.wikipedia.org/wiki/Crossover_(genetic_algorithm)"
literal "false"

\end_inset

).
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../resources/graphic/Aldus_leaf_unicode2766.svg
	lyxscale 20
	height 12pt

\end_inset


\end_layout

\begin_layout Standard

\series bold
First we will have a look at the mutation
\series default
 — There are two distinct roles
\emph on
 mutation
\emph default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Mutation
\end_layout

\end_inset

 plays in the evolution process:
\end_layout

\begin_layout Enumerate

\series bold
Exploring the search space
\series default
: By making small moves, mutation allows a population to explore the search
 space.
 This exploration is often slow compared to crossover, but in problems where
 crossover is disruptive this can be an important way to explore the landscape.
\end_layout

\begin_layout Enumerate

\series bold
Maintaining diversity
\series default
: Mutation prevents a population from converging to a local minimum by stopping
 the solution to become too close to one another.
 A genetic algorithm can improve the solution solely by the mutation operator.
 Even if most of the search is being performed by crossover, mutation can
 be vital to provide the diversity which crossover needs.
\end_layout

\begin_layout Standard
The mutation probability, 
\begin_inset Formula $P\left(m\right)$
\end_inset

, is the parameter that must be optimized.
 The optimal value of the mutation rate depends on the role mutation plays.
 If mutation is the only source of exploration (if there is no crossover),
 the mutation rate should be set to a value that ensures that a reasonable
 neighborhood of solutions is explored.
\end_layout

\begin_layout Standard
The mutation probability, 
\begin_inset Formula $P\left(m\right)$
\end_inset

, is defined as the probability that a specific gene, over the whole population,
 is mutated.
 That means, the (average) number of genes mutated by a mutator is
\begin_inset Formula 
\begin{equation}
\hat{\mu}=N_{P}\cdot N_{g}\cdot P\left(m\right)
\end{equation}

\end_inset

where 
\begin_inset Formula $N_{g}$
\end_inset

 is the number of available genes of a genotype and 
\begin_inset Formula $N_{P}$
\end_inset

 the population size (refer to equation
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Number of genes"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Paragraph
Mutator
\begin_inset CommandInset label
LatexCommand label
name "par:Mutator"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Mutator
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The mutator has to deal with the problem, that the genes are arranged in
 a
\shape italic
 hierarchical
\shape default
 structure with three levels (see chapter
\begin_inset CommandInset ref
LatexCommand ref
reference "subsubsec:Domain-classes-Genotype"

\end_inset

).
 The mutator selects the gene which will be mutated in three steps:
\end_layout

\begin_layout Enumerate
Select a genotype, 
\begin_inset Formula $G[i]$
\end_inset

, from the population with probability 
\begin_inset Formula $P_{G}\left(m\right)$
\end_inset

,
\end_layout

\begin_layout Enumerate
select a chromosome, 
\begin_inset Formula $C[j]$
\end_inset

, from the selected genotype, 
\begin_inset Formula $G[i]$
\end_inset

, with probability 
\begin_inset Formula $P_{C}(m)$
\end_inset

 and
\end_layout

\begin_layout Enumerate
select a gene, 
\begin_inset Formula $g[k]$
\end_inset

, from the selected chromosome, 
\begin_inset Formula $C[j]$
\end_inset

, with probability 
\begin_inset Formula $P_{g}(m)$
\end_inset

.
\end_layout

\begin_layout Standard
The needed
\emph on
 sub
\emph default
 selection probabilities are set to
\begin_inset Formula 
\begin{equation}
P_{G}(m)=P_{C}(m)=P_{g}(m)=\sqrt[3]{P(m)}.
\end{equation}

\end_inset


\end_layout

\begin_layout Paragraph
Gaussian mutator
\begin_inset CommandInset label
LatexCommand label
name "par:Gaussian-mutator"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Gaussian mutator
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Gaussian mutator performs the mutation of number genes.
 This mutator picks a new value based on a Gaussian distribution around
 the current value of the gene.
 The variance of the new value (before clipping to the allowed gene range)
 will be
\begin_inset Formula 
\begin{equation}
\hat{\sigma}^{2}=\left(\frac{g_{max}-g_{min}}{4}\right)^{2}
\end{equation}

\end_inset

where 
\begin_inset Formula $g_{min}$
\end_inset

 and 
\begin_inset Formula $g_{max}$
\end_inset

 are the valid minimum and maximum values of the number gene.
 The new value will be cropped to the gene's boundaries.
\end_layout

\begin_layout Paragraph
Swap mutator
\begin_inset CommandInset label
LatexCommand label
name "par:Swap-mutator"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Swap mutator
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The swap mutator changes the order of genes in a chromosome, with the hope
 of bringing related genes closer together, thereby facilitating the production
 of building blocks.
 This mutation operator can also be used for combinatorial problems, where
 no duplicated genes within a chromosome are allowed, e.
\begin_inset space ~
\end_inset

g.
 for the TSP.
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../resources/graphic/Aldus_leaf_unicode2766.svg
	lyxscale 20
	height 12pt

\end_inset


\end_layout

\begin_layout Standard

\series bold
The second alterer type is the recombination
\series default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Recombination
\end_layout

\end_inset

 — An enhanced genetic algorithm (EGA) combines elements of existing solutions
 in order to create a new solution, with some of the properties of each
 parent.
 Recombination creates a new chromosome by combining parts of two (or more)
 parent chromosomes.
 This combination of chromosomes can be made by selecting one or more crossover
 points, splitting these chromosomes on the selected points, and merging
 those portions of different chromosomes to form new ones.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

void recombine(final MSeq<Phenotype<G, C>> pop) {
\end_layout

\begin_layout Plain Layout

    // Select the Genotypes for crossover.
\end_layout

\begin_layout Plain Layout

    final RandomGenerator random = RandomRegistry.random();
\end_layout

\begin_layout Plain Layout

    final int i1 = random.nextInt(pop.length());
\end_layout

\begin_layout Plain Layout

    final int i2 = random.nextInt(pop.length());
\end_layout

\begin_layout Plain Layout

    final Phenotype<G, C> pt1 = pop.get(i1);
\end_layout

\begin_layout Plain Layout

    final Phenotype<G, C> pt2 = pop.get(i2);
\end_layout

\begin_layout Plain Layout

    final Genotype<G> gt1 = pt1.genotype();
\end_layout

\begin_layout Plain Layout

    final Genotype<G> gt2 = pt2.genotype();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    //Choosing the Chromosome for crossover.
\end_layout

\begin_layout Plain Layout

    final int chIndex =
\end_layout

\begin_layout Plain Layout

        random.nextInt(min(gt1.length(), gt2.length()));
\end_layout

\begin_layout Plain Layout

    final MSeq<Chromosome<G>> c1 = MSeq.of(gt1);
\end_layout

\begin_layout Plain Layout

    final MSeq<Chromosome<G>> c2 = MSeq.of(gt2);
\end_layout

\begin_layout Plain Layout

    final MSeq<G> genes1 = MSeq.of(c1.get(chIndex));
\end_layout

\begin_layout Plain Layout

    final MSeq<G> genes2 = MSeq.of(c2.get(chIndex));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Perform the crossover.
\end_layout

\begin_layout Plain Layout

    crossover(genes1, genes2);
\end_layout

\begin_layout Plain Layout

    c1.set(chIndex, c1.get(chIndex).newInstance(genes1.toISeq()));
\end_layout

\begin_layout Plain Layout

    c2.set(chIndex, c2.get(chIndex).newInstance(genes2.toISeq()));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    //Creating two new Phenotypes and replace the old one.
\end_layout

\begin_layout Plain Layout

    pop.set(i1, Phenotype.of(Genotype.of(c1.toISeq())));
\end_layout

\begin_layout Plain Layout

    pop.set(i2, Phenotype.of(Genotype.of(c2.toISeq())));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Chromosome selection for recombination
\begin_inset CommandInset label
LatexCommand label
name "lis:Chromosome-selection-recombination"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Chromosome!recombination
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Chromosome-selection-recombination"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how two chromosomes are selected for
\emph on
 recombination
\emph default
.
 It is done this way for preserving the given
\emph on
 constraints
\emph default
 and to avoid the creation of invalid individuals.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\align block

\family sans
\shape italic
\emph on
Because of the possible different
\family typewriter
 Chromosome
\family sans
 length and/or
\family typewriter
 Chromosome
\family sans
 constraints within a
\family typewriter
 Genotype
\family sans
, only
\family typewriter
 Chromosome
\family sans
s with the same
\family typewriter
 Genotype
\family sans
 position are recombined (see listing
\family default
\shape default
\emph default

\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Chromosome-selection-recombination"
plural "false"
caps "false"
noprefix "false"

\end_inset


\family sans
\shape italic
\emph on
).
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The recombination probability, 
\begin_inset Formula $P(r)$
\end_inset

, determines the probability that a given individual (genotype) of a population
 is selected for recombination.
 The (mean) number of changed individuals depend on the concrete implementation
 and can be vary from 
\begin_inset Formula $P(r)\cdot N_{G}$
\end_inset

 to 
\begin_inset Formula $P(r)\cdot N_{G}\cdot O_{R}$
\end_inset

, where 
\begin_inset Formula $O_{R}$
\end_inset

 is the order of the recombination, which is the number of individuals involved
 in the
\family typewriter
 combine
\family default
 method.
\end_layout

\begin_layout Paragraph
Single-point crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Single-point crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!Single-point crossover
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The single-point crossover changes two children chromosomes by taking two
 chromosomes and cutting them at some, randomly chosen, site.
 If we create a child and its complement we preserve the total number of
 genes in the population, preventing any genetic drift.
 Single-point crossover is the classic form of crossover.
 However, it produces very slow mixing compared with multi-point crossover
 or uniform crossover.
 For problems where the site position has some intrinsic meaning to the
 problem, single-point crossover can lead to smaller disruption than multi-point
 or uniform crossover.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/SinglePointCrossover.eps
	width 75text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Single-point-crossover"

\end_inset

Single-point crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Single-point crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!Single-point crossover
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Single-point-crossover"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how the
\family typewriter
 SinglePointCrossover
\family default
 class is performing the crossover for different crossover points.
 Sub figure
\emph on
 a)
\emph default
 shows the two chromosomes chosen for crossover.
 The examples in sub figures
\emph on
 b)
\emph default
 to
\emph on
 f)
\emph default
 illustrate the crossover results for indexes 
\begin_inset Formula $0$
\end_inset

, 
\begin_inset Formula $1$
\end_inset

, 
\begin_inset Formula $3$
\end_inset

, 
\begin_inset Formula $6$
\end_inset

 and 
\begin_inset Formula $7$
\end_inset

.
\end_layout

\begin_layout Paragraph
Multi-point crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Multiple-point crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!Multiple-point crossover
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the
\family typewriter
 MultiPointCrossover
\family default
 class is created with one crossover point, it behaves exactly like the
 single-point crossover.
 The figures in
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:2-point-crossover"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how the multi-point crossover works with two crossover points.
 Figure
\emph on
 a)
\emph default
 shows the two chromosomes chosen for crossover,
\emph on
 b)
\emph default
 shows the crossover result for the crossover points at index 
\begin_inset Formula $0$
\end_inset

 and 
\begin_inset Formula $4$
\end_inset

,
\emph on
 c)
\emph default
 uses crossover points at index 
\begin_inset Formula $3$
\end_inset

 and 
\begin_inset Formula $6$
\end_inset

 and
\emph on
 d
\emph default
) at index 
\begin_inset Formula $0$
\end_inset

 and 
\begin_inset Formula $7$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/2PointCrossover.eps
	width 75text%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:2-point-crossover"

\end_inset

2-point crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
2-point crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!2-point crossover
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:3-point-crossover"

\end_inset

 you can see how the crossover works for an odd number of crossover points.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/3PointCrossover.eps
	width 75text%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:3-point-crossover"

\end_inset

3-point crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
3-point crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!3-point crossover
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Partially-matched crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Partially-matched crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!Partially-matched crossover
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The partially-matched crossover guarantees that all genes are found exactly
 once in each chromosome.
 No gene is duplicated by this crossover strategy.
 The partially-matched crossover (PMX) can be applied usefully in the TSP
 or other permutation problem encodings.
 Permutation encoding is useful for all problems where the fitness only
 depends on the ordering of the genes within the chromosome.
 This is the case in many combinatorial optimization problems.
 Other crossover operators for combinatorial optimization are:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
order crossover
\end_layout

\begin_layout Itemize
cycle crossover
\end_layout

\begin_layout Itemize
edge recombination crossover
\end_layout

\begin_layout Itemize
edge assembly crossover
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The PMX is similar to the two-point crossover.
 A crossing region is chosen by selecting two crossing points (see figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Partially-matched-crossover"
plural "false"
caps "false"
noprefix "false"

\end_inset


\emph on
 a
\emph default
)).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/PMX.eps
	width 42text%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Partially-matched-crossover"

\end_inset

Partially-matched crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Partially-matched crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!Partially-matched crossover
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

After performing the crossover we–normally–got two invalid chromosomes (figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Partially-matched-crossover"
plural "false"
caps "false"
noprefix "false"

\end_inset


\emph on
 b
\emph default
)).
 Chromosome 
\begin_inset Formula $1$
\end_inset

 contains the value 6 twice and misses the value 3.
 On the other side chromosome 
\begin_inset Formula $2$
\end_inset

 contains the value 3 twice and misses the value 6.
 We can observe that this crossover is equivalent to the exchange of the
 values 3
\begin_inset Formula $\rightarrow$
\end_inset

6, 4
\begin_inset Formula $\rightarrow$
\end_inset

5 and 5
\begin_inset Formula $\rightarrow$
\end_inset

4.
 To repair the two chromosomes we have to apply this exchange outside the
 crossing region (figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Partially-matched-crossover"
plural "false"
caps "false"
noprefix "false"

\end_inset


\emph on
 b
\emph default
)).
 At the end figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Partially-matched-crossover"
plural "false"
caps "false"
noprefix "false"

\end_inset


\emph on
 c
\emph default
) shows the repaired chromosome.
\end_layout

\begin_layout Paragraph
Uniform crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!Uniform crossover
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In uniform crossover, the genes at index
\begin_inset Formula $i$
\end_inset

 of two chromosomes are swapped with the swap probability, 
\begin_inset Formula $p_{S}$
\end_inset

.
 Empirical studies show that uniform crossover is a more exploitative approach
 than the traditional exploitative approach that maintains longer schemata.
 This leads to a better search of the design space with maintaining the
 exchange of good information.
\begin_inset CommandInset citation
LatexCommand cite
key "chawdhry1998soft"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/UniformCrossover.eps
	width 35text%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Uniform-crossover"

\end_inset

Uniform crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Uniform crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!Uniform crossover
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Uniform-crossover"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows an example of a uniform crossover with four crossover points.
 A gene is swapped, if a uniformly created random number, 
\begin_inset Formula $r\in\left[0,1\right]$
\end_inset

, is smaller than the swap probability, 
\begin_inset Formula $p_{S}$
\end_inset

.
 The following code snippet shows how these swap indexes are calculated,
 in a functional way.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final RandomGenerator random = RandomRegistry.random();
\end_layout

\begin_layout Plain Layout

final int length = 8;
\end_layout

\begin_layout Plain Layout

final double ps = 0.5;
\end_layout

\begin_layout Plain Layout

final int[] indexes = IntStream.range(0, length)
\end_layout

\begin_layout Plain Layout

    .filter(i -> random.nextDouble() < ps)
\end_layout

\begin_layout Plain Layout

    .toArray();
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Combine alterer
\begin_inset CommandInset label
LatexCommand label
name "par:Combine-alterer"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Combine alterer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This alterer changes two genes by combining them.
 The combine function can be defined when the alterer is created.
 How this is done, is shown in the code snippet below.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final var alterer = new CombineAlterer<DoubleGene, Double>(
\end_layout

\begin_layout Plain Layout

	(g1, g2) -> g1.newInstance(g1.doubleValue()/g2.doubleValue())
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Mean alterer
\begin_inset CommandInset label
LatexCommand label
name "par:Mean-alterer"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Mean alterer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Mean alterer works on genes which implement the
\family typewriter
 Mean
\family default
 interface.
 All numeric genes implement this interface by calculating the arithmetic
 mean of two genes.
 This alterer is a specialization of the
\family typewriter
 Com\SpecialChar softhyphen
bine\SpecialChar softhyphen
Alter\SpecialChar softhyphen
er
\family default
.
\end_layout

\begin_layout Paragraph
Line crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!Line crossover
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "par:Line-crossover"

\end_inset


\end_layout

\begin_layout Standard
The line crossover
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The line crossover, also known as line recombination, was originally described
 by Heinz Mühlenbein and Dirk Schlierkamp-Voosen.
\begin_inset CommandInset citation
LatexCommand cite
key "Muhlenbein:1993:PMB:1326623.1326626"
literal "true"

\end_inset


\end_layout

\end_inset

 takes two numeric chromosomes and treats it as a real number vector.
 Each of these vectors can also be seen as a point in 
\begin_inset Formula $\mathbb{R}^{n}$
\end_inset

.
 If we draw a line through these two points (chromosome), we have the possible
 values of the new chromosomes, which all lie on this line.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/LineCrossoverHyperCube.eps
	width 40text%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Line-crossover-hypercube"

\end_inset

Line crossover hypercube
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Line-crossover-hypercube"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how the two chromosomes form the two 3-dimensional vectors (black
 circles).
 The dashed line, connecting the two points, form the possible solutions
 created by the line crossover.
 An additional variable, 
\begin_inset Formula $p$
\end_inset

, determines how far out along the line the created children will be.
 If 
\begin_inset Formula $p=0$
\end_inset

 then the children will be located along the line within the hypercube.
 If 
\begin_inset Formula $p>0$
\end_inset

, the children may be located on an arbitrary place on the line, even outside
 of the hypercube.This is useful if you want to explore unknown regions,
 and you need a way to generate chromosomes further out than the parents
 are.
\end_layout

\begin_layout Standard
The internal random parameters, which define the location of the new crossover
 point, are generated once for the whole vector (chromosome).
 If the
\family typewriter
 Line\SpecialChar softhyphen
Crossover
\family default
 generates numeric genes which lie outside the allowed minimum and maximum
 value, it simply uses the original gene and rejects the generated, invalid
 one.
\end_layout

\begin_layout Paragraph
Intermediate crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!Intermediate crossover
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "par:Intermediate-crossover"

\end_inset


\end_layout

\begin_layout Standard
The intermediate crossover is quite similar to the line crossover.
 It differs in the way on how the internal random parameters are generated
 and the handling of the invalid—out of range—genes.
 The
\emph on
 internal
\emph default
 random parameters of the
\family typewriter
 Intermediate\SpecialChar softhyphen
Crossover
\family default
 class are generated for
\emph on
 each
\emph default
 gene of the chromosome, instead once for all genes.
 If the newly generated gene is not within the allowed range, a new one
 is created.
 This is repeated, until a valid gene is built.
\end_layout

\begin_layout Standard
The crossover parameter, 
\begin_inset Formula $p$
\end_inset

, has the same properties as for the line crossover.
 If the chosen value for 
\begin_inset Formula $p$
\end_inset

 is greater than 
\begin_inset Formula $0$
\end_inset

, it is likely that some genes must be created more than once, because they
 are not in the valid range.
 The probability for gene recreation rises sharply with the value of 
\begin_inset Formula $p$
\end_inset

.
 Setting 
\begin_inset Formula $p$
\end_inset

 to a value greater than one, doesn't make sense in most of the cases.
 A value greater than 
\begin_inset Formula $10$
\end_inset

 should be avoided.
\end_layout

\begin_layout Paragraph
Partial alterer
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Partial alterer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Alterers are working on the whole population, which is effectively a sequence
 of genotypes.
 If your genotype consists of more than one chromosome, the alterer is applied
 to all chromosomes.
 There is no way to bind an alterer to a specific chromosome.
 The
\family typewriter
 Partial\SpecialChar softhyphen
Alterer
\family default
 class overcomes this shortcoming and allows you to define the chromosomes
 the wrapped
\family typewriter
 Alterer
\family default
 is using.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Genotype<DoubleGene> gtf = Genotype.of(
\end_layout

\begin_layout Plain Layout

   DoubleChromosome.of(0, 1),
\end_layout

\begin_layout Plain Layout

   DoubleChromosome.of(1, 2),
\end_layout

\begin_layout Plain Layout

   DoubleChromosome.of(2, 3),
\end_layout

\begin_layout Plain Layout

   DoubleChromosome.of(3, 4)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\begin_layout Plain Layout

final Engine<DoubleGene, Double> engine = Engine.builder(ff, gtf)
\end_layout

\begin_layout Plain Layout

   .alterers(
\end_layout

\begin_layout Plain Layout

      PartialAlterer.of(new Mutator<DoubleGene, Double>(), 0, 3),
\end_layout

\begin_layout Plain Layout

      PartialAlterer.of(new MeanAlterer<DoubleGene, Double>(), 1),
\end_layout

\begin_layout Plain Layout

      new LineCrossover<>())
\end_layout

\begin_layout Plain Layout

   .build();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The example above shows how to use the
\family typewriter
 Partial\SpecialChar softhyphen
Alterer
\family default
.
 The wrapped
\family typewriter
 Mutator
\family default
 will only operate on the chromosome with the index 0 and 3, the wrapped
\family typewriter
 Mean\SpecialChar softhyphen
Alterer
\family default
 will alter on the chromosome with index 1 and the
\family typewriter
 Line\SpecialChar softhyphen
Crossover
\family default
 will work on all chromosomes.
 A potential drawback of the
\family typewriter
 Partial\SpecialChar softhyphen
Alterer
\family default
 is a possible performance penalty.
 This is because the chromosomes must be
\emph on
 sliced
\emph default
 into different population sequences for each
\family typewriter
 Partial\SpecialChar softhyphen
Alterer
\family default
.
 If this is an issue for the overall performance depends on the concrete
 application.
\end_layout

\begin_layout Subsection
Engine classes
\begin_inset CommandInset label
LatexCommand label
name "subsec:Engine-classes"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Engine classes
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The executing classes, which perform the actual evolution, are located in
 the
\family typewriter
 io.jenetics.\SpecialChar softhyphen
engine
\family default
 package.
 The
\emph on
 evolution stream
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Evolution!Stream
\end_layout

\end_inset


\emph default
 (
\family typewriter
Evolution\SpecialChar softhyphen
Stream
\family default
) is the base metaphor for performing an GA.
 On the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 you can define the termination predicate and
\emph on
 collect
\emph default
 the final
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
.
 This decouples the static data structure from the executing evolution part.
 The
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 is also very flexible, when it comes to collecting the final result.
 The
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 class has several predefined collectors, but you are free to create your
 own one, which can be seamlessly plugged into the existing stream.
\end_layout

\begin_layout Subsubsection
Fitness function
\begin_inset CommandInset label
LatexCommand label
name "subsubsec:Fitness-function"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Fitness function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The fitness
\family typewriter
 Function
\family default
 is also an important part when modeling a genetic algorithm.
 It takes a
\family typewriter
 Genotype
\family default
 as argument and returns a fitness value.
 The returned fitness value must implement the
\family typewriter
 Compar\SpecialChar softhyphen
ab\SpecialChar softhyphen
le
\family default
 interface.
 This allows the evolution
\family typewriter
 Engine
\family default
, respectively the selection operators, to select the offspring- and survivor
 population.
 Some selectors have stronger requirements for the fitness value than a
\family typewriter
 Compar\SpecialChar softhyphen
able
\family default
, but these constraints are checked by the Java type system at compile time.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
The fitness
\family typewriter
Function
\family sans
 must be deterministic.
 Whenever it is applied to the same
\family typewriter
 Genotype
\family sans
, it must return the same fitness value.
 Nondeterministic fitness
\family typewriter
 function
\family sans
s can lead to unexpected behavior, since the calculated fitness value is
 cached by the
\family typewriter
 Phenotype
\family sans
.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following example shows the simplest possible fitness
\family typewriter
 Function
\family default
.
 This
\family typewriter
 Function
\family default
 just returns the allele of a 
\begin_inset Formula $1\mathsf{x}1$
\end_inset


\shape italic
 float
\family typewriter
\shape default
 Genotype
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public class Main {
\end_layout

\begin_layout Plain Layout

    static Double identity(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

        return gt.gene().allele();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

        // Create fitness function from method reference.
\end_layout

\begin_layout Plain Layout

        Function<Genotype<DoubleGene>, Double>> ff1 =
\end_layout

\begin_layout Plain Layout

            Main::identity;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // Create fitness function from lambda expression.
\end_layout

\begin_layout Plain Layout

        Function<Genotype<DoubleGene>, Double>> ff2 = gt ->
\end_layout

\begin_layout Plain Layout

            gt.gene().allele();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first type parameter of the
\family typewriter
 Function
\family default
 defines the kind of
\family typewriter
 Genotype
\family default
 from which the fitness value is calculated and the second type parameter
 determines the return type, which must at least implement the
\family typewriter
 Comparable
\family default
 interface.
\end_layout

\begin_layout Subsubsection
Engine
\begin_inset CommandInset label
LatexCommand label
name "subsubsec:Engine"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Engine
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Evolution!Engine
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The evolution
\family typewriter
 Engine
\family default
 controls how the evolution steps are executed.
 Once the
\family typewriter
 Engine
\family default
 is created, via its
\family typewriter
 Builder
\family default
 class, it can't be changed.
 It doesn't contain any mutable global state and can therefore be safely
 used/called from different threads.
 This allows to create more than one
\family typewriter
 Evolution\SpecialChar softhyphen
Streams
\family default
 from the same
\family typewriter
 Engine
\family default
 and execute them independently.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public final class Engine<
\end_layout

\begin_layout Plain Layout

    G extends Gene<?, G>,
\end_layout

\begin_layout Plain Layout

    C extends Comparable<? super C>
\end_layout

\begin_layout Plain Layout

>
\end_layout

\begin_layout Plain Layout

    implements Evolution<G, C>,
\end_layout

\begin_layout Plain Layout

        EvolutionStreamable<G, C>
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    // The evolution function, performs one evolution step.
\end_layout

\begin_layout Plain Layout

    public EvolutionResult<G,C> evolve(EvolutionStart<G, C> start);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Evolution stream for "normal" evolution execution.
\end_layout

\begin_layout Plain Layout

    public EvolutionStream<G,C> stream();
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
Engine
\family default
 class
\begin_inset CommandInset label
LatexCommand label
name "lis:Engine-class"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Engine-class"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the main methods of the
\family typewriter
 Engine
\family default
 class.
 The
\family typewriter
 Engine
\family default
 is used for performing the actual evolution of a given population.
 One evolution step is executed by calling the
\family typewriter
 Engine.\SpecialChar softhyphen
evolve
\family default
 method, which returns an
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 object.
 This object contains the evolved population plus additional information
 like the killed and as invalid marked individuals.
 With the
\family typewriter
 stream()
\family default
method you create a new
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
, which is used for controlling the evolution process.
 For more information about the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 see section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsubsec:EvolutionStream"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
As already shown in previous examples, the
\family typewriter
 Engine
\family default
 can only be created via its
\family typewriter
 Builder
\family default
 class.
 Only the fitness
\family typewriter
 Function
\family default
 and the
\family typewriter
 Chromosome
\family default
s, which represents the problem encoding, must be specified for creating
 an
\family typewriter
 Engine
\family default
 instance.
 For the rest of the parameters, default values have been specified.
 This are the
\family typewriter
 Engine
\family default
 parameters which can configured:
\end_layout

\begin_layout Description

\family typewriter
alterers
\family default
 A list of
\family typewriter
 Alterer
\family default
s which are applied to the offspring population, in the defined order.
 The default value of this property is set to
\family typewriter
 Single\SpecialChar softhyphen
Point\SpecialChar softhyphen
Crossover<>(0.2)
\family default
 followed by
\family typewriter
 Mutator<>(0.15)
\family default
.
\end_layout

\begin_layout Description

\family typewriter
clock
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
Clock
\end_layout

\end_inset


\family default
 The
\family typewriter
 java\SpecialChar softhyphen
.time\SpecialChar softhyphen
.Instant\SpecialChar softhyphen
Source
\family default
 used for calculating the execution durations.
 A
\family typewriter
 Instant\SpecialChar softhyphen
Source
\family default
 with nanosecond precision (
\family typewriter
System\SpecialChar softhyphen
.nanoTime()
\family default
) is used as default.
\end_layout

\begin_layout Description

\family typewriter
constraint
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Constraint
\end_layout

\end_inset


\family default
 This property lets you
\emph on
 override
\emph default
 the default implementation of the
\family typewriter
 Pheno\SpecialChar softhyphen
type\SpecialChar softhyphen
::isValid
\family default
 method, which is useful if the
\family typewriter
 Phenotype
\family default
 validity not only depends on valid property of the elements it consists
 of.
 A description of the
\family typewriter
 Const\SpecialChar softhyphen
raint
\family default
 interface is given in section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Constraint"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
executor
\family default
 With this property it is possible to change the
\family typewriter
 java\SpecialChar softhyphen
.util\SpecialChar softhyphen
.concur\SpecialChar softhyphen
rent\SpecialChar softhyphen
.Executor
\family default
 engine used for evaluating the evolution steps.
 This property can be used to define an application wide
\family typewriter
 Executor
\family default
 or for controlling the number of execution threads.
 The default value is set to
\family typewriter
 Fork\SpecialChar softhyphen
Join\SpecialChar softhyphen
Pool\SpecialChar softhyphen
.common\SpecialChar softhyphen
Pool()
\family default
.
\end_layout

\begin_layout Description

\family typewriter
fitnessFunction
\family default
 This property defines the fitness
\family typewriter
 Function
\family default
 used by the evolution
\family typewriter
 Engine
\family default
.
 (See section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsubsec:Fitness-function"
plural "false"
caps "false"
noprefix "false"

\end_inset

.)
\end_layout

\begin_layout Description

\family typewriter
genotypeFactory
\family default
 Defines the
\family typewriter
 Genotype Factory
\family default
 used for creating new individuals.
 Since the
\family typewriter
 Genotype
\family default
 is its own
\family typewriter
 Factory
\family default
, it is sufficient to create a
\family typewriter
 Genotype
\family default
, which serves as a template.
\end_layout

\begin_layout Description

\family typewriter
interceptor
\family default
 The interceptor lets you define functions, which are able to change the
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 before and after an evolution step.
 An
\family typewriter
 EvolutionInterceptor
\family default
 can be seen as a crosscutting aspect of the evolution process.
 One implementation of the EvolutionInterceptor is the
\family typewriter
 Fitness\SpecialChar softhyphen
Nullifier
\family default
, which allows you to enforce the reevaluation of the fitness values of
 all individuals.
 This might be handy, if the fitness function is not time invariant and
 can change during the evolution process.
\end_layout

\begin_layout Description

\family typewriter
maximalPhenotypeAge
\family default
 Set the maximal allowed age of an individual (
\family typewriter
Phenotype
\family default
).
 This prevents super individuals to live forever.
 The default value is set to 70.
\end_layout

\begin_layout Description

\family typewriter
offspringFraction
\family default
 Through this property it is possible to define the fraction of offspring
 (and survivors) for evaluating the next generation.
 The fraction value must within the interval 
\begin_inset Formula $[0,1]$
\end_inset

.
 The default value is set to 
\begin_inset Formula $0.6$
\end_inset

.
 Additionally to this property, it is also possible to set the
\family typewriter
 survivors\SpecialChar softhyphen
Frac\SpecialChar softhyphen
tion
\family default
,
\family typewriter
 survivors\SpecialChar softhyphen
Size
\family default
 or
\family typewriter
 offspringS\SpecialChar softhyphen
ize
\family default
.
 All these additional properties effectively set the
\family typewriter
 offspring\SpecialChar softhyphen
Frac\SpecialChar softhyphen
tion
\family default
.
\end_layout

\begin_layout Description

\family typewriter
offspringSelector
\family default
 This property defines the
\family typewriter
 Selector
\family default
 used for selecting the offspring population.
 The default values are set to
\family typewriter
 Tournament\SpecialChar softhyphen
Select\SpecialChar softhyphen
or<>(3)
\family default
.
\end_layout

\begin_layout Description

\family typewriter
optimize
\family default
 With this property it is possible to define whether the fitness
\family typewriter
 Function
\family default
 should be maximized or minimized.
 By default, the fitness
\family typewriter
 Function
\family default
 is maximized.
\end_layout

\begin_layout Description

\family typewriter
populationSize
\family default
 Defines the number of individuals of a population.
 The evolution
\family typewriter
 Engine
\family default
 keeps the number of individuals constant.
 That means, the population of the
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 always contains the number of entries defined by this property.
 The default value is set to 
\begin_inset Formula $50$
\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
selector
\family default
 This method allows to set the
\family typewriter
 offspringSelector
\family default
 and
\family typewriter
 survivors\SpecialChar softhyphen
Selec\SpecialChar softhyphen
tor
\family default
 in one step with the same selector.
\end_layout

\begin_layout Description

\family typewriter
survivorsSelector
\family default
 This property defines the
\family typewriter
 Selector
\family default
 used for selecting the survivors population.
 The default values are set to
\family typewriter
 Tournament\SpecialChar softhyphen
Selec\SpecialChar softhyphen
tor<>(3)
\family default
.
\end_layout

\begin_layout Standard
The
\family typewriter
 EvolutionStream
\family default
s, created by the
\family typewriter
 Engine
\family default
 class, are unlimited.
 Such streams must be limited by calling the available
\family typewriter
 Evolution\SpecialChar softhyphen
Stream\SpecialChar softhyphen
::limit
\family default
 methods.
 Alternatively, the
\family typewriter
 Engine
\family default
 instance itself can be limited with the
\family typewriter
 Engine\SpecialChar softhyphen
::limit
\family default
 methods.
 This limited
\family typewriter
 Engine
\family default
s no longer creates infinite
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
s, they are truncated by the limit predicate defined by the
\family typewriter
 Engine
\family default
.
 This feature is needed for concatenating evolution
\family typewriter
 Engine
\family default
s (see section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:ConcatEngine"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final EvolutionStreamable<DoubleGene, Double> engine =
\end_layout

\begin_layout Plain Layout

    Engine.builder(problem)
\end_layout

\begin_layout Plain Layout

        .minimizing()
\end_layout

\begin_layout Plain Layout

        .build()
\end_layout

\begin_layout Plain Layout

        .limit(() -> Limits.bySteadyFitness(10));
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As shown in the example code above, one important difference between the
\family typewriter
 Engine\SpecialChar softhyphen
.limit
\family default
 and the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream\SpecialChar softhyphen
::limit
\family default
 method is, that the limit me\SpecialChar softhyphen
thod of the
\family typewriter
 Engine
\family default
 takes a limiting
\family typewriter
 Predicate Supplier
\family default
 instead of the
\family typewriter
 Predicate
\family default
 itself.
 The reason for this is that some
\family typewriter
 Predicate
\family default
s have to maintain internal state to work properly.
 This means, every time the
\family typewriter
 Engine
\family default
 creates a new stream, it must also create a new limiting
\family typewriter
 Predicate
\family default
.
 The
\family typewriter
 Engine\SpecialChar softhyphen
::limit
\family default
 function will return an
\family typewriter
 Evo\SpecialChar softhyphen
lution\SpecialChar softhyphen
Stream\SpecialChar softhyphen
able
\family default
 instead of an
\family typewriter
 Engine
\family default
.
 This interface lets you create
\family typewriter
 Evo\SpecialChar softhyphen
lution\SpecialChar softhyphen
Stream
\family default
s, which is what you usually want to do with the
\family typewriter
 Engine
\family default
.
\end_layout

\begin_layout Subsubsection
Evolution
\begin_inset CommandInset label
LatexCommand label
name "subsec:Evolution"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Evolution
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This functional interface represents the
\emph on
 evolution
\emph default
 function, which is implemented by the
\family typewriter
 Engine
\family default
 class.
 The main purpose of the
\family typewriter
 Evolution
\family default
 interface is to decouple the evolution function/strategy from the actual
 evolution process, represented by the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
.
 Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Evolution-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the definition of the
\family typewriter
 Evolution
\family default
\emph on
 functional
\emph default
 interface.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

@FunctionalInterface
\end_layout

\begin_layout Plain Layout

public interface Evolution<
\end_layout

\begin_layout Plain Layout

    G extends Gene<?, G>,
\end_layout

\begin_layout Plain Layout

    C extends Comparable<? super C>
\end_layout

\begin_layout Plain Layout

> {
\end_layout

\begin_layout Plain Layout

    EvolutionResult<G, C> evolve(EvolutionStart<G, C> start);
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
Evolution
\family default
 interface
\begin_inset CommandInset label
LatexCommand label
name "lis:Evolution-interface"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
EvolutionStream
\begin_inset CommandInset label
LatexCommand label
name "subsubsec:EvolutionStream"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EvolutionStream
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Evolution!Stream
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 controls the execution of the evolution process and can be seen as a kind
 of execution handle.
 This handle can be used to define the termination criteria and to collect
 the final evolution result.
 Since the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 extends the Java
\family typewriter
 Stream
\family default
 interface, it integrates smoothly with the rest of the Java Stream API.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
It is recommended to make yourself familiar with the Java Stream API.
 A good introduction can be found here:
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface EvolutionStream<
\end_layout

\begin_layout Plain Layout

    G extends Gene<?, G>,
\end_layout

\begin_layout Plain Layout

    C extends Comparable<? super C>
\end_layout

\begin_layout Plain Layout

>
\end_layout

\begin_layout Plain Layout

    extends Stream<EvolutionResult<G, C>>
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    EvolutionStream<G, C>
\end_layout

\begin_layout Plain Layout

    limit(Predicate<? super EvolutionResult<G, C>> proceed);
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
EvolutionStream
\family default
 interface
\begin_inset CommandInset label
LatexCommand label
name "lis:EvolutionStream-class"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:EvolutionStream-class"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the whole
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 interface.
 As it can be seen, it only adds one additional method.
 But this additional
\family typewriter
 limit
\family default
 method allows you to truncate the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 based on a
\family typewriter
 Predicate
\family default
 which takes an
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
.
 Once the
\family typewriter
 Predicate
\family default
 returns
\family typewriter
 false
\family default
, the evolution process is stopped.
 Since the
\family typewriter
 limit
\family default
 method returns an
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
, it is possible to define more than one
\family typewriter
 Predicate
\family default
, which both must be fulfilled to continue the evolution process.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DobuleGene, Double> engine = ...
\end_layout

\begin_layout Plain Layout

final EvolutionStream<DoubleGene, Double> stream = engine.stream()
\end_layout

\begin_layout Plain Layout

    .limit(predicate1)
\end_layout

\begin_layout Plain Layout

    .limit(predicate2)
\end_layout

\begin_layout Plain Layout

    .limit(100);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
, created in the example above, will be truncated if one of the two predicates
 is
\family typewriter
 false
\family default
 or if the maximal allowed generations, of 100, is reached.
 An
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 is usually created via the
\family typewriter
 Engine\SpecialChar softhyphen
::stream
\family default
 method.
 The immutable and stateless nature of the evolution
\family typewriter
 Engine
\family default
 allows you to create more than one
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 with the same
\family typewriter
 Engine
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
The generations of the
\family typewriter
 EvolutionStream
\family sans
 are evolved serially.
 Calls of the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family sans
 methods (e.
\begin_inset space ~
\end_inset

g.

\family typewriter
 limit
\family sans
,
\family typewriter
 peek
\family sans
, ...) are executed in the thread context of the created
\family typewriter
 Stream
\family sans
.
 In a
\emph on
 typical
\emph default
 setup, no additional synchronization and/or locking is needed.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In cases where you appreciate the usage of the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 but need a different
\family typewriter
 Engine
\family default
 implementation, you can use the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream\SpecialChar softhyphen
::of
\family default
 factory method for creating an new
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static <G extends Gene<?, G>, C extends Comparable<? super C>>
\end_layout

\begin_layout Plain Layout

EvolutionStream<G, C> of(
\end_layout

\begin_layout Plain Layout

    Supplier<EvolutionStart<G, C>> start,
\end_layout

\begin_layout Plain Layout

    Function<? super EvolutionStart<G, C>, EvolutionResult<G, C>> f
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

This factory method takes a start value, of type
\family typewriter
 Evolution\SpecialChar softhyphen
Start
\family default
, and an evolution
\family typewriter
 Function
\family default
.
 The evolution
\family typewriter
 Function
\family default
 takes the start value and returns an
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 object.
 To make the runtime behavior more predictable, the start value is fetched/creat
ed lazily at the evolution start time.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Supplier<EvolutionStart<DoubleGene, Double>> start = ...
\end_layout

\begin_layout Plain Layout

final EvolutionStream<DoubleGene, Double> stream =
\end_layout

\begin_layout Plain Layout

    EvolutionStream.of(start, new MySpecialEngine());
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
EvolutionResult
\begin_inset CommandInset label
LatexCommand label
name "subsubsec:EvolutionResult"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EvolutionResult
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 contains the result data of an evolution step and is the element type of
 the
\family typewriter
 Evo\SpecialChar softhyphen
lution\SpecialChar softhyphen
Stream
\family default
, as described in section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsubsec:EvolutionStream"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public final class EvolutionResult<
\end_layout

\begin_layout Plain Layout

    G extends Gene<?, G>,
\end_layout

\begin_layout Plain Layout

    C extends Comparable<? super C>
\end_layout

\begin_layout Plain Layout

>
\end_layout

\begin_layout Plain Layout

    implements Comparable<EvolutionResult<G, C>>
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    public ISeq<Phenotype<G, C>> population();
\end_layout

\begin_layout Plain Layout

    public long generation();
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
EvolutionResult
\family default
 class
\begin_inset CommandInset label
LatexCommand label
name "lis:EvolutionResult-class"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "subsubsec:EvolutionResult"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the two most important properties, the
\family typewriter
 population
\family default
 and the
\family typewriter
 generation
\family default
 the result belongs to.
 These are also the two properties needed for the next evolution step.
 The
\family typewriter
 generation
\family default
 is, of course, incremented by one.
 To make collecting the
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 object easier, it also implements the
\family typewriter
 Comparable
\family default
 interface.
 Two
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
s are compared by its best
\family typewriter
 Phenotype
\family default
, depending on the optimization direction.
 The
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 classes has three predefined factory methods, which will return
\family typewriter
 Collector
\family default
s usable for the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
:
\end_layout

\begin_layout Description

\family typewriter
toBestEvolutionResult()
\family default
 Collects the best
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 of a
\family typewriter
 Evolu\SpecialChar softhyphen
tion\SpecialChar softhyphen
Stream
\family default
 according to the defined optimization strategy (minimization or maximization).
\end_layout

\begin_layout Description

\family typewriter
toBestPhenotype()
\family default
 This collector can be used if you are only interested in the best
\family typewriter
 Phenotype
\family default
.
\end_layout

\begin_layout Description

\family typewriter
toBestGenotype()
\family default
 Use this collector if you only need the best
\family typewriter
 Genotype
\family default
 of the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
.
\end_layout

\begin_layout Standard
The following code snippets show how to use the different
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 collectors.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

// Collecting the best EvolutionResult of the EvolutionStream.
\end_layout

\begin_layout Plain Layout

final EvolutionResult<DoubleGene, Double> result = stream
\end_layout

\begin_layout Plain Layout

    .collect(EvolutionResult.toBestEvolutionResult());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Collecting the best Phenotype of the EvolutionStream.
\end_layout

\begin_layout Plain Layout

final Phenotype<DoubleGene, Double> result = stream
\end_layout

\begin_layout Plain Layout

    .collect(EvolutionResult.toBestPhenotype());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Collecting the best Genotype of the EvolutionStream.
\end_layout

\begin_layout Plain Layout

final Genotype<DoubleGene> result = stream
\end_layout

\begin_layout Plain Layout

    .collect(EvolutionResult.toBestGenotype());
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sometimes it is useful not only to collect one
\emph on
 final
\emph default
 result, but to collect the
\emph on
n
\emph default
 best evolution results instead.
 This can be achieved by combining the
\family typewriter
 Min\SpecialChar softhyphen
Max\SpecialChar softhyphen
::to\SpecialChar softhyphen
Strictly\SpecialChar softhyphen
In\SpecialChar softhyphen
crea\SpecialChar softhyphen
sing
\family default
 and
\family typewriter
 ISeq\SpecialChar softhyphen
::to\SpecialChar softhyphen
ISeq(int)
\family default
 method.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final ISeq<EvolutionResult<DoubleGene, Double>> results = engine
\end_layout

\begin_layout Plain Layout

    .stream()
\end_layout

\begin_layout Plain Layout

    .limit(1000)
\end_layout

\begin_layout Plain Layout

    .flatMap(MinMax.toStrictlyIncreasing())
\end_layout

\begin_layout Plain Layout

    .collect(ISeq.toISeq(10));
\end_layout

\end_inset

The code snippet above collects the best 
\begin_inset Formula $10$
\end_inset

 evolution results into the results sequence in increasing order.
\end_layout

\begin_layout Subsubsection
EvolutionStatistics
\begin_inset CommandInset label
LatexCommand label
name "subsubsec:EvolutionStatistics"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EvolutionStatistics
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Evolution\SpecialChar softhyphen
Statistics
\family default
 class allows you to gather additional statistical information from the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
.
 This is especially useful during the development phase of an application,
 when you have to find the right parametrization of the evolution
\family typewriter
 Engine
\family default
.
 Besides other information, the
\family typewriter
 Evolution\SpecialChar softhyphen
Statistics
\family default
 contains (statistical) information about the fitness, invalid and killed
\family typewriter
 Phenotypes
\family default
 and runtime information of the different evolution steps.
 Since the
\family typewriter
 Evolution\SpecialChar softhyphen
Statistics
\family default
 class implements the
\family typewriter
 Consumer<\SpecialChar softhyphen
Evolution\SpecialChar softhyphen
Result<?, C>>
\family default
 interface, it can be easily plugged into the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
, adding it with the
\family typewriter
 peek
\family default
 method of the stream.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DoubleGene, Double> engine = ...
\end_layout

\begin_layout Plain Layout

final EvolutionStatistics<?, Double> statistics =
\end_layout

\begin_layout Plain Layout

    EvolutionStatistics.ofNumber();
\end_layout

\begin_layout Plain Layout

engine.stream()
\end_layout

\begin_layout Plain Layout

    .limit(100)
\end_layout

\begin_layout Plain Layout

    .peek(statistics)
\end_layout

\begin_layout Plain Layout

    .collect(toBestGenotype());
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
EvolutionStatistics
\family default
 usage
\begin_inset CommandInset label
LatexCommand label
name "lis:EvolutionStatistics-usage"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:EvolutionStatistics-usage"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how to add the
\family typewriter
 Evolution\SpecialChar softhyphen
Statistics
\family default
 to the
\family typewriter
 Evo\SpecialChar softhyphen
lu\SpecialChar softhyphen
tion\SpecialChar softhyphen
Stream
\family default
.
 Once the algorithm tuning is finished, it can be removed in the production
 environment.
\end_layout

\begin_layout Standard
There are two different specializations of the
\family typewriter
 Evolution\SpecialChar softhyphen
Statistics
\family default
 object available.
 The first is the general one, which will be working for every kind of
\family typewriter
 Gene
\family default
s and fitness types.
 It can be created via the
\family typewriter
 Evolution\SpecialChar softhyphen
Statistics\SpecialChar softhyphen
::ofComparable
\family default
 method.
 The second one collects additional statistical data for numerical fitness
 values.
 This can be created with the
\family typewriter
 Evolution\SpecialChar softhyphen
Statistics\SpecialChar softhyphen
::ofNumber
\family default
 method.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
scriptsize
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/NumberEvolutionStatisitcs.out}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset

A typical output of an number
\family typewriter
 Evolution\SpecialChar softhyphen
Statistics
\family default
 object will look like the example above.
\end_layout

\begin_layout Standard
The
\family typewriter
 Evolution\SpecialChar softhyphen
Statistics
\family default
 object is a simple way for inspecting the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 after it is finished.
 It doesn't give you a 
\begin_inset Formula $live$
\end_inset

 view of the current evolution process, which can be necessary for long
 running streams.
 In such cases you have to maintain/update the statistics yourself.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public class TSM {
\end_layout

\begin_layout Plain Layout

    // The locations to visit.
\end_layout

\begin_layout Plain Layout

    static final ISeq<Point> POINTS = ISeq.of(...);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // The permutation codec.
\end_layout

\begin_layout Plain Layout

    static final Codec<ISeq<Point>, EnumGene<Point>>
\end_layout

\begin_layout Plain Layout

    CODEC = Codecs.ofPermutation(POINTS);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // The fitness function (in the problem domain).
\end_layout

\begin_layout Plain Layout

    static double dist(final ISeq<Point> p) {...}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // The evolution engine.
\end_layout

\begin_layout Plain Layout

    static final Engine<EnumGene<Point>, Double> ENGINE = Engine
\end_layout

\begin_layout Plain Layout

        .builder(TSM::dist, CODEC)
\end_layout

\begin_layout Plain Layout

        .optimize(Optimize.MINIMUM)
\end_layout

\begin_layout Plain Layout

        .build();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Best phenotype found so far.
\end_layout

\begin_layout Plain Layout

    static Phenotype<EnumGene<Point>, Double> best = null;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // You will be informed on new results.
 This allows to
\end_layout

\begin_layout Plain Layout

    // react on new best phenotypes, e.g.
 log it.
\end_layout

\begin_layout Plain Layout

    private static void update(
\end_layout

\begin_layout Plain Layout

        final EvolutionResult<EnumGene<Point>, Double> result
\end_layout

\begin_layout Plain Layout

    ) {
\end_layout

\begin_layout Plain Layout

        if (best == null ||
\end_layout

\begin_layout Plain Layout

            best.compareTo(result.bestPhenotype()) < 0)
\end_layout

\begin_layout Plain Layout

        {
\end_layout

\begin_layout Plain Layout

            best = result.bestPhenotype();
\end_layout

\begin_layout Plain Layout

            System.out.print(result.generation() + ": ");
\end_layout

\begin_layout Plain Layout

            System.out.println("Found best phenotype: " + best);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Find the solution.
\end_layout

\begin_layout Plain Layout

    public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

        final ISeq<Point> result = CODEC.decode(
\end_layout

\begin_layout Plain Layout

            ENGINE.stream()
\end_layout

\begin_layout Plain Layout

                .peek(TSM::update)
\end_layout

\begin_layout Plain Layout

                .limit(10)
\end_layout

\begin_layout Plain Layout

                .collect(EvolutionResult.toBestGenotype())
\end_layout

\begin_layout Plain Layout

        );
\end_layout

\begin_layout Plain Layout

        System.out.println(result);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
Live evolution statistics
\begin_inset CommandInset label
LatexCommand label
name "lis:Live-evolution-statistics"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Live-evolution-statistics"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how to implement a manual statistics gathering.
 The update method is called whenever a new
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 has been calculated.
 If a new best
\family typewriter
 Pheno\SpecialChar softhyphen
type
\family default
 is available, it is stored and logged.
 With the
\family typewriter
 TSM\SpecialChar softhyphen
::update
\family default
 method, which is called on every finished generation, you created a
\emph on
 live
\emph default
 view on the evolution progress.
\end_layout

\begin_layout Subsubsection
Evaluator
\begin_inset CommandInset label
LatexCommand label
name "subsec:Evaluator"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Engine!Evaluator
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Evaluator
\family default
 is responsible for evaluating the fitness values for a given population.
 It is the most general way for doing the fitness evaluation.
 Usually, it is not necessary to implement an own evaluation strategy.
 If you are creating an evolution
\family typewriter
 Engine
\family default
 with a fitness function, this is done for you automatically.
 Each fitness value is then evaluated concurrently, but independently from
 each other.
 Using the
\family typewriter
 Evaluator
\family default
 interface is helpful if you have performance problems when the fitness
 function is evaluated serially—or in small concurrent batches, as it is
 implemented by the default strategy.
 In this case, the
\family typewriter
 Evaluator
\family default
 interface can be used to calculate the fitness function for a population
 in one batch.
 Another use case for the
\family typewriter
 Evaluator
\family default
 interface is, when the fitness value also depends on the current composition
 of the population.
 E.
\begin_inset space ~
\end_inset

g.
 it is possible to normalize the population's fitness values.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

@FunctionalInterface
\end_layout

\begin_layout Plain Layout

public interface Evaluator<
\end_layout

\begin_layout Plain Layout

    G extends Gene<?, G>,
\end_layout

\begin_layout Plain Layout

    C extends Comparable<? super C>
\end_layout

\begin_layout Plain Layout

> {
\end_layout

\begin_layout Plain Layout

    ISeq<Phenotype<G, C>> eval(Seq<Phenotype<G, C>> population);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
Evaluator
\family default
 interface
\begin_inset CommandInset label
LatexCommand label
name "lis:Evaluator-interface"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The implementer is free to evaluate the whole population, or only evaluate
 the not yet evaluated
\family typewriter
 Pheno\SpecialChar softhyphen
type
\family default
s.
 There are only two requirements which must be fulfilled:
\end_layout

\begin_layout Enumerate
the size of the returned, evaluated, phenotype sequence must be exactly
 the size of the input phenotype sequence and
\end_layout

\begin_layout Enumerate
all phenotypes of the returned population must have a fitness value assigned.
 That means, the expression
\family typewriter
 pop.forAll(\SpecialChar softhyphen
Pheno\SpecialChar softhyphen
type\SpecialChar softhyphen
::isEvaluated
\family default
\SpecialChar softhyphen
) must be true.
\end_layout

\begin_layout Standard
The code snippet below creates an evaluator which evaluates the fitness
 values of the whole population serially in the main thread.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Function<? super Genotype<G>, ? extends C> fitness = ...;
\end_layout

\begin_layout Plain Layout

final Evaluator<G, C> evaluator = population -> population
\end_layout

\begin_layout Plain Layout

    .map(pt -> pt.eval(fitness))
\end_layout

\begin_layout Plain Layout

    .asISeq();
\end_layout

\end_inset

To use the fitness
\family typewriter
 Evaluator
\family default
, you have to use the
\family typewriter
 Engine.Builder
\family default
 constructor directly, instead of one of the factory methods.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<G, C> engine = new Engine.Builder(evaluator, gtf)
\end_layout

\begin_layout Plain Layout

    .build();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Evaluators
\family default
 class contains factory methods, which allows you to create
\family typewriter
 Evaluator
\family default
 instances from fitness functions which don't return the fitness value directly,
 but return
\family typewriter
 Future<T>
\family default
 or
\family typewriter
 CompletableFuture<T>
\family default
 instead.
 With these methods, there is no need for waiting for the fitness value,
 if the fitness function is already asynchronous.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static Future<Double> fitness(final double x) {
\end_layout

\begin_layout Plain Layout

    return ...;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

    final Codec<Double, DoubleGene> codec = ...;
\end_layout

\begin_layout Plain Layout

    final Evaluator<DoubleGene, Double> evaluator = Evaluators
\end_layout

\begin_layout Plain Layout

        .async(Main::fitness, codec);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    final Engine<DoubleGene, Double> engine =
\end_layout

\begin_layout Plain Layout

        new Engine.Builder<>(evaluator, codec.encoding())
\end_layout

\begin_layout Plain Layout

            .build();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Nuts and bolts
\begin_inset CommandInset label
LatexCommand label
name "sec:Nuts-and-bolts"

\end_inset


\end_layout

\begin_layout Subsection
Concurrency
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Concurrency
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Concurrency"

\end_inset


\end_layout

\begin_layout Standard
The
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library parallelizes independent tasks whenever possible.
 Especially the evaluation of the fitness function is done concurrently.
 That means that the fitness function must be thread-safe and deterministic.
 The easiest way for achieving thread safety is to make the fitness function
 immutable and reentrant.
 Since the number of individuals of one population, which determines the
 number of fitness functions to be evaluated, is usually much higher then
 the number of available CPU cores, the fitness evaluation is done in batches.
 This reduces the evaluation overhead, for
\emph on
 lightweight
\emph default
 fitness functions.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/EvaluationBatch.eps
	width 60text%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evaluation-batch"

\end_inset

Evaluation batch
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Evaluation-batch"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows an example population with 
\begin_inset Formula $12$
\end_inset

 individuals.
 The evaluation of the phenotype's fitness functions are evaluated in batches
 with three elements.
 For this purpose, the individuals of one batch are wrapped into a
\family typewriter
 Runnable
\family default
 object.
 The batch size is automatically adapted to the available number of CPU
 cores.
 It is assumed that the evaluation cost of one fitness function is quite
 small.
 If this assumption doesn't hold, you can configure the the maximal number
 of batch elements with the
\family typewriter
 io\SpecialChar softhyphen
.jenetics\SpecialChar softhyphen
.concurrency\SpecialChar softhyphen
.maxBatchSize
\family default
 system property.
 The usage of this property is described in section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Concurrency-tweaks"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Basic configuration
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Concurrency!configuration
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The used
\family typewriter
 Executor
\family default
 can be defined when building the evolution
\family typewriter
 Engine
\family default
 object.
 How to do this is shown in the code example below.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

import java.util.concurrent.Executor;
\end_layout

\begin_layout Plain Layout

import java.util.concurrent.Executors;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Main {
\end_layout

\begin_layout Plain Layout

	private static Double eval(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

        // calculate and return fitness
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

        // Creating an fixed size ExecutorService
\end_layout

\begin_layout Plain Layout

        final ExecutorService executor = Executors
\end_layout

\begin_layout Plain Layout

            .newFixedThreadPool(10)
\end_layout

\begin_layout Plain Layout

        final Factory<Genotype<DoubleGene>> gtf = ...
\end_layout

\begin_layout Plain Layout

        final Engine<DoubleGene, Double> engine = Engine
\end_layout

\begin_layout Plain Layout

            .builder(Main::eval, gtf)
\end_layout

\begin_layout Plain Layout

             // Using 10 threads for evolving.
\end_layout

\begin_layout Plain Layout

            .executor(executor)
\end_layout

\begin_layout Plain Layout

            .build()
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If no
\family typewriter
 Executor
\family default
 is given,
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 uses a common
\family typewriter
 ForkJoinPool
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\family typewriter
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/F
orkJoinPool.html
\end_layout

\end_inset


\end_layout

\end_inset


\family default
 for concurrency.
 Sometimes it might be useful to run the evaluation
\family typewriter
 Engine
\family default
 single-threaded, or even execute all operations in the main thread.
 This can be easily achieved by setting the appropriate
\family typewriter
 Executor
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DoubleGene, Double> engine = Engine.builder(...)
\end_layout

\begin_layout Plain Layout

    // Doing the Engine operations in the main thread
\end_layout

\begin_layout Plain Layout

    .executor((Executor)Runnable::run)
\end_layout

\begin_layout Plain Layout

    .build()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code snippet above shows how to do the
\family typewriter
 Engine
\family default
 operations in the main thread.
 Whereas the snippet below executes the
\family typewriter
 Engine
\family default
 operations in a single thread, other than the main thread.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DoubleGene, Double> engine = Engine.builder(...)
\end_layout

\begin_layout Plain Layout

    // Doing the Engine operations in a single thread
\end_layout

\begin_layout Plain Layout

    .executor(Executors.newSingleThreadExecutor())
\end_layout

\begin_layout Plain Layout

    .build()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Such a configuration can be useful for performing reproducible (performance)
 tests, without the uncertainty of a concurrent execution environment.
\end_layout

\begin_layout Subsubsection
Concurrency tweaks
\begin_inset CommandInset label
LatexCommand label
name "subsec:Concurrency-tweaks"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Concurrency!tweaks
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 uses different strategies for minimizing the concurrency overhead, depending
 on the configured
\family typewriter
 Exe\SpecialChar softhyphen
cutor
\family default
.
 For the
\family typewriter
\series bold
 Fork\SpecialChar softhyphen
Join\SpecialChar softhyphen
Pool
\family default
\series default
, the fitness evaluation of the population is done by recursively dividing
 it into subpopulations using the abstract
\family typewriter
 Recursive\SpecialChar softhyphen
Action
\family default
 class.
 If a minimal subpopulation size is reached, the fitness values for this
 subpopulation are directly evaluated.
 The default value of this threshold is five and can be controlled via the
\family typewriter
 io\SpecialChar softhyphen
.jenetics\SpecialChar softhyphen
.concurrency\SpecialChar softhyphen
.split\SpecialChar softhyphen
Thre\SpecialChar softhyphen
shold
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Java property!splitThreshold
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Concurrency!splitThreshold
\end_layout

\end_inset

 system property.
 Besides the
\family typewriter
 split\SpecialChar softhyphen
Thre\SpecialChar softhyphen
sh\SpecialChar softhyphen
old
\family default
, the size of the evaluated subpopulation is dynamically determined by the
\family typewriter
 Fork\SpecialChar softhyphen
Join\SpecialChar softhyphen
Task\SpecialChar softhyphen
::get\SpecialChar softhyphen
Sur\SpecialChar softhyphen
plus\SpecialChar softhyphen
Queued\SpecialChar softhyphen
Task\SpecialChar softhyphen
Count
\family default
 method.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Excerpt from the Javadoc:
\emph on
 Returns an estimate of how many more locally queued tasks are held by the
 current worker thread than there are other worker threads that might steal
 them.
 This value may be useful for heuristic decisions about whether to fork
 other tasks.
 In many usages of
\family typewriter
 Fork\SpecialChar softhyphen
Join\SpecialChar softhyphen
Tasks
\family default
, at steady state, each worker should aim to maintain a small constant surplus
 (for example, 3) of tasks, and to process computations locally if this
 threshold is exceeded.
\end_layout

\end_inset

 If this value is greater than three, the fitness values of the current
 subpopulation are also evaluated immediately.
 The default value can be overridden by the
\family typewriter
 io\SpecialChar softhyphen
.jenetics\SpecialChar softhyphen
.concurrency\SpecialChar softhyphen
.max\SpecialChar softhyphen
Sur\SpecialChar softhyphen
plus\SpecialChar softhyphen
Queued\SpecialChar softhyphen
Task\SpecialChar softhyphen
Count
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Java property!maxSurplusQueuedTaskCount
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Concurrency!maxSurplusQueuedTaskCount
\end_layout

\end_inset

 system property.
\end_layout

\begin_layout LyX-Code
$ java -Dio.jenetics.concurrency.splitThreshold=1 
\backslash

\end_layout

\begin_layout LyX-Code
    -Dio.jenetics.concurrency.maxSurplusQueuedTaskCount=2 
\backslash

\end_layout

\begin_layout LyX-Code
    -cp jenetics-@__version__@.jar:app.jar 
\backslash

\end_layout

\begin_layout LyX-Code
    com.foo.bar.MyJeneticsApp
\end_layout

\begin_layout Standard
You may want to tweak this parameters, if you realize a low CPU utilization
 during the fitness value evaluation.
 Long running fitness functions could lead to CPU under utilization while
 evaluating the last subpopulation.
 In this case, only one core is busy, while the other cores are idle, because
 they already finished the fitness evaluation.
 Since the workload has been already distributed, no
\emph on
 work stealing
\emph default
 is possible.
 Reducing the
\family typewriter
 split\SpecialChar softhyphen
Thre\SpecialChar softhyphen
shold
\family default
 can help to have a more equal workload distribution between the available
 CPUs.
 Reducing the
\family typewriter
 max\SpecialChar softhyphen
Sur\SpecialChar softhyphen
plus\SpecialChar softhyphen
Queued\SpecialChar softhyphen
Task\SpecialChar softhyphen
Count
\family default
 property will create a more uniform workload for the fitness function with
 heavily varying computation cost for different genotype values.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
The fitness function shouldn't acquire locks for achieving thread safety.
 It is also recommended to avoid calls to blocking methods.
 If such calls are unavoidable, consider using the
\family typewriter
 Fork\SpecialChar softhyphen
Join\SpecialChar softhyphen
Pool\SpecialChar softhyphen
.managed\SpecialChar softhyphen
Block
\family sans
 method.
 Especially if you are using a
\family typewriter
 Fork\SpecialChar softhyphen
Join\SpecialChar softhyphen
Pool
\family sans
 executor, which is the default.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the Engine is using an
\family typewriter
\series bold
 Executor\SpecialChar softhyphen
Service
\family default
\series default
, a different optimization strategy is used for reducing the concurrency
 overhead.
 The original population is divided into a fixed number
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The number of sub-populations actually depends on the number of available
 CPU cores, which are determined with
\family typewriter
 Run\SpecialChar softhyphen
time\SpecialChar softhyphen
.avail\SpecialChar softhyphen
able\SpecialChar softhyphen
Pro\SpecialChar softhyphen
cessors()
\family default
.
\end_layout

\end_inset

 of subpopulations, and the fitness values of each subpopulation are evaluated
 by one thread.
 For long running fitness functions, it is better to have smaller subpopulations
 for a better CPU utilization.
 With the
\family typewriter
 io\SpecialChar softhyphen
.jenetics\SpecialChar softhyphen
.concurrency\SpecialChar softhyphen
.max\SpecialChar softhyphen
Batch\SpecialChar softhyphen
Size
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Java property!maxBatchSize
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Concurrency!maxBatchSize
\end_layout

\end_inset

 system property, it is possible to reduce the subpopulation size.
 The default value is set to
\family typewriter
 Inte\SpecialChar softhyphen
ger\SpecialChar softhyphen
.MAX_\SpecialChar softhyphen
VALUE
\family default
.
 This means, that only the number of CPU cores influences the
\emph on
 batch
\emph default
 size.
\end_layout

\begin_layout LyX-Code
$ java -Dio.jenetics.concurrency.maxBatchSize=3 
\backslash

\end_layout

\begin_layout LyX-Code
    -cp jenetics-@__version__@.jar:app.jar 
\backslash

\end_layout

\begin_layout LyX-Code
    com.foo.bar.MyJeneticsApp
\end_layout

\begin_layout Standard
Another source of underutilized CPUs are lock contentions.
 It is therefore strongly recommended to avoid locking and blocking calls
 in your fitness function at all.
 If blocking calls are unavoidable, consider using the
\emph on
 managed block
\emph default
 functionality of the
\family typewriter
 Fork\SpecialChar softhyphen
Join\SpecialChar softhyphen
Pool.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A good introduction on how to use managed blocks, and the motivation behind
 it, is given in this talk:
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://www.youtube.com/watch?v=rUDGQQ83ZtI
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Randomness
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Randomness
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Random
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
RandomGenerator
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Randomness"

\end_inset


\end_layout

\begin_layout Standard
In general, GAs heavily depend on pseudo random number generators (PRNG)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PRNG
\end_layout

\end_inset

 for creating new individuals and for the selection and mutation algorithms.

\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 uses the Java
\family typewriter
 Random\SpecialChar softhyphen
Generator
\family default
 interface for generating random numbers.
 To make the random engine pluggable, the
\family typewriter
 Random\SpecialChar softhyphen
Generator
\family default
 object is always fetched from the
\family typewriter
 Random\SpecialChar softhyphen
Registry
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Random!Registry
\end_layout

\end_inset

.
 This makes it possible to change the implementation of the random generator
 without changing the client code.
 The central
\family typewriter
 Random\SpecialChar softhyphen
Registry
\family default
 also allows for easily changing the
\family typewriter
 Random\SpecialChar softhyphen
Generator
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Random!Generator
\end_layout

\end_inset

 even for specific parts of the code.
\end_layout

\begin_layout Standard
The following example shows how to change and restore the
\family typewriter
 Random\SpecialChar softhyphen
Generator
\family default
 object.
 When opening the
\family typewriter
 with
\family default
 scope, changes to the
\family typewriter
 Random\SpecialChar softhyphen
Registry
\family default
 are only visible within this scope.
 Once the
\family typewriter
 with
\family default
 scope is left, the original
\family typewriter
 Random\SpecialChar softhyphen
Generator
\family default
 object is restored.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final var rgf = RandomGeneratorFactory.getDefault();
\end_layout

\begin_layout Plain Layout

final List<Genotype<DoubleGene>> genotypes =
\end_layout

\begin_layout Plain Layout

    RandomRegistry.with(rgf.create(123), r -> {
\end_layout

\begin_layout Plain Layout

        Genotype.of(DoubleChromosome.of(0.0, 100.0, 10))
\end_layout

\begin_layout Plain Layout

            .instances()
\end_layout

\begin_layout Plain Layout

            .limit(100)
\end_layout

\begin_layout Plain Layout

            .toList()
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the previous listing, a random, but reproducible, list of genotypes
 is created.
 This might be useful while testing your application or when you want to
 evaluate the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 several times with the same initial population.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DoubleGene, Double> engine = ...;
\end_layout

\begin_layout Plain Layout

// Create a new evolution stream with the given
\end_layout

\begin_layout Plain Layout

// initial genotypes.
\end_layout

\begin_layout Plain Layout

final Phenotype<DoubleGene, Double> best = engine.stream(genotypes)
\end_layout

\begin_layout Plain Layout

    .limit(10)
\end_layout

\begin_layout Plain Layout

    .collect(EvolutionResult.toBestPhenotype());
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The example above uses the generated genotypes for creating the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
.
 Each created stream uses the same starting population, but will, most likely,
 create a different result.
 This is because the stream evaluation is still nondeterministic.
\end_layout

\begin_layout Standard
By default, 
\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 uses the 
\family typewriter
L64X\SpecialChar softhyphen
256\SpecialChar softhyphen
Mix\SpecialChar softhyphen
Random
\family default
 random generator, which is part of the standard OpenJDK platform.
 If you want to change this default for your whole application, without
 changing your code, you can do this via the 
\family typewriter
io\SpecialChar softhyphen
.jenetics\SpecialChar softhyphen
.util\SpecialChar softhyphen
.default\SpecialChar softhyphen
Random\SpecialChar softhyphen
Generator
\family default
 system property.
 The code example below shows how to replace the default random generator
 with 
\family typewriter
L64X\SpecialChar softhyphen
1024\SpecialChar softhyphen
Mix\SpecialChar softhyphen
Random
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A list of all random generators defined in the OpenJDK platform, can be
 found here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/packa
ge-summary.html
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout LyX-Code
$ java -Dio.jenetics.util.defaultRandomGenerator=
\backslash

\end_layout

\begin_layout LyX-Code
         L64X1024MixRandom 
\backslash

\end_layout

\begin_layout LyX-Code
    -cp jenetics-@__version__@.jar:app.jar 
\backslash

\end_layout

\begin_layout LyX-Code
        com.foo.bar.MyJeneticsApp
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
Setting the PRNG to a
\family typewriter
 Random\SpecialChar softhyphen
Generator
\family sans
 object with a defined seed has the effect, that every evolution
\emph on
 stream
\emph default
 will produce the same result—in a single threaded environment.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The parallel nature of the GA implementation requires the creation of streams
 of random numbers, 
\begin_inset Formula $t_{i,j}$
\end_inset

, which are statistically independent.
 These streams are numbered with 
\begin_inset Formula $j=1,2,3,...,p$
\end_inset

, and 
\begin_inset Formula $p$
\end_inset

 denotes the number of processes.
 We expect statistical independence between the streams as well.
 The used PRNG should enable the GA to
\emph on
 play fair
\emph default
, which means that the outcome of the GA is strictly independent from the
 underlying hardware and the number of parallel processes or threads.
 This is essential for reproducing results in parallel environments where
 the number of parallel tasks may vary from run to run.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
The
\emph on
 Fair Play
\emph default
 property of a PRNG guarantees that the quality of the genetic algorithm
 (evolution stream) does not depend on the degree of parallelization.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the
\family typewriter
 Random\SpecialChar softhyphen
Generator
\family default
 is used in a multi-threaded environment, there must be a way to parallelize
 the sequential PRNG.
 Usually this is done by taking the elements of the sequence of pseudo random
 numbers and distributing them among the threads.
 There are essentially four different parallelization techniques used in
 practice:Random seeding,Parameterization,Block splitting and Leapfrogging.
\end_layout

\begin_layout Paragraph

\series bold
Random seeding
\series default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PRNG!Random seeding
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Random seeding
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "par:Random-seeding"

\end_inset


\end_layout

\begin_layout Standard
Every thread uses the same kind of PRNG but with a different seed.
 This is the default strategy used by the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library.
 Random seeding works well for the most problems but without theoretical
 foundation.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This is also expressed by Donald Knuth’s advice:
\begin_inset Quotes ald
\end_inset

Random number generators should not be chosen at random.
\begin_inset Quotes ard
\end_inset


\end_layout

\end_inset

 The
\family typewriter
 Random\SpecialChar softhyphen
Registry
\family default
 is initialized with the Java
\family typewriter
 L64X\SpecialChar softhyphen
256\SpecialChar softhyphen
Mix\SpecialChar softhyphen
Random
\family default
 class.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\family typewriter
RandomRegistry.random(RandomGeneratorFactory.of("L64X256MixRandom"))
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph

\series bold
Parameterization
\series default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PRNG!Parameterization
\end_layout

\end_inset


\end_layout

\begin_layout Standard
All threads use the same kind of PRNG but with different parameters.
 This requires the PRNG to be parameterizable, which is not the case for
 the Random object of the JDK.
 You can use the
\family typewriter
 LCG64\SpecialChar softhyphen
Shift\SpecialChar softhyphen
Random
\family default
 class if you want to use this strategy.
 The theoretical foundation for these methods is weak.
 In a massive parallel environment you will need a reliable set of parameters
 for every random stream, which are not trivial to find.
\end_layout

\begin_layout Paragraph

\series bold
Block splitting
\series default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PRNG!Block splitting
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Block splitting
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "par:Block-splitting"

\end_inset


\end_layout

\begin_layout Standard
With this method each thread will be assigned a non overlapping contiguous
 block of random numbers, which should be enough for the whole runtime of
 the process.
 If the number of threads is not known in advance, the length of each block
 should be chosen much larger than the maximal expected number of threads.
 This strategy is used when using the
\family typewriter
 LCG64\SpecialChar softhyphen
Shift\SpecialChar softhyphen
Random
\family default
 class
\emph on
.

\emph default
 This class assigns every thread a block of 
\begin_inset Formula $2^{56}\thickapprox7,2\cdot10^{16}$
\end_inset

 random numbers
\emph on
.

\emph default
 After 
\begin_inset Formula $128$
\end_inset

 threads, the blocks are recycled, but with changed seed.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/BlockSplitting.eps
	width 85text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Parallelization-via-block"

\end_inset

Block splitting
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph

\series bold
Leapfrog
\series default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PRNG!Leapfrog
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Leapfrog
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "par:Leapfrog"

\end_inset


\end_layout

\begin_layout Standard
With the leapfrog method each thread 
\begin_inset Formula $t\in\left[0,P\right)$
\end_inset

 only consumes the 
\begin_inset Formula $P^{th}$
\end_inset

 random number and jumps ahead in the random sequence by the number of threads,
 
\begin_inset Formula $P$
\end_inset

.
 This method requires the ability to jump very quickly ahead in the sequence
 of random numbers by a given amount.
 Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Parallelization-via-leapfrogging"
plural "false"
caps "false"
noprefix "false"

\end_inset

 graphically shows the concept of theleapfrog method.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/Leapfrog.eps
	width 80text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Parallelization-via-leapfrogging"

\end_inset

Leapfrogging
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Paragraph

\family typewriter
LCG64ShiftRandom
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Random!LCG64ShiftRandom
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PRNG!
\family typewriter
LCG64ShiftRandom
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
LCG64ShiftRandom
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "par:LCG64ShiftRandom"

\end_inset


\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The
\family typewriter
LCG64\SpecialChar softhyphen
Shift\SpecialChar softhyphen
Random
\family default
 PRNG is part of the
\family typewriter
io.\SpecialChar softhyphen
jenetics.\SpecialChar softhyphen
prngine
\family default
 module (see section
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:io.jenetics.prngine"

\end_inset

).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 LCG64ShiftRandom
\family default
 class is a port of the
\family typewriter
 trng::\SpecialChar softhyphen
lcg64_shift
\family default
 PRNG class of the
\begin_inset CommandInset href
LatexCommand href
name "TRNG"
target "http://numbercrunch.de/trng/"
literal "false"

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://numbercrunch.de/trng/
\end_layout

\end_inset


\end_layout

\end_inset

 library, implemented in C++.
\begin_inset CommandInset citation
LatexCommand cite
key "Tina2011"
literal "true"

\end_inset

 It implements additional methods, which allows to implement the
\emph on
 block splitting
\emph default
—and also the
\emph on
 leapfrog
\emph default
—method.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "extendedchars=true,language=Java"
inline false
status open

\begin_layout Plain Layout

public class LCG64ShiftRandom
\end_layout

\begin_layout Plain Layout

    implements RandomGenerator.ArbitrarilyJumpableGenerator
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    public void jump(final double step);
\end_layout

\begin_layout Plain Layout

    public void jumpPowerOfTwo(final int s);
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:LCG64ShiftRandom-class"

\end_inset


\family typewriter
LCG64ShiftRandom
\family default
 class
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:LCG64ShiftRandom-class"

\end_inset

 shows the interface used for implementing the block splitting and leapfrog
 parallelization techniques.
 This methods have the following meaning:
\end_layout

\begin_layout Description

\family typewriter
split
\family default
 Changes the internal state of the PRNG in a way that future calls to
\family typewriter
 nextLong
\family default
 will generate the 
\begin_inset Formula $s^{th}$
\end_inset

 sub-stream of 
\begin_inset Formula $p^{th}$
\end_inset

 sub-streams.
\begin_inset Formula $s$
\end_inset

 must be within the range of 
\begin_inset Formula $\left[0,p-1\right)$
\end_inset

.
 This method is used for parallelization via
\emph on
 leapfrogging
\emph default
.
\end_layout

\begin_layout Description

\family typewriter
jump
\family default
 Changes the internal state of the PRNG in such a way that the engine jumps
\begin_inset Formula $s$
\end_inset

 steps ahead.
 This method is used for parallelization via
\emph on
 block splitting
\emph default
.
\end_layout

\begin_layout Description

\family typewriter
jumpPowerOfTwo
\family default
 Changes the internal state of the PRNG in such a way that the engine jumps
 
\begin_inset Formula $2^{s}$
\end_inset

 steps ahead.
 This method is used for parallelization via
\emph on
 block splitting
\emph default
.
\end_layout

\begin_layout Subsection
Serialization
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Serialization
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Serialization"

\end_inset


\end_layout

\begin_layout Standard

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 supports serialization for a number of classes, most of them are located
 in the
\family typewriter
 io.jenetics
\family default
 package.
 Only the concrete implementations of the
\family typewriter
 Gene
\family default
 and the
\family typewriter
 Chromosome
\family default
 interfaces implements the
\family typewriter
 Serializable
\family default
 interface.
 This gives a greater flexibility when implementing own
\family typewriter
 Gene
\family default
s and
\family typewriter
 Chromosome
\family default
s.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
BitGene
\end_layout

\begin_layout Itemize

\family typewriter
BitChromosome
\end_layout

\begin_layout Itemize

\family typewriter
CharacterGene
\end_layout

\begin_layout Itemize

\family typewriter
CharacterChromosome
\end_layout

\begin_layout Itemize

\family typewriter
IntegerGene
\end_layout

\begin_layout Itemize

\family typewriter
IntegerChromosome
\end_layout

\begin_layout Itemize

\family typewriter
LongGene
\end_layout

\begin_layout Itemize

\family typewriter
LongChomosome
\end_layout

\begin_layout Itemize

\family typewriter
DoubleGene
\end_layout

\begin_layout Itemize

\family typewriter
DoubleChromosome
\end_layout

\begin_layout Itemize

\family typewriter
EnumGene
\end_layout

\begin_layout Itemize

\family typewriter
PermutationChromosome
\end_layout

\begin_layout Itemize

\family typewriter
Genotype
\end_layout

\begin_layout Itemize

\family typewriter
Phenotype
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the serialization mechanism you can write a population to disk and
 load it into a new
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 at a later time.
 It can also be used to transfer populations to evolution engines, running
 on different hosts, over a network link.
 The
\family typewriter
 IO
\family default
 class, located in the
\family typewriter
 io.jenetics.util
\family default
 package, supports native Java serialization in a convenient way.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

// Creating result population.
\end_layout

\begin_layout Plain Layout

final EvolutionResult<DoubleGene, Double> result = stream
\end_layout

\begin_layout Plain Layout

    .limit(100)
\end_layout

\begin_layout Plain Layout

    .collect(toBestEvolutionResult());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Writing the population to disk.
\end_layout

\begin_layout Plain Layout

final File file = new File("population.obj");
\end_layout

\begin_layout Plain Layout

IO.object.write(result.population(), file);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Reading the population from disk.
\end_layout

\begin_layout Plain Layout

final ISeq<Phenotype<G, C>> population =
\end_layout

\begin_layout Plain Layout

    (ISeq<Phenotype<G, C>>)IO.object.read(file);
\end_layout

\begin_layout Plain Layout

final EvolutionStream<DoubleGene, Double> stream = Engine
\end_layout

\begin_layout Plain Layout

    .build(ff, gtf)
\end_layout

\begin_layout Plain Layout

    .stream(population, 1);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Utility classes
\end_layout

\begin_layout Standard
The
\family typewriter
 io.jenetics.util
\family default
 and the
\family typewriter
 io.jenetics.stat
\family default
 package of the library contains utility and helper classes which are essential
 for the implementation of the GA.
\end_layout

\begin_layout Paragraph

\family typewriter
io.jenetics.util.BaseSeq
\end_layout

\begin_layout Standard
This interface defines a minimal contract for sequential data, which can
 be accessed by its index or position.
 The algorithms, implemented by the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library, assumes that accessing elements of a
\family typewriter
 Base\SpecialChar softhyphen
Seq
\family default
 is done in 
\begin_inset Formula $O\left(1\right)$
\end_inset

.

\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
 and
\family typewriter
 Geno\SpecialChar softhyphen
type
\family default
 implement the
\family typewriter
 Base\SpecialChar softhyphen
Seq
\family default
 interface.
 This expresses the intent that the
\family typewriter
 Chromosome
\family default
 is a sequence of
\family typewriter
 Gene
\family default
s and the
\family typewriter
 Geno\SpecialChar softhyphen
type
\family default
 is a sequence of
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
s.
\end_layout

\begin_layout Paragraph

\family typewriter
io.jenetics.util.Seq
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Seq
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "par:io.jenetics.util.Seq"

\end_inset


\end_layout

\begin_layout Standard
Most notable are the
\family typewriter
 Seq
\family default
 interfaces and its implementation.
 They are used, among others, in the
\family typewriter
 Chromosome
\family default
 and
\family typewriter
 Genotype
\family default
 classes and hold the
\family typewriter
 Gene
\family default
s and
\family typewriter
 Chromosome
\family default
s, respectively.
 The
\family typewriter
 Seq
\family default
 interface itself represents a fixed-sized, ordered sequence of elements.
 It is an abstraction over the Java build in
\emph on
 array
\emph default
 type, but much safer to use for
\emph on
 generic
\emph default
 elements, because there are no casts needed when using nested generic types.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/model/SeqModel.eps
	lyxscale 75
	width 80col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
\begin_inset CommandInset label
LatexCommand label
name "fig:Seq-class-diagram"

\end_inset

Seq
\family default
 class diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Seq-class-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the
\family typewriter
 Seq
\family default
 class diagram with their most important methods.
 The interfaces
\family typewriter
 MSeq
\family default
 and
\family typewriter
 ISeq
\family default
 are mutable, respectively immutable specializations of the basis interface.
 Creating instances of the
\family typewriter
 Seq
\family default
 interfaces is possible via the static factory methods of the interfaces.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

// Create "different" sequences.
\end_layout

\begin_layout Plain Layout

final Seq<Integer> a1 = Seq.of(1, 2, 3);
\end_layout

\begin_layout Plain Layout

final MSeq<Integer> a2 = MSeq.of(1, 2, 3);
\end_layout

\begin_layout Plain Layout

final ISeq<Integer> a3 = MSeq.of(1, 2, 3).toISeq();
\end_layout

\begin_layout Plain Layout

final MSeq<Integer> a4 = a3.copy();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// The 'equals' method performs element-wise comparison.
\end_layout

\begin_layout Plain Layout

assert(a1.equals(a2) && a1 != a2);
\end_layout

\begin_layout Plain Layout

assert(a2.equals(a3) && a2 != a3);
\end_layout

\begin_layout Plain Layout

assert(a3.equals(a4) && a3 != a4);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
How to create instances of the three
\family typewriter
 Seq
\family default
 types is shown in the listing above.
 The
\family typewriter
 Seq
\family default
 classes also allows a more
\emph on
 functional
\emph default
 programming style.
 For a full method description refer to the
\begin_inset CommandInset href
LatexCommand href
name "Javadoc"
target "https://jenetics.io/javadoc/jenetics/index.html"
literal "false"

\end_inset

.
\end_layout

\begin_layout Paragraph

\family typewriter
io.jenetics.util.ProxySorter
\end_layout

\begin_layout Standard
This is a special sorter, which allows you to sort even an immutable collection.
 As the name suggests, it doesn't sort a given sequence directly.
 Instead it sorts or rearranges a
\emph on
 proxy
\family typewriter
\emph default
 int[]
\family default
 array, which can then be used for accessing the original sequence in a
 sorted order.
 The main usage for this special sorter in
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 is where you need to access of the population in sorted order, but have
 to preserve the original order of the population.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
For this specific problem you could also do this by copying the population
 and sorting the copy instead of the original.
 But using a sorted
\emph on
proxy
\emph default
 array can lead to simpler code.
\end_layout

\end_inset

 Many of the algorithms, implemented in the
\family typewriter
 io\SpecialChar softhyphen
.jenetics\SpecialChar softhyphen
.ext\SpecialChar softhyphen
.moea
\family default
 package, uses the
\family typewriter
 Proxy\SpecialChar softhyphen
Sorter
\family default
, which leads to simpler code at this places.
 How the proxy sorter is used can be seen in the following code snippet.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final double[] array = RandomGenerator.getDefault()
\end_layout

\begin_layout Plain Layout

    .doubles(100)
\end_layout

\begin_layout Plain Layout

    .toArray();
\end_layout

\begin_layout Plain Layout

final int[] proxy = ProxySorter.sort(array);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Doing 'Classical' array sort.
\end_layout

\begin_layout Plain Layout

final double[] sorted = array.clone();
\end_layout

\begin_layout Plain Layout

Arrays.sort(sorted);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Iterating the array in ascending order.
\end_layout

\begin_layout Plain Layout

for (int i = 0; i < array.length; ++i) {
\end_layout

\begin_layout Plain Layout

    assert sorted[i] == array[proxy[i]];
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The
\family typewriter
 ProxySorter
\family default
 increases the set of sortable objects.
 It is even possible to sort objects where you only know the access function
 to the elements and the number of elements.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final IntFunction<String> access = ...;
\end_layout

\begin_layout Plain Layout

final int length = 100;
\end_layout

\begin_layout Plain Layout

final int[] proxy = ProxySorter.sort(
\end_layout

\begin_layout Plain Layout

    access, length,
\end_layout

\begin_layout Plain Layout

	(a, i, j) -> a.apply(i).compareTo(a.apply(j))
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

The code snipped above shows how to sort an
\family typewriter
 Int\SpecialChar softhyphen
Function
\family default
.
 With the proxy array you are now able to access the
\family typewriter
 access
\family default
 function in ascending order.
 The
\family typewriter
 ProxySorter
\family default
 uses the Timsort
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Timsort
\end_layout

\end_inset


\end_layout

\end_inset

 algorithm for sorting the proxy
\family typewriter
 int[]
\family default
 array.
\end_layout

\begin_layout Paragraph

\family typewriter
io.jenetics.stat
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Statistics
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This package contains classes for calculating statistical moments.
 They are designed to work smoothly with the Java Stream API and are divided
 into mutable (number) consumers and immutable value classes, which holds
 the statistical moments.
 The additional classes calculate the
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
minimum
\emph default
,
\end_layout

\begin_layout Itemize

\emph on
maximum
\emph default
,
\end_layout

\begin_layout Itemize

\emph on
sum
\emph default
,
\end_layout

\begin_layout Itemize

\emph on
mean
\emph default
,
\end_layout

\begin_layout Itemize

\emph on
variance
\emph default
,
\end_layout

\begin_layout Itemize

\emph on
skewness
\emph default
 and
\end_layout

\begin_layout Itemize

\emph on
kurtosis
\emph default
 value.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Numeric type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Consumer class
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value class
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
IntMomentStatistics
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
IntMoments
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
long
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
LongMomentStatistics
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
LongMoments
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
double
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
DoubleMomentStatistics
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
DoubleMoments
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Statistics classes
\begin_inset CommandInset label
LatexCommand label
name "tab:Statistics-classes"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Table
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Statistics-classes"
plural "false"
caps "false"
noprefix "false"

\end_inset

 contains the available statistical moments for the different numeric types.
 The following code snippet shows an example on how to collect double statistics
 from a given
\family typewriter
 Double\SpecialChar softhyphen
Gene
\family default
 stream.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

// Collecting into an statistics object.
\end_layout

\begin_layout Plain Layout

final DoubleChromosome chromosome = ...
\end_layout

\begin_layout Plain Layout

final DoubleMomentStatistics statistics = chromosome.stream()
\end_layout

\begin_layout Plain Layout

    .collect(DoubleMomentStatistics
\end_layout

\begin_layout Plain Layout

        .toDoubleMomentStatistics(v -> v.doubleValue()));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Collecting into an moments object.
\end_layout

\begin_layout Plain Layout

final DoubleMoments moments = chromosome.stream()
\end_layout

\begin_layout Plain Layout

    .collect(DoubleMoments.toDoubleMoments(v -> v.doubleValue()));
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 stat
\family default
 package also contains a class for calculating the quantile
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Quantile
\end_layout

\end_inset


\end_layout

\end_inset

 of a stream of double values.
 Its implementing algorithm, which is described in
\begin_inset CommandInset citation
LatexCommand cite
key "Jain:1985:PAD:4372.4378"
literal "true"

\end_inset

, calculates—or
\emph on
 estimates
\emph default
—the quantile value on the fly, without storing the consumed double values.
 This allows for using the
\family typewriter
 Quantile
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Quantile
\end_layout

\end_inset


\family default
 class even for very large sets of double values.
 How to calculate the first quartile of a given, random
\family typewriter
 Double\SpecialChar softhyphen
Stream
\family default
 is shown in the code snippet below.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Quantile quartile = new Quantile(0.25);
\end_layout

\begin_layout Plain Layout

RandomGenerator.getDefault()
\end_layout

\begin_layout Plain Layout

    .doubles(10_000)
\end_layout

\begin_layout Plain Layout

    .forEach(quartile);
\end_layout

\begin_layout Plain Layout

final double value = quartile.value();
\end_layout

\end_inset

Be aware, that the calculated quartile is
\emph on
 just
\emph default
 an estimation.
 For sufficient accuracy, the stream size should be sufficiently large (
\begin_inset Formula $size\gg100$
\end_inset

).
\end_layout

\begin_layout Chapter
Advanced topics
\end_layout

\begin_layout Standard
This section describes some advanced topics for setting up an evolution
\family typewriter
 Engine
\family default
 or
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
.
 It contains some problem encoding examples and how to override the default
 validation strategy of the given
\family typewriter
 Genotype
\family default
s.
 The last section contains a detailed description of the implemented termination
 strategies.
\end_layout

\begin_layout Section
Extending
\family sans
\series bold
\shape smallcaps
 Jenetics
\begin_inset CommandInset label
LatexCommand label
name "sec:Extending-Jenetics"

\end_inset


\end_layout

\begin_layout Standard
The
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library was designed to give you a great flexibility in transforming your
 problem into a structure that can be solved by a GA.
 It also comes with different implementations for the base data types (genes
 and chromosomes) and operators (alterers and selectors).
 If it is still some functionality missing, this section describes how you
 can extend the existing classes.
 Most of the
\shape italic
 extensible
\shape default
 classes are defined by an interface and have an abstract implementation
 which makes it easier to extend it.
\end_layout

\begin_layout Subsection
Genes
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Gene
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Genes"

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
Gene
\family default
s are the starting point in the class hierarchy.
 They hold the actual information, the alleles, of the problem domain.
 Beside the classical bit-gene,
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 comes with gene implementations for numbers (
\family typewriter
double
\family default
-,
\family typewriter
 int
\family default
- and
\family typewriter
 long
\family default
 values), characters and enumeration types.
\end_layout

\begin_layout Standard
For implementing your own gene type you have to implement the
\family typewriter
 Gene
\family default
 interface with three methods: (1) the
\family typewriter
 Gene\SpecialChar softhyphen
::allele
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Allele
\end_layout

\end_inset

 method which will return the wrapped data, (2) the
\family typewriter
 Gene\SpecialChar softhyphen
::newInstance
\family default
 method for creating new, random instances of the gene—must be of the same
 type and have the same constraint—and (3) the
\family typewriter
 Gene\SpecialChar softhyphen
::isValid
\family default
 method which checks if the gene fulfill the expected constraints.
 The gene constraint might be violated after mutation and/or recombination.
 If you want to implement a new number-gene, e.
\begin_inset space ~
\end_inset

g.
 a gene which holds complex values, you may want to extend it from the
\family typewriter
 Numeric\SpecialChar softhyphen
Gene
\family default
 interface.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
The custom
\family typewriter
 Gene
\family sans
s and
\family typewriter
 Chromosome
\family sans
s implementations must use the
\family typewriter
 Random\SpecialChar softhyphen
Generator
\family sans
 available via the
\family typewriter
 Random\SpecialChar softhyphen
Registry\SpecialChar softhyphen
::random
\family sans
 method when implementing their factory methods.
 Otherwise it is not possible to seamlessly change the
\family typewriter
 Random\SpecialChar softhyphen
Generator
\family sans
 by using the
\family typewriter
 Random\SpecialChar softhyphen
Registry\SpecialChar softhyphen
::random(\SpecialChar softhyphen
Random\SpecialChar softhyphen
Generator)
\family sans
 method.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you want to support your own allele type, but want to avoid the effort
 of implementing the
\family typewriter
 Gene
\family default
 interface, you can alternatively use the
\family typewriter
 Any\SpecialChar softhyphen
Gene
\family default
 class.
 It can be created with
\family typewriter
 Any\SpecialChar softhyphen
Gene\SpecialChar softhyphen
::of(Sup\SpecialChar softhyphen
plier, Predi\SpecialChar softhyphen
cate)
\family default
.
 The given
\family typewriter
 Supplier
\family default
 is responsible for creating new random alleles, similar to the
\family typewriter
 newInstance
\family default
 method in the
\family typewriter
 Gene
\family default
 interface.
 Additional validity checks are performed by the given
\family typewriter
 Predicate
\family default
.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

class LastMonday {
\end_layout

\begin_layout Plain Layout

    // Creates new random 'LocalDate' objects.
\end_layout

\begin_layout Plain Layout

    private static LocalDate nextMonday() {
\end_layout

\begin_layout Plain Layout

        final var random = RandomRegistry.random();
\end_layout

\begin_layout Plain Layout

        LocalDate
\end_layout

\begin_layout Plain Layout

            .of(2015, 1, 5)
\end_layout

\begin_layout Plain Layout

            .plusWeeks(random.nextInt(1000));
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Do some additional validity check.
\end_layout

\begin_layout Plain Layout

    private static boolean isValid(final LocalDate date) {...}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Create a new gene from the random 'Supplier' and
\end_layout

\begin_layout Plain Layout

    // validation 'Predicate'.
\end_layout

\begin_layout Plain Layout

    private final AnyGene<LocalDate> gene = AnyGene
\end_layout

\begin_layout Plain Layout

        .of(LastMonday::nextMonday, LastMonday::isValid);
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
\begin_inset CommandInset label
LatexCommand label
name "lis:AnyGene-example"

\end_inset

AnyGene
\family default
 example
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
AnyGene
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Example listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:AnyGene-example"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the (almost) minimal setup for creating user defined
\family typewriter
 Gene
\family default
 allele types.
 By convention, the
\family typewriter
 Random\SpecialChar softhyphen
Generator
\family default
, used for creating the new
\family typewriter
 Local\SpecialChar softhyphen
Date
\family default
 objects, must be requested from the
\family typewriter
 Random\SpecialChar softhyphen
Registry
\family default
.
 With the optional validation function,
\family typewriter
 isValid
\family default
, it is possible to reject
\family typewriter
 Genes
\family default
 whose alleles don't conform to some criteria.
 The simple usage of the
\family typewriter
 AnyGene
\family default
 has also its downsides.
 Since the
\family typewriter
 AnyGene
\family default
 instances are created from function objects, serialization is not supported
 by the
\family typewriter
 AnyGene
\family default
 class.
 It is also not possible to use some
\family typewriter
 Alterer
\family default
 implementations with the
\family typewriter
 AnyGene
\family default
, like:
\end_layout

\begin_layout Itemize

\family typewriter
GaussianMutator
\family default
,
\end_layout

\begin_layout Itemize

\family typewriter
MeanAlterer
\family default
 and
\end_layout

\begin_layout Itemize

\family typewriter
PartiallyMatchedCrossover
\end_layout

\begin_layout Subsection
Chromosomes
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Chromosome
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A new
\family typewriter
 Gene
\family default
 type usually comes with a corresponding
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
 implementation.
 One of the important parts of a
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
 is the factory method
\family typewriter
 new\SpecialChar softhyphen
Instance(\SpecialChar softhyphen
ISeq\SpecialChar softhyphen
)
\family default
, which lets the evolution
\family typewriter
 Engine
\family default
 create a new
\family typewriter
 Chromosome
\family default
 instance from a sequence of
\family typewriter
 Gene
\family default
s.
 This method is used by the
\family typewriter
 Alterer
\family default
 when creating a new combined
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
.
 The newly created
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
 may have a different length than the original one.
 The other methods should be self explanatory.
 The
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
 implementations uses the same serialization mechanism as the
\family typewriter
 Gene
\family default
.
 In the minimal case it can extends the
\family typewriter
 Serializable
\family default
 interface.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\family sans
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.oracle.com/technetwork/articles/java/javaserial-1536170.html
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
Just implementing the
\family typewriter
 Serializable
\family sans
 interface is sometimes not enough.
 You might also need to implement the
\family typewriter
 readObject
\family sans
 and
\family typewriter
 writeObject
\family sans
 methods for a more concise serialization result.
 Consider using the serialization proxy pattern, item 90, described in
\emph on
 Effective Java
\emph default

\begin_inset CommandInset citation
LatexCommand cite
key "Bloch2018"
literal "true"

\end_inset

.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Corresponding to the
\family typewriter
 AnyGene
\family default
, it is possible to create chromosomes with arbitrary allele types with
 the
\family typewriter
 AnyChromosome
\family default
.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public class LastMonday {
\end_layout

\begin_layout Plain Layout

    // The used problem Codec.
\end_layout

\begin_layout Plain Layout

    private static final Codec<LocalDate, AnyGene<LocalDate>>
\end_layout

\begin_layout Plain Layout

    CODEC = Codec.of(
\end_layout

\begin_layout Plain Layout

        Genotype.of(AnyChromosome.of(LastMonday::nextMonday)),
\end_layout

\begin_layout Plain Layout

        gt -> gt.gene().allele()
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Creates new random 'LocalDate' objects.
\end_layout

\begin_layout Plain Layout

    private static LocalDate nextMonday() {
\end_layout

\begin_layout Plain Layout

        final var random = RandomRegistry.random();
\end_layout

\begin_layout Plain Layout

        LocalDate
\end_layout

\begin_layout Plain Layout

            .of(2015, 1, 5)
\end_layout

\begin_layout Plain Layout

            .plusWeeks(random.nextInt(1000));
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // The fitness function: find a monday at the end of the month.
\end_layout

\begin_layout Plain Layout

    private static int fitness(final LocalDate date) {
\end_layout

\begin_layout Plain Layout

        return date.getDayOfMonth();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

        final Engine<AnyGene<LocalDate>, Integer> engine = Engine
\end_layout

\begin_layout Plain Layout

            .builder(LastMonday::fitness, CODEC)
\end_layout

\begin_layout Plain Layout

            .offspringSelector(new RouletteWheelSelector<>())
\end_layout

\begin_layout Plain Layout

            .build();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        final Phenotype<AnyGene<LocalDate>, Integer> best =
\end_layout

\begin_layout Plain Layout

            engine.stream()
\end_layout

\begin_layout Plain Layout

                .limit(50)
\end_layout

\begin_layout Plain Layout

                .collect(EvolutionResult.toBestPhenotype());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        System.out.println(best);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
\begin_inset CommandInset label
LatexCommand label
name "lis:AnyChromosome-example"

\end_inset

AnyChromosome
\family default
 example
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
AnyChromosome
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:AnyChromosome-example"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows a full usage example of the
\family typewriter
 Any\SpecialChar softhyphen
Gene
\family default
 and
\family typewriter
 Any\SpecialChar softhyphen
Chromosome
\family default
.
 The example tries to find a Monday with a maximal day of month.
 An interesting detail is, that an
\family typewriter
 Codec
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Codec"

\end_inset

 for a more detailed
\family typewriter
 Codec
\family default
 description.
\end_layout

\end_inset

 definition is used for creating new
\family typewriter
 Genotypes
\family default
 and for converting them back to
\family typewriter
 LocalDate
\family default
 alleles.
 The convenient usage of the
\family typewriter
 Any\SpecialChar softhyphen
Chromosome
\family default
 has to be payed by the same restriction as for the
\family typewriter
 Any\SpecialChar softhyphen
Gene
\family default
: no serialization support for the chromosome and not usable for all
\family typewriter
 Alterer
\family default
 implementations.
\end_layout

\begin_layout Subsection
Selectors
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you want to implement your own selection strategy you only have to implement
 the
\family typewriter
 Selector
\family default
 interface with the
\family typewriter
 select
\family default
 method.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

@FunctionalInterface
\end_layout

\begin_layout Plain Layout

public interface Selector<
\end_layout

\begin_layout Plain Layout

    G extends Gene<?, G>,
\end_layout

\begin_layout Plain Layout

    C extends Comparable<? super C>
\end_layout

\begin_layout Plain Layout

> {
\end_layout

\begin_layout Plain Layout

    ISeq<Phenotype<G, C>> select(
\end_layout

\begin_layout Plain Layout

        Seq<Phenotype<G, C>> population,
\end_layout

\begin_layout Plain Layout

        int count,
\end_layout

\begin_layout Plain Layout

        Optimize opt
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Selector-interface"

\end_inset


\family typewriter
Selector
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first parameter is the original
\family typewriter
 population
\family default
 from which the
\emph on
 sub
\emph default
-population is selected.
 The second parameter,
\family typewriter
 count
\family default
, is the number of individuals of the returned sub-population.
 Depending on the selection algorithm, it is possible that the sub-population
 contains more elements than the original one.
 The last parameter,
\family typewriter
 opt
\family default
, determines the optimization strategy which must be used by the selector.
 This is exactly the point where it is decided whether the GA minimizes
 or maximizes the fitness function.
\end_layout

\begin_layout Standard
Before implementing a selector from scratch, consider extending your selector
 from the
\family typewriter
 Probability\SpecialChar softhyphen
Selector
\family default
 (or any other available
\family typewriter
 Selector
\family default
 implementation).
 It is worth the effort to try to express your selection strategy in terms
 of selection property 
\begin_inset Formula $P\left(i\right)$
\end_inset

.
 Another way for reusing existing
\family typewriter
 Selector
\family default
 implementation is by composition.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public class EliteSelector<
\end_layout

\begin_layout Plain Layout

    G extends Gene<?, G>,
\end_layout

\begin_layout Plain Layout

    C extends Comparable<? super C>
\end_layout

\begin_layout Plain Layout

>
\end_layout

\begin_layout Plain Layout

    implements Selector<G, C>
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    private final TruncationSelector<G, C>
\end_layout

\begin_layout Plain Layout

    _elite = new TruncationSelector<>();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    private final TournamentSelector<G, C>
\end_layout

\begin_layout Plain Layout

    _rest = new TournamentSelector<>(3);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public EliteSelector() {
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

    public ISeq<Phenotype<G, C>> select(
\end_layout

\begin_layout Plain Layout

        final Seq<Phenotype<G, C>> population,
\end_layout

\begin_layout Plain Layout

        final int count,
\end_layout

\begin_layout Plain Layout

        final Optimize opt
\end_layout

\begin_layout Plain Layout

    ) {
\end_layout

\begin_layout Plain Layout

        ISeq<Phenotype<G, C>> result;
\end_layout

\begin_layout Plain Layout

        if (population.isEmpty() || count <= 0) {
\end_layout

\begin_layout Plain Layout

            result = ISeq.empty();
\end_layout

\begin_layout Plain Layout

        } else {
\end_layout

\begin_layout Plain Layout

            final int ec = min(count, _eliteCount);
\end_layout

\begin_layout Plain Layout

            result = _elite.select(population, ec, opt);
\end_layout

\begin_layout Plain Layout

            result = result.append(
\end_layout

\begin_layout Plain Layout

                _rest.select(population, max(0, count - ec), opt)
\end_layout

\begin_layout Plain Layout

            );
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        return result;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Elite-selector"

\end_inset

Elite selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Elite selector
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Selector!Elite
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Elitism
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Elite-selector"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how an
\emph on
 elite
\emph default
 selector could be implemented by using the existing
\family typewriter
 Trun\SpecialChar softhyphen
cation
\family default
- and
\family typewriter
 Tour\SpecialChar softhyphen
nament\SpecialChar softhyphen
Selector
\family default
.
 With
\emph on
 elite
\emph default
 selection, the quality of the best solution in each generation monotonically
 increases over time.
\begin_inset CommandInset citation
LatexCommand cite
key "Baluja95removingthe"
literal "true"

\end_inset

 It is not necessary to use an elite selector if you want to preserve the
 best individual in the final result.
 The evolution
\family typewriter
 Engine
\family default
/
\family typewriter
Stream
\family default
 doesn't throw away the best solution found during the evolution process.
\end_layout

\begin_layout Subsection
Alterers
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Alterer
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For implementing a new alterer class it is necessary to implement the
\family typewriter
 Alterer
\family default
 interface.
 You might do this if your new
\family typewriter
 Gene
\family default
 type needs a special kind of alterer not available in the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 project.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

@FunctionalInterface
\end_layout

\begin_layout Plain Layout

public interface Alterer<
\end_layout

\begin_layout Plain Layout

    G extends Gene<?, G>,
\end_layout

\begin_layout Plain Layout

    C extends Comparable<? super C>
\end_layout

\begin_layout Plain Layout

> {
\end_layout

\begin_layout Plain Layout

    AltererResult<G, C> alter(
\end_layout

\begin_layout Plain Layout

        Seq<Phenotype<G, C>> population,
\end_layout

\begin_layout Plain Layout

        long generation
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Alterer-interface"

\end_inset


\family typewriter
Alterer
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first parameter of the
\family typewriter
 alter
\family default
 method is the
\family typewriter
 population
\family default
 which has to be altered.
 The second parameter is the
\family typewriter
 generation
\family default
 of the newly created individuals and the return value is the number of
 genes that has been altered and the altered population, aggregated in the
\family typewriter
 Alterer\SpecialChar softhyphen
Result
\family default
 class.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
To maximize the range of application of an
\family typewriter
 Alterer
\family sans
, it is recommended that they can handle
\family typewriter
 Genotypes
\family sans
 and
\family typewriter
 Chromosomes
\family sans
 with variable length.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Statistics
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Statistics
\end_layout

\end_inset


\end_layout

\begin_layout Standard
During the developing phase of an application which uses the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library, additional statistical data about the evolution process is crucial.
 Such data can help to optimize the parametrization of the evolution
\family typewriter
 Engine
\family default
.
 A good starting point is to use the
\family typewriter
 Evolution\SpecialChar softhyphen
Statistics
\family default
 class in the
\family typewriter
 io.jenetics.\SpecialChar softhyphen
engine
\family default
 package (see listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:EvolutionStatistics-usage"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 If the data in the
\family typewriter
 Evolution\SpecialChar softhyphen
Statistics
\family default
 class doesn't fit your needs, you simply have to write your own statistics
 class.
 It is not possible to derive from the existing
\family typewriter
 Evolution\SpecialChar softhyphen
Statistics
\family default
 class.
 This is not a real restriction, since you still can use the class by delegation.
 Just implement the Java
\family typewriter
 Consumer<\SpecialChar softhyphen
Evolution\SpecialChar softhyphen
Result<G, C>\SpecialChar softhyphen
>
\family default
 interface.
\end_layout

\begin_layout Subsection
Engine
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Engine
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The evolution
\family typewriter
 Engine
\family default
 itself can't be extended, but it is still possible to create an
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 without using the
\family typewriter
 Engine
\family default
 class.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Also refer to section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsubsec:EvolutionStream"

\end_inset

 on how to create an
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 from an evolution
\family typewriter
 Function
\family default
.
\end_layout

\end_inset

 Because the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 has no direct dependency to the
\family typewriter
 Engine
\family default
, it is possible to use an different, special evolution
\family typewriter
 Function
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public final class SpecialEngine {
\end_layout

\begin_layout Plain Layout

    // The Genotype factory.
\end_layout

\begin_layout Plain Layout

    private static final Factory<Genotype<DoubleGene>> GTF =
\end_layout

\begin_layout Plain Layout

        Genotype.of(DoubleChromosome.of(0, 1));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Create new evolution start object.
\end_layout

\begin_layout Plain Layout

    private static EvolutionStart<DoubleGene, Double>
\end_layout

\begin_layout Plain Layout

    start(final int populationSize, final long generation) {
\end_layout

\begin_layout Plain Layout

        final ISeq<Phenotype<DoubleGene, Double>> population = GTF
\end_layout

\begin_layout Plain Layout

            .instances()
\end_layout

\begin_layout Plain Layout

            .map(gt -> Phenotype.of(gt, generation))
\end_layout

\begin_layout Plain Layout

            .limit(populationSize)
\end_layout

\begin_layout Plain Layout

            .collect(ISeq.toISeq());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        return EvolutionStart.of(population, generation);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // The special evolution function.
\end_layout

\begin_layout Plain Layout

    private static EvolutionResult<DoubleGene, Double>
\end_layout

\begin_layout Plain Layout

    evolve(final EvolutionStart<DoubleGene, Double> start) {
\end_layout

\begin_layout Plain Layout

        return ...; // Add implementation!
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

        final Genotype<DoubleGene> best = EvolutionStream
\end_layout

\begin_layout Plain Layout

            .of(() -> start(50, 0), SpecialEngine::evolve)
\end_layout

\begin_layout Plain Layout

            .limit(Limits.bySteadyFitness(10))
\end_layout

\begin_layout Plain Layout

            .limit(100)
\end_layout

\begin_layout Plain Layout

            .collect(EvolutionResult.toBestGenotype());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        System.out.println("Best Genotype: " + best));
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Special-evolution-engine"

\end_inset

Special evolution engine
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Special-evolution-engine"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows an implementation stub for using an own special evolution
\family typewriter
 Function
\family default
.
 It is also possible to change the used evolution function, depending on
 the actual population.
 The
\family typewriter
 Evo\SpecialChar softhyphen
lution\SpecialChar softhyphen
Stream\SpecialChar softhyphen
::of\SpecialChar softhyphen
Adjust\SpecialChar softhyphen
able\SpecialChar softhyphen
Evo\SpecialChar softhyphen
lution
\family default
 give you this possibility.
 In the following example two evolution functions are used, depending on
 the fitness variance of the previous population.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

    final Problem<double[], DoubleGene, Double> problem = ...;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Engine.Builder template.
\end_layout

\begin_layout Plain Layout

    final Engine.Builder<DoubleGene, Double> bld = Engine
\end_layout

\begin_layout Plain Layout

        .builder(problem)
\end_layout

\begin_layout Plain Layout

        .minimizing();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Evolution used for low fitness variance.
\end_layout

\begin_layout Plain Layout

    final Evolution<DoubleGene, Double> lowVar = builder.copy()
\end_layout

\begin_layout Plain Layout

        .alterers(new Mutator<>(0.5))
\end_layout

\begin_layout Plain Layout

        .selector(new MonteCarloSelector<>())
\end_layout

\begin_layout Plain Layout

        .build();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Evolution used for high fitness variance.
\end_layout

\begin_layout Plain Layout

    final Evolution<DoubleGene, Double> highVar = builder.copy()
\end_layout

\begin_layout Plain Layout

        .alterers(
\end_layout

\begin_layout Plain Layout

            new Mutator<>(0.05),
\end_layout

\begin_layout Plain Layout

            new MeanAlterer<>())
\end_layout

\begin_layout Plain Layout

        .selector(new RouletteWheelSelector<>())
\end_layout

\begin_layout Plain Layout

        .build();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    final EvolutionStream<DoubleGene, Double> stream =
\end_layout

\begin_layout Plain Layout

        EvolutionStream.ofAdjustableEvolution(
\end_layout

\begin_layout Plain Layout

            EvolutionStart::empty,
\end_layout

\begin_layout Plain Layout

            er -> var(er) < 0.2 ? lowVar : highVar
\end_layout

\begin_layout Plain Layout

        );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    final Genotype<DoubleGene> result = stream
\end_layout

\begin_layout Plain Layout

        .limit(Limits.bySteadyFitness(50))
\end_layout

\begin_layout Plain Layout

        .collect(EvolutionResult.toBestGenotype());
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

static double var(final EvolutionResult<DoubleGene, Double> er) {
\end_layout

\begin_layout Plain Layout

    return er != null
\end_layout

\begin_layout Plain Layout

        ? er.population().stream()
\end_layout

\begin_layout Plain Layout

            .map(Phenotype::fitness)
\end_layout

\begin_layout Plain Layout

            .collect(toDoubleMoments())
\end_layout

\begin_layout Plain Layout

            .variance()
\end_layout

\begin_layout Plain Layout

        : 0.0;
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Adjustable evolution stream"

\end_inset

Adjustable evolution stream
\end_layout

\end_inset


\end_layout

\end_inset

The purpose of such an adjustment is to broaden the search if the population
 variance tends to be to small.
 This can reduce the risk of converging to a local minimum.
 If the population variance is to big, a different engine configuration
 can help to speed up the optimization.
\end_layout

\begin_layout Section
Encoding
\begin_inset CommandInset label
LatexCommand label
name "subsec:Encoding"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Encoding
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This section presents some encoding examples for common optimization problems.
 The encoding should be a complete, and minimal representation of the problem
 domain.
 An encoding is complete if it contains enough information to represent
 every solution to the problem.
 Whereas a minimal encoding contains only the information needed to represent
 a solution to the problem.
 If an encoding contains more information than is needed to uniquely identify
 solutions to the problem, the search space will be larger than necessary.
 In the best case, there is a one-to-one mapping from the
\family typewriter
 Geno\SpecialChar softhyphen
type
\family default
 space to problem domain.
 Whenever possible, the encoding should not represent infeasible solutions.
 If a
\family typewriter
 Geno\SpecialChar softhyphen
type
\family default
 represents an infeasible solution, care must be taken in the fitness function
 to give partial credit to the
\family typewriter
 Geno\SpecialChar softhyphen
type
\family default
 for its 
\begin_inset Quotes ald
\end_inset

good
\begin_inset Quotes ard
\end_inset

 genetic material while sufficiently penalizing it for being infeasible.
 Implementing a specialized
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
, which won't create invalid encodings can be a solution to this problem.
 In general, it is much more desirable to design a representation that can
 only represent valid solutions so that the fitness function measures only
 fitness, not validity.
 An encoding that includes invalid individuals enlarges the search space
 and makes the search more costly.
 A deeper analysis of how to create encodings can be found in
\begin_inset CommandInset citation
LatexCommand cite
key "Rothlauf2006"
literal "true"

\end_inset

 and
\begin_inset CommandInset citation
LatexCommand cite
key "Palmer1995"
literal "true"

\end_inset

.
 Some of the encodings represented in the following sections have been implement
ed by
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
, using the
\family typewriter
 Codec
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Codec"

\end_inset

.
\end_layout

\end_inset

 interface, and are available through static factory methods of the
\family typewriter
 io.jenetics.\SpecialChar softhyphen
engine.\SpecialChar softhyphen
Codecs
\family default
 class.
\end_layout

\begin_layout Subsection
Real function
\begin_inset CommandInset label
LatexCommand label
name "subsec:Real-function"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Encoding!Real function
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 contains three different numeric
\family typewriter
 Gene
\family default
 and
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
 implementations, which can be used to encode a real function, 
\begin_inset Formula $f:\,\mathbb{R}\rightarrow\mathbb{R}$
\end_inset

:
\end_layout

\begin_layout Itemize

\family typewriter
IntegerGene
\family default
/
\family typewriter
Chromosome
\family default
,
\end_layout

\begin_layout Itemize

\family typewriter
LongGene
\family default
/
\family typewriter
Chromosome
\family default
 and
\end_layout

\begin_layout Itemize

\family typewriter
DoubleGene
\family default
/
\family typewriter
Chromosome
\family default
.
\end_layout

\begin_layout Standard
It is quite easy to encode a real function.
 Only the minimum and maximum value of the function domain must be defined.
 The
\family typewriter
 Double\SpecialChar softhyphen
Chromosome
\family default
 of length 1 is then wrapped into a
\family typewriter
 Genotype
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min, max, 1)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Decoding the double value from the
\family typewriter
 Geno\SpecialChar softhyphen
type
\family default
 is also straight forward.
 Just get the first
\family typewriter
 Gene
\family default
 from the first
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
, with the
\family typewriter
 gene
\family default
 method, and convert it to a
\family typewriter
 double
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static double toDouble(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

    return gt.gene().doubleValue();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the
\family typewriter
 Genotype
\family default
 only contains
\emph on
 scalar
\family typewriter
\emph default
 Chromosome
\family default
s
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Scalar chromosomes contains only one gene.
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Chromosome!scalar
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Scalar chromosome
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genotype!scalar
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Scalar genotype
\end_layout

\end_inset

, it should be clear, that it can't be altered by every
\family typewriter
 Alterer
\family default
.
 That means, that none of the
\family typewriter
 Crossover
\family default
 alterers will be able to create modified
\family typewriter
 Genotype
\family default
s.
 For
\emph on
 scalars
\emph default
 the appropriate alterers would be the
\family typewriter
 Mean\SpecialChar softhyphen
Alterer
\family default
,
\family typewriter
 Gaussian\SpecialChar softhyphen
Alterer
\family default
 and
\family typewriter
 Mutator
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90text%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
\emph on
Scalar
\family typewriter
\emph default
 Chromosome
\family sans
s and/or
\family typewriter
 Genotype
\family sans
s can only be altered by
\family typewriter
 MeanAlterer
\family sans
,
\family typewriter
 GaussianAlterer
\family sans
 and
\family typewriter
 Mutator
\family sans
 classes.
 Other alterers are allowed, but will have no effect on the
\family typewriter
 Chromosome
\family sans
s.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Scalar function
\begin_inset CommandInset label
LatexCommand label
name "subsec:Scalar-function"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Encoding!Scalar function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Optimizing a function, 
\begin_inset Formula $f\left(x_{1},...,x_{n}\right)$
\end_inset

, of one or more variable whose range is one-dimensional, we have two possibilit
ies for the
\family typewriter
 Geno\SpecialChar softhyphen
type
\family default
 encoding.
\begin_inset CommandInset citation
LatexCommand cite
key "MathWorld_Weisstein"
literal "true"

\end_inset

 For the
\emph on
 first
\emph default
 encoding we expect that all variables, 
\begin_inset Formula $x_{i}$
\end_inset

, have the same minimum and maximum value.
 In this case we can simply create a
\family typewriter
 Genotype
\family default
 with a
\family typewriter
\emph on
 Numeric
\emph default
\SpecialChar softhyphen
Chromosome
\family default
 of the desired length 
\begin_inset Formula $n$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min, max, n)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The decoding of the
\family typewriter
 Genotype
\family default
 requires a cast of the first
\family typewriter
 Chromosome
\family default
 to a
\family typewriter
 Double\SpecialChar softhyphen
Chromosome
\family default
.
 With a call to the
\family typewriter
 DoubleChromosome.\SpecialChar softhyphen
toArray()
\family default
 method we return the variables 
\begin_inset Formula $\left(x_{1},...,x_{n}\right)$
\end_inset

 as
\family typewriter
 double[]
\family default
 array.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static double[] toScalars(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

    return gt.chromosome()
\end_layout

\begin_layout Plain Layout

        .as(DoubleChromosome.class)
\end_layout

\begin_layout Plain Layout

        .toArray();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the
\emph on
 first
\emph default
 encoding you have the possibility to use all available alterers, including
 all
\family typewriter
 Crossover
\family default
 alterer classes.
\end_layout

\begin_layout Standard
The
\emph on
 second
\emph default
 encoding
\emph on
 must
\emph default
 be used if the minimum and maximum value of the variables 
\begin_inset Formula $x_{i}$
\end_inset

 can't be the same for all 
\begin_inset Formula $i$
\end_inset

.
 For the different domains, each variable, 
\begin_inset Formula $x_{i}$
\end_inset

, is represented by a
\family typewriter
\emph on
 Numeric
\emph default
\SpecialChar softhyphen
Chromosome
\family default
 with length one.
 The final
\family typewriter
 Genotype
\family default
 will consist of 
\begin_inset Formula $n$
\end_inset


\family typewriter
 Chromosome
\family default
s with length one.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min1, max1),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min2, max2),
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(minn, maxn)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the help of the Java Stream API, the decoding of the
\family typewriter
 Genotype
\family default
 can be done in a view lines.
 The
\family typewriter
 Double\SpecialChar softhyphen
Chromosome
\family default
 stream, which is created from the
\family typewriter
 Chromo\SpecialChar softhyphen
some Seq
\family default
, is first mapped to
\family typewriter
 double
\family default
 values and then collected into an array.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static double[] toScalars(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

    return gt.stream()
\end_layout

\begin_layout Plain Layout

        .mapToDouble(c -> c.gene().doubleValue())
\end_layout

\begin_layout Plain Layout

        .toArray();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As already mentioned, with the use of scalar
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
s we can only use the
\family typewriter
 MeanAlterer
\family default
,
\family typewriter
 GaussianAlterer
\family default
 or
\family typewriter
 Mutator
\family default
 alterer class.
 If there are performance issues in converting the
\family typewriter
 Genotype
\family default
 into a
\family typewriter
 double[]
\family default
 array, or any other numeric array, you can access the
\family typewriter
 Gene
\family default
s directly via the
\family typewriter
 Genotype\SpecialChar softhyphen
.get(i)\SpecialChar softhyphen
.get(j)
\family default
 method and than convert it to the desired numeric value, by calling
\family typewriter
 int\SpecialChar softhyphen
Value()
\family default
,
\family typewriter
 long\SpecialChar softhyphen
Value()
\family default
 or
\family typewriter
 double\SpecialChar softhyphen
Value()
\family default
.
\end_layout

\begin_layout Subsection
Vector function
\begin_inset CommandInset label
LatexCommand label
name "subsec:Vector-function"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Encoding!Vector function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A function, 
\begin_inset Formula $f\left(X_{1},...,X_{n}\right)$
\end_inset

, of one to 
\begin_inset Formula $n$
\end_inset

 variables whose range is 
\begin_inset Formula $m$
\end_inset

-dimensional, is encoded by 
\begin_inset Formula $m$
\end_inset


\family typewriter
 Double\SpecialChar softhyphen
Chromosome
\family default
s of length 
\begin_inset Formula $n$
\end_inset

.
\begin_inset CommandInset citation
LatexCommand cite
key "MathWorld_Weisstein2"
literal "true"

\end_inset

 The domain–minimum and maximum values–of one variable 
\begin_inset Formula $X_{i}$
\end_inset

 are the same in this encoding.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min1, max1, m),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min2, max2, m),
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(minn, maxn, m)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The decoding of the vectors is quite easy with the help of the Java Stream
 API.
 In the first
\family typewriter
 map
\family default
 we have to cast the
\family typewriter
 Chromosome<DoubleGene>
\family default
 object to the actual
\family typewriter
 DoubleChromosome
\family default
.
 The second
\family typewriter
 map
\family default
 then converts each
\family typewriter
 Double\SpecialChar softhyphen
Chromosome
\family default
 to a
\family typewriter
 double[]
\family default
 array, which is collected to an 
\begin_inset Formula $2$
\end_inset

-dimensional
\family typewriter
 dou\SpecialChar softhyphen
ble\SpecialChar softhyphen
[
\emph on
n
\emph default
][
\emph on
m
\emph default
]
\family default
 array afterwards.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static double[][] toVectors(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

    return gt.stream()
\end_layout

\begin_layout Plain Layout

        .map(dc -> dc.as(DoubleChromosome.class).toArray())
\end_layout

\begin_layout Plain Layout

        .toArray(double[][]::new);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For the special case of 
\begin_inset Formula $n=1$
\end_inset

, the decoding of the
\family typewriter
 Genotype
\family default
 can be simplified to the decoding we introduced for scalar functions in
 section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Scalar-function"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static double[] toVector(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

    return gt.chromosome().as(DoubleChromosome.class).toArray();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Affine transformation
\begin_inset CommandInset label
LatexCommand label
name "subsec:Affine-transformation"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Encoding!Affine transformation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An affine transformation
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Affine_transformation
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://mathworld.wolfram.com/AffineTransformation.html
\end_layout

\end_inset


\end_layout

\end_inset

 is usually performed by a matrix multiplication with a transformation matrix—in
 a homogeneous coordinates system
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Homogeneous_coordinates
\end_layout

\end_inset


\end_layout

\end_inset

.
 For a transformation in 
\begin_inset Formula $\mathbb{R}^{2}$
\end_inset

, we can define the matrix
\begin_inset Formula $A$
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Transformation_matrix
\end_layout

\end_inset


\end_layout

\end_inset

:
\begin_inset Formula 
\begin{equation}
A=\left(\begin{array}{ccc}
a_{11} & a_{12} & a_{13}\\
a_{21} & a_{22} & a_{23}\\
0 & 0 & 1
\end{array}\right).\label{eq:Transformation matrix}
\end{equation}

\end_inset

 A simple representation can be done by creating a
\family typewriter
 Genotype
\family default
 which contains two
\family typewriter
 DoubleChromosome
\family default
s with a length of 
\begin_inset Formula $3$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min, max, 3),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(min, max, 3)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The drawback with this kind of encoding is, that we will create a lot of
\emph on
 invalid
\emph default
 (non-affine transformation matrices) during the evolution process, which
 must be detected and discarded.
 It is also difficult to find the right parameters for the
\emph on
 min
\emph default
 and
\emph on
 max
\emph default
 values of the
\family typewriter
 DoubleChromosome
\family default
s.
 A better approach will be to encode the transformation parameters instead
 of the transformation matrix.
 The affine transformation can be expressed by the following parameters:
\end_layout

\begin_layout Itemize
\begin_inset Formula $s_{x}$
\end_inset

 – the scale factor in 
\begin_inset Formula $x$
\end_inset

 direction
\end_layout

\begin_layout Itemize
\begin_inset Formula $s_{y}$
\end_inset

 – the scale factor in 
\begin_inset Formula $y$
\end_inset

 direction
\end_layout

\begin_layout Itemize
\begin_inset Formula $t_{x}$
\end_inset

 – the offset in 
\begin_inset Formula $x$
\end_inset

 direction
\end_layout

\begin_layout Itemize
\begin_inset Formula $t_{y}$
\end_inset

 – the offset in 
\begin_inset Formula $y$
\end_inset

 direction
\end_layout

\begin_layout Itemize
\begin_inset Formula $\theta$
\end_inset

 – the rotation angle clockwise around origin
\end_layout

\begin_layout Itemize
\begin_inset Formula $k_{x}$
\end_inset

 – shearing parallel to 
\begin_inset Formula $x$
\end_inset

 axis
\end_layout

\begin_layout Itemize
\begin_inset Formula $k_{y}$
\end_inset

 – shearing parallel to 
\begin_inset Formula $y$
\end_inset

 axis
\end_layout

\begin_layout Standard
This parameters can then be represented by the following
\family typewriter
 Genotype
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype.of(
\end_layout

\begin_layout Plain Layout

    // Scale
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(sxMin, sxMax),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(syMin, syMax),
\end_layout

\begin_layout Plain Layout

    // Translation
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(txMin, txMax),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(tyMin, tyMax),
\end_layout

\begin_layout Plain Layout

    // Rotation
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(thMin, thMax),
\end_layout

\begin_layout Plain Layout

    // Shear
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(kxMin, kxMax),
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(kyMin, kxMax)
\end_layout

\begin_layout Plain Layout

)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This encoding ensures that no invalid
\family typewriter
 Genotype
\family default
 will be created during the evolution process, since the crossover will
 be only performed on the same kind of chromosome (same chromosome index).
 To convert the
\family typewriter
 Genotype
\family default
 back to the transformation matrix 
\begin_inset Formula $A$
\end_inset

, the following equations can be used
\begin_inset CommandInset citation
LatexCommand cite
key "hughes2014computer"
literal "true"

\end_inset

:
\begin_inset Formula 
\begin{eqnarray}
a_{11} & = & s_{x}\cos\theta+k_{x}s_{y}\sin\theta\nonumber \\
a_{12} & = & s_{y}k_{x}\cos\theta-s_{x}\sin\theta\nonumber \\
a_{13} & = & t_{x}\nonumber \\
a_{21} & = & k_{y}s_{x}\cos\theta+s_{y}\sin\theta\label{eq:Matrix parameters}\\
a_{22} & = & s_{y}\cos\theta-s_{x}k_{y}\sin\theta\nonumber \\
a_{23} & = & t_{y}\nonumber 
\end{eqnarray}

\end_inset

This corresponds to an transformation order of 
\begin_inset Formula $T\cdot S_{h}\cdot S_{c}\cdot R$
\end_inset

:
\begin_inset Formula 
\[
\left(\begin{array}{ccc}
1 & 0 & t_{x}\\
0 & 1 & t_{y}\\
0 & 0 & 1
\end{array}\right)\cdot\left(\begin{array}{ccc}
1 & k_{x} & 0\\
k_{y} & 1 & 0\\
0 & 0 & 1
\end{array}\right)\cdot\left(\begin{array}{ccc}
s_{x} & 0 & 0\\
0 & s_{y} & 0\\
0 & 0 & 1
\end{array}\right)\cdot\left(\begin{array}{ccc}
\cos\theta & -\sin\theta & 0\\
\sin\theta & \cos\theta & 0\\
0 & 0 & 1
\end{array}\right).
\]

\end_inset

In Java code, the conversion from the
\family typewriter
 Genotype
\family default
 to the transformation matrix, will look like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static double[][] toMatrix(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

    final double sx = gt.get(0).gene().doubleValue();
\end_layout

\begin_layout Plain Layout

    final double sy = gt.get(1).gene().doubleValue();
\end_layout

\begin_layout Plain Layout

    final double tx = gt.get(2).gene().doubleValue();
\end_layout

\begin_layout Plain Layout

    final double ty = gt.get(3).gene().doubleValue();
\end_layout

\begin_layout Plain Layout

    final double th = gt.get(4).gene().doubleValue();
\end_layout

\begin_layout Plain Layout

    final double kx = gt.get(5).gene().doubleValue();
\end_layout

\begin_layout Plain Layout

    final double ky = gt.get(6).gene().doubleValue();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    final double cos_th = cos(th);
\end_layout

\begin_layout Plain Layout

    final double sin_th = sin(th);
\end_layout

\begin_layout Plain Layout

    final double a11 = cos_th*sx + kx*sy*sin_th;
\end_layout

\begin_layout Plain Layout

    final double a12 = cos_th*kx*sy - sx*sin_th;
\end_layout

\begin_layout Plain Layout

    final double a21 = cos_th*ky*sx + sy*sin_th;
\end_layout

\begin_layout Plain Layout

    final double a22 = cos_th*sy - ky*sx*sin_th;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return new double[][] {
\end_layout

\begin_layout Plain Layout

        {a11, a12, tx},
\end_layout

\begin_layout Plain Layout

        {a21, a22, ty},
\end_layout

\begin_layout Plain Layout

        {0.0, 0.0, 1.0}
\end_layout

\begin_layout Plain Layout

    };
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For the introduced encoding all kind of alterers can be used.
 Since we have one scalar
\family typewriter
 Double\SpecialChar softhyphen
Chromosome
\family default
, the rotation angle 
\begin_inset Formula $\theta$
\end_inset

, it is recommended also to add a
\family typewriter
 Mean\SpecialChar softhyphen
Alterer
\family default
 or
\family typewriter
 Gaussian\SpecialChar softhyphen
Alterer
\family default
 to the list of alterers.
\end_layout

\begin_layout Subsection
Graph
\begin_inset CommandInset label
LatexCommand label
name "subsec:Graph"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Graph
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Encoding!Graph
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A graph can be represented in many different ways.
 The most known graph representation is the adjacency matrix.
 The following encoding examples uses adjacency matrices with different
 characteristics.
\end_layout

\begin_layout Paragraph
Undirected graph
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Undirected graph
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Encoding!Undirected graph
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In an undirected graph the edges between the vertices have no direction.
 If there is a path between nodes 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

, it is assumed that there is also path from 
\begin_inset Formula $j$
\end_inset

 to 
\begin_inset Formula $i$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/UndirectGraph.eps
	lyxscale 80
	width 65text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Undirected-graph"

\end_inset

Undirected graph and adjacency matrix
\end_layout

\end_inset


\end_layout

\end_inset

Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Undirected-graph"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows an undirected graph and its corresponding matrix representation.
 Since the edges between the nodes have no direction, the values of the
 lower diagonal matrix are not taken into account.
 An application which optimizes an undirected graph has to ignore this part
 of the matrix.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This property violates the
\emph on
 minimal
\emph default
 encoding requirement we mentioned at the beginning of section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Encoding"

\end_inset

.
 For simplicity reason this will be ignored for the undirected graph encoding.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final int n = 6;
\end_layout

\begin_layout Plain Layout

final Genotype<BitGene> gt = Genotype.of(BitChromosome.of(n), n);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code snippet above shows how to create an adjacency matrix for a graph
 with 
\begin_inset Formula $n=6$
\end_inset

 nodes.
 It creates a
\family typewriter
 Geno\SpecialChar softhyphen
type
\family default
 which consists of 
\begin_inset Formula $n$
\end_inset


\family typewriter
 Bit\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
s of length 
\begin_inset Formula $n$
\end_inset

 each.
 Whether the node 
\begin_inset Formula $i$
\end_inset

 is connected to node 
\begin_inset Formula $j$
\end_inset

 can be easily checked by calling
\family typewriter
 gt\SpecialChar softhyphen
.get(i-1)\SpecialChar softhyphen
.get(j-1)\SpecialChar softhyphen
.booleanValue()
\family default
.
 For extracting the whole matrix as
\family typewriter
 int[]
\family default
 array, the following code can be used.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final int[][] array = gt.toSeq().stream()
\end_layout

\begin_layout Plain Layout

    .map(c -> c.toSeq().stream()
\end_layout

\begin_layout Plain Layout

        .mapToInt(gene -> gene.bit() ? 1 : 0)
\end_layout

\begin_layout Plain Layout

        .toArray())
\end_layout

\begin_layout Plain Layout

    .toArray(int[][]::new);
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Directed graph
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Directed graph
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Encoding!Directed graph
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A directed graph (digraph) is a graph where the path between the nodes has
 a direction associated with them.
 The encoding of a directed graph looks exactly like the encoding of an
 undirected graph.
 This time the whole matrix is used and the second diagonal matrix is no
 longer ignored.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/DirectGraph.eps
	lyxscale 80
	width 65text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Directed-graph"

\end_inset

Directed graph and adjacency matrix
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Directed-graph"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the adjacency matrix of a digraph.
 This time the whole matrix is used for representing the graph.
\end_layout

\begin_layout Paragraph
Weighted directed graph
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Weighted graph
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Encoding!Weighted graph
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A weighted graph associates a weight (label) with every path in the graph.
 Weights are usually real numbers.
 They may be restricted to rational numbers or integers.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/WeightedDirectGraph.eps
	lyxscale 80
	width 65text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Weighted-graph"

\end_inset

Weighted graph and adjacency matrix
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following code snippet shows how the
\family typewriter
 Genotype
\family default
 of the matrix is created.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final int n = 6;
\end_layout

\begin_layout Plain Layout

final double min = -1;
\end_layout

\begin_layout Plain Layout

final double max = 20;
\end_layout

\begin_layout Plain Layout

final Genotype<DoubleGene> gt = Genotype
\end_layout

\begin_layout Plain Layout

    .of(DoubleChromosome.of(min, max, n), n);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For accessing the single matrix elements, you can simply call
\family typewriter
 Genotype\SpecialChar softhyphen
.get(i)\SpecialChar softhyphen
.get(j)\SpecialChar softhyphen
.doubleValue()
\family default
.
 If the interaction with another library requires a
\family typewriter
 double\SpecialChar softhyphen
[][]
\family default
 array, the following code can be used.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final double[][] array = gt.stream()
\end_layout

\begin_layout Plain Layout

    .map(dc -> dc.as(DoubleChromosome.class).toArray())
\end_layout

\begin_layout Plain Layout

    .toArray(double[][]::new);
\end_layout

\end_inset


\end_layout

\begin_layout Section
Codec
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Codec
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:Codec"

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Codec
\family default
 interface, located in the
\family typewriter
 io.jenetics.\SpecialChar softhyphen
engine
\family default
 package, narrows the gap between the fitness
\family typewriter
 Function
\family default
, which should be maximized/minimized, and the
\family typewriter
 Genotype
\family default
 representation, which can be understood by the evolution
\family typewriter
 Engine
\family default
.
 With the
\family typewriter
 Codec
\family default
 interface it is possible to implement the encodings of section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Encoding"
plural "false"
caps "false"
noprefix "false"

\end_inset

 in a more formalized way.
\end_layout

\begin_layout Standard
Normally, the
\family typewriter
 Engine
\family default
 expects a fitness function which takes a
\family typewriter
 Genotype
\family default
 as input.
 This
\family typewriter
 Genotype
\family default
 has then to be transformed into an object of the problem domain.
 The usage
\family typewriter
 Codec
\family default
 interface allows a tighter coupling of the
\family typewriter
 Genotype
\family default
 definition and the transformation code.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Encoding"

\end_inset

 describes some possible encodings for common optimization problems.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface Codec<T, G extends Gene<?, G>> {
\end_layout

\begin_layout Plain Layout

    Factory<Genotype<G>> encoding();
\end_layout

\begin_layout Plain Layout

    Function<Genotype<G>, T> decoder();
\end_layout

\begin_layout Plain Layout

    default T decode(final Genotype<G> gt) {...}
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
Codec
\family default
 interface
\begin_inset CommandInset label
LatexCommand label
name "lis:Codec-interface"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Codec-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the
\family typewriter
 Codec
\family default
 interface.
 The
\family typewriter
 encoding
\family default
 method returns the
\family typewriter
 Genotype
\family default
 factory, which is used by the
\family typewriter
 Engine
\family default
 for creating new
\family typewriter
 Genotypes
\family default
.
 The decoder
\family typewriter
 Function
\family default
, which is returned by the
\family typewriter
 decoder
\family default
 method, transforms the
\family typewriter
 Genotype
\family default
 to the argument type of the fitness
\family typewriter
 Function
\family default
.
 Without the
\family typewriter
 Codec
\family default
 interface, the implementation of the fitness Function is
\emph on
 polluted
\emph default
 with code, which transforms the
\family typewriter
 Genotype
\family default
 into the argument type of the actual fitness
\family typewriter
 Function
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static double eval(final Genotype<DoubleGene> gt) {
\end_layout

\begin_layout Plain Layout

    final double x = gt.gene().doubleValue();
\end_layout

\begin_layout Plain Layout

    // Do some calculation with 'x'.
\end_layout

\begin_layout Plain Layout

    return ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The
\family typewriter
 Codec
\family default
 for the example above is quite simple and is shown below.
 It is not necessary to implement the
\family typewriter
 Codec
\family default
 interface, instead you can use the
\family typewriter
 Codec\SpecialChar softhyphen
::of
\family default
 factory method for creating new
\family typewriter
 Codec
\family default
 instances.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final DoubleRange domain = DoubleRange.of(0, 2*PI);
\end_layout

\begin_layout Plain Layout

final Codec<Double, DoubleGene> codec = Codec.of(
\end_layout

\begin_layout Plain Layout

    Genotype.of(DoubleChromosome.of(domain)),
\end_layout

\begin_layout Plain Layout

    gt -> gt.chromosome().gene().allele()
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

When using a
\family typewriter
 Codec
\family default
 instance, the fitness
\family typewriter
 Function
\family default
 solely contains code from your actual problem domain—no dependencies to
 classes of the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static double eval(final double x) {
\end_layout

\begin_layout Plain Layout

    // Do some calculation with 'x'.
\end_layout

\begin_layout Plain Layout

    return ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 comes with a set of standard encodings, which are created via static factory
 methods in the
\family typewriter
 io.jenetics.\SpecialChar softhyphen
engine.\SpecialChar softhyphen
Codecs
\family default
 class.
 The following subsections describe the most important predefined
\family typewriter
 Codec
\family default
s.
\end_layout

\begin_layout Subsection
Scalar codec
\begin_inset CommandInset label
LatexCommand label
name "subsec:Scalar-codec"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Scalar codec
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Codec!Scalar
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Codec-factory-method-ofScalar"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the implementation of the
\family typewriter
 Codecs\SpecialChar softhyphen
::ofScalar
\family default
 factory method—for
\family typewriter
 Integer
\family default
 scalars.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static Codec<Integer, IntegerGene> ofScalar(IntRange domain) {
\end_layout

\begin_layout Plain Layout

    return Codec.of(
\end_layout

\begin_layout Plain Layout

        Genotype.of(IntegerChromosome.of(domain)),
\end_layout

\begin_layout Plain Layout

        gt -> gt.chromosome().gene().allele()
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
Codec
\family default
 factory method:
\family typewriter
 ofScalar
\family default

\begin_inset CommandInset label
LatexCommand label
name "lis:Codec-factory-method-ofScalar"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The usage of the
\family typewriter
 Codec
\family default
, created by this factory method, simplifies the implementation of the fitness
\family typewriter
 Function
\family default
 and the creation of the evolution
\family typewriter
 Engine
\family default
.
 For scalar types, the saving, in complexity and lines of code, is not that
 big, but using the factory method is still quite handy.
 The following listing demonstrates the interaction between
\family typewriter
 Codec
\family default
, fitness
\family typewriter
 Function
\family default
 and evolution
\family typewriter
 Engine
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

class Main {
\end_layout

\begin_layout Plain Layout

    // Fitness function directly takes an 'int' value.
\end_layout

\begin_layout Plain Layout

    static double fitness(int arg) {
\end_layout

\begin_layout Plain Layout

        return ...;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public static void main(String[] args) {
\end_layout

\begin_layout Plain Layout

        final Engine<IntegerGene, Double> engine = Engine
\end_layout

\begin_layout Plain Layout

            .builder(Main::fitness, ofScalar(IntRange.of(0, 100)))
\end_layout

\begin_layout Plain Layout

            .build();
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Vector codec
\begin_inset CommandInset label
LatexCommand label
name "subsec:Vector-codec"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Vector codec
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Codec!Vector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Codec-factory-method-ofVector"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the
\family typewriter
 ofVector
\family default
 factory method returns a
\family typewriter
 Codec
\family default
 for an
\family typewriter
 int[]
\family default
 array.
 The
\family typewriter
 domain
\family default
 parameter defines the allowed range of the
\family typewriter
 int
\family default
 values and the
\family typewriter
 length
\family default
 defines the length of the encoded
\family typewriter
 int
\family default
 array.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static Codec<int[], IntegerGene>
\end_layout

\begin_layout Plain Layout

ofVector(IntRange domain, int length) {
\end_layout

\begin_layout Plain Layout

    return Codec.of(
\end_layout

\begin_layout Plain Layout

        Genotype.of(IntegerChromosome.of(domain, length)),
\end_layout

\begin_layout Plain Layout

        gt -> gt.chromosome()
\end_layout

\begin_layout Plain Layout

            .as(IntegerChromosome.class)
\end_layout

\begin_layout Plain Layout

            .toArray()
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
Codec
\family default
 factory method:
\family typewriter
 ofVector
\family default

\begin_inset CommandInset label
LatexCommand label
name "lis:Codec-factory-method-ofVector"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The usage example of the
\emph on
 vector
\family typewriter
\emph default
 Codec
\family default
 is almost the same as for the
\emph on
 scalar
\family typewriter
\emph default
 Codec
\family default
.
 As an additional parameter, we need to define the length of the desired
 array and we define our fitness function with an
\family typewriter
 int[]
\family default
 array.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

class Main {
\end_layout

\begin_layout Plain Layout

    // Fitness function directly takes an 'int[]' array.
\end_layout

\begin_layout Plain Layout

    static double fitness(int[] args) {
\end_layout

\begin_layout Plain Layout

        return ...;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public static void main(String[] args) {
\end_layout

\begin_layout Plain Layout

        final Engine<IntegerGene, Double> engine = Engine
\end_layout

\begin_layout Plain Layout

            .builder(
\end_layout

\begin_layout Plain Layout

                Main::fitness,
\end_layout

\begin_layout Plain Layout

                ofVector(IntRange.of(0, 100), 10))
\end_layout

\begin_layout Plain Layout

            .build();
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Matrix codec
\begin_inset CommandInset label
LatexCommand label
name "subsec:Matrix-codec"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Matrix codec
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Codec!Matrix
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Codec-factory-method-ofMatrix"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the
\family typewriter
 ofMatrix
\family default
 factory method returns a
\family typewriter
 Codec
\family default
 for an
\family typewriter
 int[][]
\family default
 matrix.
 The
\family typewriter
 domain
\family default
 parameter defines the allowed range of the
\family typewriter
 int
\family default
 values and the
\family typewriter
 rows
\family default
 and
\family typewriter
 cols
\family default
 defines the dimension of the matrix.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static Codec<int[][], IntegerGene> ofMatrix(
\end_layout

\begin_layout Plain Layout

    IntRange domain,
\end_layout

\begin_layout Plain Layout

    int rows,
\end_layout

\begin_layout Plain Layout

    int cols
\end_layout

\begin_layout Plain Layout

) {
\end_layout

\begin_layout Plain Layout

    return Codec.of(
\end_layout

\begin_layout Plain Layout

        Genotype.of(
\end_layout

\begin_layout Plain Layout

            IntegerChromosome.of(domain, cols).instances()
\end_layout

\begin_layout Plain Layout

                .limit(rows)
\end_layout

\begin_layout Plain Layout

                .collect(ISeq.toISeq())
\end_layout

\begin_layout Plain Layout

        ),
\end_layout

\begin_layout Plain Layout

        gt -> gt.stream()
\end_layout

\begin_layout Plain Layout

            .map(ch -> ch.stream()
\end_layout

\begin_layout Plain Layout

                .mapToInt(IntegerGene::intValue)
\end_layout

\begin_layout Plain Layout

                .toArray())
\end_layout

\begin_layout Plain Layout

            .toArray(int[][]::new)
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
Codec
\family default
 factory method:
\family typewriter
 of
\family default
Matrix
\begin_inset CommandInset label
LatexCommand label
name "lis:Codec-factory-method-ofMatrix"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Subset codec
\begin_inset CommandInset label
LatexCommand label
name "subsec:Subset-codec"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Subset codec
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Codec!Subset
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are currently two kinds of subset codecs you can choose from: finding
 subsets with variable size and with fixed size.
\end_layout

\begin_layout Paragraph
Variable sized subsets
\end_layout

\begin_layout Standard
A
\family typewriter
 Codec
\family default
 for variable sized subsets can be easily implemented with the use of a
\family typewriter
 Bit\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
, as shown in listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Codec-factory-method-ofSubSet"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static <T> Codec<ISeq<T>, BitGene> ofSubSet(ISeq<T> basicSet) {
\end_layout

\begin_layout Plain Layout

    return Codec.of(
\end_layout

\begin_layout Plain Layout

        Genotype.of(BitChromosome.of(basicSet.length())),
\end_layout

\begin_layout Plain Layout

        gt -> gt.chromosome()
\end_layout

\begin_layout Plain Layout

            .as(BitChromosome.class).ones()
\end_layout

\begin_layout Plain Layout

            .mapToObj(basicSet)
\end_layout

\begin_layout Plain Layout

            .collect(ISeq.toISeq())
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
Codec
\family default
 factory method:
\family typewriter
 ofSubSet
\family default

\begin_inset CommandInset label
LatexCommand label
name "lis:Codec-factory-method-ofSubSet"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following usage example of subset
\family typewriter
 Codec
\family default
 shows a simplified version of the Knapsack problem (see section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:0/1-Knapsack-example"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 We try to find a subset, from the given basic
\family typewriter
 SET
\family default
, where the sum of the values is as big as possible, but smaller or equal
 than 
\begin_inset Formula $20$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

class Main {
\end_layout

\begin_layout Plain Layout

    // The basic set from where to choose an 'optimal' subset.
\end_layout

\begin_layout Plain Layout

    final static ISeq<Integer> SET =
\end_layout

\begin_layout Plain Layout

        ISeq.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Fitness function directly takes an 'int' value.
\end_layout

\begin_layout Plain Layout

    static int fitness(ISeq<Integer> subset) {
\end_layout

\begin_layout Plain Layout

        assert(subset.size() <= SET.size());
\end_layout

\begin_layout Plain Layout

        final int size = subset.stream().collect(
\end_layout

\begin_layout Plain Layout

            Collectors.summingInt(Integer::intValue));
\end_layout

\begin_layout Plain Layout

        return size <= 20 ? size : 0;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public static void main(String[] args) {
\end_layout

\begin_layout Plain Layout

        final Engine<BitGene, Double> engine = Engine
\end_layout

\begin_layout Plain Layout

            .builder(Main::fitness, ofSubSet(SET))
\end_layout

\begin_layout Plain Layout

            .build();
\end_layout

\begin_layout Plain Layout

        ...
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Fixed sized subsets
\end_layout

\begin_layout Standard
The second kind of subset
\family typewriter
 Codec
\family default
 allows you to find the
\emph on
 best
\emph default
 subset of a given, fixed size.
 A classical usage for this encoding is the Subset sum problem
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Subset_sum_problem
\end_layout

\end_inset


\end_layout

\end_inset

:
\emph on

\begin_inset Newline newline
\end_inset

Given a set (or multi-set) of integers, is there a non-empty subset whose
 sum is zero? For example, given the set 
\begin_inset Formula $\left\{ -7,-3,-2,5,8\right\} $
\end_inset

, the answer is yes because the subset 
\begin_inset Formula $\left\{ -3,-2,5\right\} $
\end_inset

 sums to zero.
 The problem is NP-complete.
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/NP-completeness
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public class SubsetSum
\end_layout

\begin_layout Plain Layout

    implements Problem<ISeq<Integer>, EnumGene<Integer>, Integer>
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    private final ISeq<Integer> _basicSet;
\end_layout

\begin_layout Plain Layout

    private final int _size;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public SubsetSum(ISeq<Integer> basicSet, int size) {
\end_layout

\begin_layout Plain Layout

        _basicSet = basicSet;
\end_layout

\begin_layout Plain Layout

        _size = size;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

    public Function<ISeq<Integer>, Integer> fitness() {
\end_layout

\begin_layout Plain Layout

        return subset -> abs(
\end_layout

\begin_layout Plain Layout

            subset.stream().mapToInt(Integer::intValue).sum());
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	@Override
\end_layout

\begin_layout Plain Layout

    public Codec<ISeq<Integer>, EnumGene<Integer>> codec() {
\end_layout

\begin_layout Plain Layout

        return Codecs.ofSubSet(_basicSet, _size);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Permutation codec
\begin_inset CommandInset label
LatexCommand label
name "subsec:Permutation-codec"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Permutation codec
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Codec!Permutation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This kind of
\family typewriter
 Codec
\family default
 can be used for problems where the optimal solution depends on the order
 of the input elements.
 A classical example for such problems is the Knapsack problem (chapter
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Traveling-salesman-example"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static <T> Codec<T[], EnumGene<T>> ofPermutation(T...
 alleles) {
\end_layout

\begin_layout Plain Layout

    return Codec.of(
\end_layout

\begin_layout Plain Layout

        Genotype.of(PermutationChromosome.of(alleles)),
\end_layout

\begin_layout Plain Layout

        gt -> gt.chromosome().stream()
\end_layout

\begin_layout Plain Layout

            .map(EnumGene::allele)
\end_layout

\begin_layout Plain Layout

            .toArray(length -> (T[])Array.newInstance(
\end_layout

\begin_layout Plain Layout

                 alleles[0].getClass(), length))
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
Codec
\family default
 factory method:
\family typewriter
 ofPermutation
\family default

\begin_inset CommandInset label
LatexCommand label
name "lis:Codec-factory-method-ofPermutation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Codec-factory-method-ofPermutation"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the implementation of a permutation
\family typewriter
 Codec
\family default
, where the order of the given alleles influences the value of the fitness
 function.
 An alternate formulation of the traveling salesman problem is shown in
 the following listing.
 It uses the permutation
\family typewriter
 Codec
\family default
 in listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Codec-factory-method-ofPermutation"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and uses
\family typewriter
 io\SpecialChar softhyphen
.jenetics\SpecialChar softhyphen
.jpx\SpecialChar softhyphen
.Way\SpecialChar softhyphen
Point
\family default
s, from the
\emph on
 JPX
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/jenetics/jpx
\end_layout

\end_inset


\end_layout

\end_inset

 project, for representing the city locations.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public class TSM {
\end_layout

\begin_layout Plain Layout

    // The locations to visit.
\end_layout

\begin_layout Plain Layout

    static final ISeq<WayPoint> POINTS = ISeq.of(...);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // The permutation codec.
\end_layout

\begin_layout Plain Layout

    static final Codec<ISeq<WayPoint>, EnumGene<WayPoint>>
\end_layout

\begin_layout Plain Layout

    CODEC = Codecs.ofPermutation(POINTS);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // The fitness function (in the problem domain).
\end_layout

\begin_layout Plain Layout

    static double dist(final ISeq<WayPoint> path) {
\end_layout

\begin_layout Plain Layout

        return path.stream()
\end_layout

\begin_layout Plain Layout

            .collect(Geoid.DEFAULT.toTourLength())
\end_layout

\begin_layout Plain Layout

            .to(Length.Unit.METER);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // The evolution engine.
\end_layout

\begin_layout Plain Layout

    static final Engine<EnumGene<WayPoint>, Double> ENGINE = Engine
\end_layout

\begin_layout Plain Layout

        .builder(TSM::dist, CODEC)
\end_layout

\begin_layout Plain Layout

        .optimize(Optimize.MINIMUM)
\end_layout

\begin_layout Plain Layout

        .build();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Find the solution.
\end_layout

\begin_layout Plain Layout

    public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

        final ISeq<WayPoint> result = CODEC.decode(
\end_layout

\begin_layout Plain Layout

            ENGINE.stream()
\end_layout

\begin_layout Plain Layout

                .limit(10)
\end_layout

\begin_layout Plain Layout

                .collect(EvolutionResult.toBestGenotype())
\end_layout

\begin_layout Plain Layout

        );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        System.out.println(result);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Mapping codec
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Mapping codec
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Codec!Mapping
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Assignment problem
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This
\family typewriter
 Codec
\family default
 is a variation of the permutation
\family typewriter
 Codec
\family default
.
 Instead of permuting the elements of a given array, it permutes the mapping
 of elements of a source set to the elements of a target set.
 The code snippet below shows the method of the
\family typewriter
 Codecs
\family default
 class, which creates a mapping codec from a given source and target set.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public static <A, B> Codec<Map<A, B>, EnumGene<Integer>>
\end_layout

\begin_layout Plain Layout

ofMapping(ISeq<? extends A> source, ISeq<? extends B> target);
\end_layout

\end_inset

It is not necessary that the source and target set are of the same size.
 If 
\begin_inset Formula $\left|\mathsf{source}\right|>\left|\mathsf{target}\right|$
\end_inset

, the returned mapping function is
\emph on
 surjective
\emph default
, if 
\begin_inset Formula $\left|\mathsf{source}\right|<\left|\mathsf{target}\right|$
\end_inset

, the mapping is
\emph on
 injective
\emph default
 and if 
\begin_inset Formula $\left|\mathsf{source}\right|=\left|\mathsf{target}\right|$
\end_inset

, the created mapping is
\emph on
 bijective
\emph default
.
 In every case the size of the encoded
\family typewriter
 Map
\family default
 is 
\begin_inset Formula $\left|\mathsf{target}\right|$
\end_inset

.
 Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Codec-mapping-types"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the described different mapping types in graphical form.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/MappingCodec.eps
	lyxscale 80
	width 65text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Codec-mapping-types"

\end_inset

Mapping codec types
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With 
\begin_inset Formula $\left|\mathsf{source}\right|=\left|\mathsf{target}\right|$
\end_inset

, you will create a
\family typewriter
 Codec
\family default
 for the
\emph on
 assignment problem
\emph default
.
 The problem is defined by a number of workers and a number of jobs.
 Every worker can be assigned to perform any job.
 The cost for a worker may vary depending on the worker job assignment.
 It is required to perform all jobs by assigning exactly one worker to each
 job and exactly one job to each worker in such a way which optimizes the
 total assignment costs.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Assignment_problem
\end_layout

\end_inset


\end_layout

\end_inset

 The costs for such worker job assignments are usually given by a matrix.
 Such an example matrix is shown in table
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Worker-task-cost"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Job 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Job 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Job 3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Job 4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Worker 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Worker 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Worker 3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Worker 4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Worker-task-cost"

\end_inset

Worker job cost
\end_layout

\end_inset


\end_layout

\end_inset

If your worker job cost can be expressed by a matrix, the Hungarian algorithm
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Hungarian_algorithm
\end_layout

\end_inset


\end_layout

\end_inset

 can find an optimal solution in 
\begin_inset Formula $O\left(n^{3}\right)$
\end_inset

 time.
 You should consider this deterministic algorithm before using a GA.
\end_layout

\begin_layout Subsection
Composite codec
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Composite codec
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Codec!Composite
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\emph on
 composite
\family typewriter
\emph default
 Codec
\family default
 factory method allows to combine two or more
\family typewriter
 Codec
\family default
s into one.
 Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Composite-Codec-factory"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the method signature of the factory method, which is implemented
 directly in the
\family typewriter
 Codec
\family default
 interface.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

static <G extends Gene<?, G>, A, B, T> Codec<T, G> of(
\end_layout

\begin_layout Plain Layout

    final Codec<A, G> codec1,
\end_layout

\begin_layout Plain Layout

    final Codec<B, G> codec2,
\end_layout

\begin_layout Plain Layout

    final BiFunction<A, B, T> decoder
\end_layout

\begin_layout Plain Layout

);
\begin_inset Caption Standard

\begin_layout Plain Layout
Composite
\family typewriter
 Codec
\family default
 factory method
\begin_inset CommandInset label
LatexCommand label
name "lis:Composite-Codec-factory"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

As you can see from the method definition, the combining
\family typewriter
 Codecs
\family default
 and the combined
\family typewriter
 Codec
\family default
 have the same
\family typewriter
 Gene
\family default
 type.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
Only
\family typewriter
 Codec
\family sans
s with the same
\family typewriter
 Gene
\family sans
 type can be composed by the combining factory methods of the
\family typewriter
 Codec
\family sans
 class.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following listing shows a full example which uses a combined
\family typewriter
 Codec
\family default
.
 It uses the subset
\family typewriter
 Codec
\family default
, introduced in section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Subset-codec"
plural "false"
caps "false"
noprefix "false"

\end_inset

, and combines it into a
\family typewriter
 Tuple
\family default
 of subsets.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

class Main {
\end_layout

\begin_layout Plain Layout

    static final ISeq<Integer> SET =
\end_layout

\begin_layout Plain Layout

        ISeq.of(1, 2, 3, 4, 5, 6, 7, 8, 9);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    // Result type of the combined 'Codec'.
\end_layout

\begin_layout Plain Layout

    static final class Tuple<A, B> {
\end_layout

\begin_layout Plain Layout

        final A first;
\end_layout

\begin_layout Plain Layout

        final B second;
\end_layout

\begin_layout Plain Layout

        Tuple(final A first, final B second) {
\end_layout

\begin_layout Plain Layout

            this.first = first;
\end_layout

\begin_layout Plain Layout

            this.second = second;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    static int fitness(Tuple<ISeq<Integer>, ISeq<Integer>> args) {
\end_layout

\begin_layout Plain Layout

        return args.first.stream()
\end_layout

\begin_layout Plain Layout

                   .mapToInt(Integer::intValue)
\end_layout

\begin_layout Plain Layout

                   .sum() -
\end_layout

\begin_layout Plain Layout

               args.second.stream()
\end_layout

\begin_layout Plain Layout

                   .mapToInt(Integer::intValue)
\end_layout

\begin_layout Plain Layout

                   .sum();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public static void main(String[] args) {
\end_layout

\begin_layout Plain Layout

        // Combined 'Codec'.
\end_layout

\begin_layout Plain Layout

        final Codec<Tuple<ISeq<Integer>, ISeq<Integer>>, BitGene>
\end_layout

\begin_layout Plain Layout

            codec = Codec.of(
\end_layout

\begin_layout Plain Layout

                Codecs.ofSubSet(SET),
\end_layout

\begin_layout Plain Layout

                Codecs.ofSubSet(SET),
\end_layout

\begin_layout Plain Layout

                Tuple::new
\end_layout

\begin_layout Plain Layout

            );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        final Engine<BitGene, Integer> engine = Engine
\end_layout

\begin_layout Plain Layout

            .builder(Main::fitness, codec)
\end_layout

\begin_layout Plain Layout

            .build();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        final Phenotype<BitGene, Integer> pt = engine.stream()
\end_layout

\begin_layout Plain Layout

            .limit(100)
\end_layout

\begin_layout Plain Layout

            .collect(EvolutionResult.toBestPhenotype());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // Use the codec for converting the result 'Genotype'.
\end_layout

\begin_layout Plain Layout

        final Tuple<ISeq<Integer>, ISeq<Integer>> result =
\end_layout

\begin_layout Plain Layout

            codec.decoder().apply(pt.genotype());
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you have to combine more than one
\family typewriter
 Codec
\family default
 into one, you have to use the second, more general,
\emph on
 combining
\emph default
 function:
\family typewriter
 Codec\SpecialChar softhyphen
::of(\SpecialChar softhyphen
ISeq<Codec<?, G>>,\SpecialChar softhyphen
 Function<Object[], T>\SpecialChar softhyphen
)
\family default
.
 The example above shows how to use the general combining function.
 It is just a little bit more verbose and requires explicit casts for the
\emph on
 sub-codec
\emph default
 types.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Codec<Triple<Long, Long, Long>, LongGene>
\end_layout

\begin_layout Plain Layout

    codec = Codec.of(ISeq.of(
\end_layout

\begin_layout Plain Layout

        Codecs.ofScalar(LongRange.of(0, 100)),
\end_layout

\begin_layout Plain Layout

        Codecs.ofScalar(LongRange.of(0, 1000)),
\end_layout

\begin_layout Plain Layout

        Codecs.ofScalar(LongRange.of(0, 10000))),
\end_layout

\begin_layout Plain Layout

        values -> {
\end_layout

\begin_layout Plain Layout

            final Long first = (Long)values[0];
\end_layout

\begin_layout Plain Layout

            final Long second = (Long)values[1];
\end_layout

\begin_layout Plain Layout

            final Long third = (Long)values[2];
\end_layout

\begin_layout Plain Layout

            return new Triple<>(first, second, third);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Invertible codec
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Invertible codec
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 InvertibleCodec
\family default
 extends the
\family typewriter
 Codec
\family default
 interface and allows to create a
\family typewriter
 Genotype
\family default
 from a given value of the native problem domain.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface InvertibleCodec<T, G extends Gene<?, G>>
\end_layout

\begin_layout Plain Layout

    extends Codec<T, G>
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    Function<T, Genotype<G>> encoder();
\end_layout

\begin_layout Plain Layout

    default Genotype<G> encode(final T value) {...}
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
InvertibleCodec
\family default
 interface
\begin_inset CommandInset label
LatexCommand label
name "lis:InvertibleCodec-interface"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:InvertibleCodec-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the additional methods of the
\family typewriter
 Invert\SpecialChar softhyphen
ible\SpecialChar softhyphen
Codec
\family default
 interface.
 Creating a
\family typewriter
 Geno\SpecialChar softhyphen
type
\family default
 from a given domain value simplifies the implementation of the
\family typewriter
 Const\SpecialChar softhyphen
raint\SpecialChar softhyphen
::repair
\family default
 method.
 Most of the factory methods in the
\family typewriter
 Codecs
\family default
 class will return
\family typewriter
 Invert\SpecialChar softhyphen
ible\SpecialChar softhyphen
Codec
\family default
 instances.
 The
\family typewriter
 encoder
\family default
 function is not necessarily the inverse of the
\family typewriter
 decoder
\family default
 function of the
\family typewriter
 Codec
\family default
 interface.
 This is the case if more then one
\family typewriter
 Genotype
\family default
 maps to the same value of the problem domain.
\end_layout

\begin_layout Section
Problem
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Problem
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Problem
\family default
 interface is a further abstraction level, which allows you to
\emph on
 bind
\emph default
 the problem encoding and the fitness function into one data structure.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface Problem<
\end_layout

\begin_layout Plain Layout

    T,
\end_layout

\begin_layout Plain Layout

    G extends Gene<?, G>,
\end_layout

\begin_layout Plain Layout

    C extends Comparable<? super C>
\end_layout

\begin_layout Plain Layout

> {
\end_layout

\begin_layout Plain Layout

    Function<T, C> fitness();
\end_layout

\begin_layout Plain Layout

    Codec<T, G> codec();
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
Problem
\family default
 interface
\begin_inset CommandInset label
LatexCommand label
name "lis:Problem-interface"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Problem-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the
\family typewriter
 Problem
\family default
 interface.
 The generic type
\family typewriter
 T
\family default
 represents the type of the
\emph on
 native
\emph default
 problem domain.
 This is the argument type of the fitness
\family typewriter
Func\SpecialChar softhyphen
tion
\family default
, and
\family typewriter
 C
\family default
 the
\family typewriter
 Comparable
\family default
 result of the fitness
\family typewriter
Func\SpecialChar softhyphen
tion
\family default
.

\family typewriter
 G
\family default
 is the
\family typewriter
 Gene
\family default
 type, which is used by the evolution
\family typewriter
 Engine
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

// Definition of the Ones counting problem.
\end_layout

\begin_layout Plain Layout

final Problem<ISeq<BitGene>, BitGene, Integer> ONES_COUNTING =
\end_layout

\begin_layout Plain Layout

    Problem.of(
\end_layout

\begin_layout Plain Layout

        // Fitness Function<ISeq<BitGene>, Integer>
\end_layout

\begin_layout Plain Layout

        genes -> (int)genes.stream()
\end_layout

\begin_layout Plain Layout

            .filter(BitGene::bit).count(),
\end_layout

\begin_layout Plain Layout

        Codec.of(
\end_layout

\begin_layout Plain Layout

            // Genotype Factory<Genotype<BitGene>>
\end_layout

\begin_layout Plain Layout

            Genotype.of(BitChromosome.of(20, 0.15)),
\end_layout

\begin_layout Plain Layout

            // Genotype conversion
\end_layout

\begin_layout Plain Layout

            // Function<Genotype<BitGene>, <BitGene>>
\end_layout

\begin_layout Plain Layout

            gt -> gt.chromosome().toSeq()
\end_layout

\begin_layout Plain Layout

        )
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Engine creation for Problem solving.
\end_layout

\begin_layout Plain Layout

final Engine<BitGene, Integer> engine = Engine
\end_layout

\begin_layout Plain Layout

    .builder(ONES_COUNTING)
\end_layout

\begin_layout Plain Layout

    .populationSize(150)
\end_layout

\begin_layout Plain Layout

    .survivorsSelector(newTournamentSelector<>(5))
\end_layout

\begin_layout Plain Layout

    .offspringSelector(new RouletteWheelSelector<>())
\end_layout

\begin_layout Plain Layout

    .alterers(
\end_layout

\begin_layout Plain Layout

        new Mutator<>(0.03),
\end_layout

\begin_layout Plain Layout

        new SinglePointCrossover<>(0.125))
\end_layout

\begin_layout Plain Layout

    .build();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The listing above shows how a new
\family typewriter
 Engine
\family default
 is created by using a predefined
\family typewriter
 Problem
\family default
 instance.
 This allows the complete decoupling of problem and
\family typewriter
 Engine
\family default
 definition.
\end_layout

\begin_layout Section
Constraint
\begin_inset CommandInset label
LatexCommand label
name "subsec:Constraint"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Constraint
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Constraints delimit the feasible space of solutions of an optimization problem
 and are considered in evolutionary algorithms
\begin_inset CommandInset citation
LatexCommand cite
key "Datta2014,Mezura-Montes2009,Coello2002,Michalewicz1995ASO"
literal "false"

\end_inset

.
 This influence the desirability of each possible solution.
 If the constraints are satisfied, the solution is accepted and it is called
 a feasible solution; otherwise the solution is removed or modified.
 For a fitness function, 
\begin_inset Formula $f\left(\mathbf{x}\right)$
\end_inset

, the constraints are usually given as a list of inequalities,
\begin_inset Formula 
\begin{equation}
g_{i}\left(\mathbf{x}\right)\leq0,
\end{equation}

\end_inset

and a list of equations,
\begin_inset Formula 
\begin{equation}
h_{j}\left(\mathbf{x}\right)=0.
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/ConstraintSearchSpace.svg
	lyxscale 70
	width 90col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Constrained-search-space"

\end_inset

Constrained 2-dimensional search space
\end_layout

\end_inset


\end_layout

\end_inset

Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Constrained-search-space"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how the inequality, 
\begin_inset Formula $4x+7y-32\leq0$
\end_inset

, divides the search space into a feasible and an infeasible part.
 There are different approaches for handling constraints.

\emph on
 Penalty methods
\emph default
 try to convert a constrained optimization problem into an unconstrained
 one by incorporating its constraints into the fitness function.

\emph on
 Transformation methods
\emph default
 try to map the feasible region into a regular mapped space while preserving
 the feasibility somehow.
 The
\family typewriter
 Constraint
\family default
 interface of
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 takes the second approach and tries to preserve feasibility through a
\emph on
 repair
\emph default
 step for invalid candidate solutions.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../resources/graphic/Aldus_leaf_unicode2766.svg
	lyxscale 20
	height 12pt

\end_inset


\end_layout

\begin_layout Standard
Usually, a given problem should be encoded in a way, that it is not possible
 for the evolution
\family typewriter
 Engine
\family default
 to create invalid individuals (
\family typewriter
Genotypes
\family default
).
 Some possible encodings for common data structures are described in section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Encoding"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The
\family typewriter
 Engine
\family default
 creates new individuals in the altering step, by rearranging (or creating
 new)
\family typewriter
 Genes
\family default
 within a
\family typewriter
 Chromosome
\family default
.
 Since a
\family typewriter
 Genotype
\family default
 is treated as valid if every single
\family typewriter
 Gene
\family default
 in every
\family typewriter
 Chromosome
\family default
 is valid, the validity property of the
\family typewriter
 Gene
\family default
s determines the validity of the whole
\family typewriter
 Genotype
\family default
.
 The
\family typewriter
 Engine
\family default
 tries to create only valid individuals when creating the initial population
 and when it replaces
\family typewriter
 Genotype
\family default
s which has been destroyed by the altering step.
 Individuals which has exceeded its lifetime are also replaced by new ones.
 Although this behavior will work for most
\family typewriter
 Genotype
\family default
s, it is still possible that invalid individuals will be created during
 the evolution.
 If you need a more advanced validation strategy, the
\family typewriter
 Con\SpecialChar softhyphen
straint
\family default
 interface comes into play.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface Constraint<
\end_layout

\begin_layout Plain Layout

    G extends Gene<?, G>,
\end_layout

\begin_layout Plain Layout

    C extends Comparable<? super C>
\end_layout

\begin_layout Plain Layout

> {
\end_layout

\begin_layout Plain Layout

    boolean test(Phenotype<G, C> ind);
\end_layout

\begin_layout Plain Layout

	Phenotype<G, C> repair(Phenotype<G, C> ind, long gen);
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
Constraint
\family default
 interface
\begin_inset CommandInset label
LatexCommand label
name "lis:Constraint-interface"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Constraint"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the definition of the
\family typewriter
 Constraint
\family default
 interface.
 The
\family typewriter
 test
\family default
 method of the interface checks the validity of the given
\family typewriter
 Pheno\SpecialChar softhyphen
type
\family default
 and the
\family typewriter
 repair
\family default
 method creates a new individual using the invalid individual as template.
\end_layout

\begin_layout Standard
The
\family typewriter
 Retry\SpecialChar softhyphen
Constraint
\family default
 class is the default implementation of the
\family typewriter
 Constraint
\family default
 interface.
 It implements the
\family typewriter
 repair
\family default
 method by creating new
\family typewriter
 Phenotype
\family default
s until the created individual is valid.
 Although this approach seems a little bit simplistic, it has an important
 and desirable property: the
\emph on
 repaired
\emph default
 individuals follow the same distribution then the original.
 This means, that no part of the problem domain is left out or is
\emph on
 overcrowded
\emph default
.
 The number of necessary retries is also not a problem, for
\emph on
 normal
\emph default
 constraints.
 For example, the probability that a randomly created point lies outside
 the unit circle is 
\begin_inset Formula $1-\frac{\pi}{4}\thickapprox0.2146$
\end_inset

.
 This leads to a failure probability after 10 retries, which is the default
 value of the
\family typewriter
 Retry\SpecialChar softhyphen
Cons\SpecialChar softhyphen
traint
\family default
, of 
\begin_inset Formula $\left(1-\frac{\pi}{4}\right)^{10}\thickapprox0.000000207$
\end_inset

.
 You can parameterize a different
\family typewriter
 Const\SpecialChar softhyphen
raint
\family default
 definition with the
\family typewriter
 constraint
\family default
 method of the
\family typewriter
 Engine\SpecialChar softhyphen
.Builder
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
The behavior of the
\family typewriter
 Phenotype::isValid
\family sans
 method is overridden by the
\family typewriter
 Constraint
\family sans
 interface.
 A
\family typewriter
 Phenotype
\family sans
 is treated as invalid if the
\family typewriter
 Constraint::tes
\family sans
t method returns false, even if the
\family typewriter
 Phenotype::isValid
\family sans
 method returns true.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Domain-with-retry-constraint"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the distribution of the domain points in our
\emph on
 unit circle
\emph default
 example.
 Rejecting invalid points and recreating new ones leads to an uniform point
 distribution.
 Every part of the domain is explored with the same probability.
 This is a very welcome property of the
\family typewriter
 Retry\SpecialChar softhyphen
Cons\SpecialChar softhyphen
traint
\family default
 strategy.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/circle_points_retry.svg
	lyxscale 70
	width 60col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Domain-with-retry-constraint"

\end_inset

Domain points with retry-constraint
\end_layout

\end_inset


\end_layout

\end_inset

Trying to create only valid domain points can sometimes lead to a nonuniform
 distribution.
 This can be seen in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Only-valid-domain"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The points were created by choosing the angle, 
\begin_inset Formula $\alpha$
\end_inset

, and the radius, 
\begin_inset Formula $r$
\end_inset

, randomly, and calculate the point coordinates, 
\begin_inset Formula $\mathbf{x}=\left(r\cos\alpha,r\sin\alpha\right),$
\end_inset

where 
\begin_inset Formula $r\in\left[-1,1\right]$
\end_inset

 and 
\begin_inset Formula $\alpha\in\left[0,2\pi\right)$
\end_inset

.
 As you can see, the points near the center are much denser than at the
 domain border.
 This makes it harder for the
\family typewriter
 Engine
\family default
 to explore the whole problem domain.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/circle_points_encoding.svg
	lyxscale 70
	width 60col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Only-valid-domain"

\end_inset

Only valid domain points
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 RetryConstraint
\family default
 is the default implementation of the
\family typewriter
 Con\SpecialChar softhyphen
st\SpecialChar softhyphen
raint
\family default
 interface, but it might not be the best one for every given problem.
 If it is possible, it is better to try to repair an invalid
\family typewriter
 Pheno\SpecialChar softhyphen
type
\family default
 instead of creating a new one.
 Suppose you need to optimize the fitness function, 
\begin_inset Formula $f:\mathbb{R}^{3}\rightarrow\mathbb{R}$
\end_inset

, with the following constraints:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
x_{1}+x_{2}-1 & \leq & 0\\
x_{2}\cdot x_{3}-0.5 & \leq & 0.
\end{eqnarray*}

\end_inset

A repairing
\family typewriter
 Constraint
\family default
 implementation checks the validity of a
\family typewriter
 Pheno\SpecialChar softhyphen
type
\family default
 and repairs it, if it's invalid.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public class RepairingConstraint
\end_layout

\begin_layout Plain Layout

    implements Constraint<DoubleGene, Double>
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public boolean test(Phenotype<DoubleGene, Double> pt) {
\end_layout

\begin_layout Plain Layout

        return isValid(
\end_layout

\begin_layout Plain Layout

            pt.genotype().chromosome()
\end_layout

\begin_layout Plain Layout

                .as(DoubleChromosome.class)
\end_layout

\begin_layout Plain Layout

                .toArray()
\end_layout

\begin_layout Plain Layout

        );
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    static boolean isValid(double[] x) {
\end_layout

\begin_layout Plain Layout

        return x[0] + x[1] <= 1 && x[1]*x[2] <= 0.5;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public Phenotype<DoubleGene, Double> repair(
\end_layout

\begin_layout Plain Layout

        final Phenotype<DoubleGene, Double> pt,
\end_layout

\begin_layout Plain Layout

        final long generation
\end_layout

\begin_layout Plain Layout

    ) {
\end_layout

\begin_layout Plain Layout

        final double[] x = pt.genotype().chromosome()
\end_layout

\begin_layout Plain Layout

            .as(DoubleChromosome.class)
\end_layout

\begin_layout Plain Layout

            .toArray();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        return newPhenotype(repair(x), generation);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    static double[] repair(final double[] x) {
\end_layout

\begin_layout Plain Layout

        if (x[0] + x[1] > 1) x[0] = 1 - x[1];
\end_layout

\begin_layout Plain Layout

        if (x[1]*x[2] > 0.5) x[2] = 0.5/x[1];
\end_layout

\begin_layout Plain Layout

        return x;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The implementation of the new depends on your actual encoding and might
 look like this
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Phenotype<DoubleGene, Double> newPhenotype(double[] r, long gen) {
\end_layout

\begin_layout Plain Layout

    final Genotype<DoubleGene> gt = Genotype.of(
\end_layout

\begin_layout Plain Layout

        DoubleChromosome.of(
\end_layout

\begin_layout Plain Layout

            DoubleStream.of(r).boxed()
\end_layout

\begin_layout Plain Layout

                .map(v -> DoubleGene
\end_layout

\begin_layout Plain Layout

                    .of(v, DoubleRange.of(0, 1)))
\end_layout

\begin_layout Plain Layout

                .collect(ISeq.toISeq())
\end_layout

\begin_layout Plain Layout

        )
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

    return Phenotype.of(gt, gen);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Writing a repair method this way is quite tedious.
 The
\family typewriter
 Invertible\SpecialChar softhyphen
Co\SpecialChar softhyphen
dec
\family default
 interface, see section
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:InvertibleCodec-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

, allows to implement the repair function in a more natural way.
 Imagine you want to encode a split range, as shown in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Split-range-domain"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Only the values between 
\begin_inset Formula $\left[0,2\right)$
\end_inset

 and 
\begin_inset Formula $\left[8,10\right)$
\end_inset

 are valid.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/RepairConstraint.svg
	lyxscale 80
	width 65text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Split-range-domain"

\end_inset

Split range domain
\end_layout

\end_inset


\end_layout

\end_inset

The following listing shows how to create a constraint, which fulfills the
 desired codec property.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final InvertibleCodec<Double, DoubleGene> codec =
\end_layout

\begin_layout Plain Layout

    Codecs.ofScalar(DoubleRange.of(0, 10));
\end_layout

\begin_layout Plain Layout

final Constraint<DoubleGene, Double> constraint = Constraint.of(
\end_layout

\begin_layout Plain Layout

    codec,
\end_layout

\begin_layout Plain Layout

    v -> v < 2 || v >= 8,
\end_layout

\begin_layout Plain Layout

    v -> {
\end_layout

\begin_layout Plain Layout

        if (v >= 2 && v < 8) {
\end_layout

\begin_layout Plain Layout

            return v < 5 ? ((v - 2)/3)*2 : ((8 - v)/3)*2 + 8;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        return v;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

Using an
\family typewriter
 InvertibleCodec
\family default
 instead of a
\family typewriter
 Codec
\family default
, the repair function can be expressed in the problem domain.
 In the given example, the repair function maps the invalid range 
\begin_inset Formula $\left[2,5\right)$
\end_inset

 to 
\begin_inset Formula $\left[0,2\right)$
\end_inset

 and the invalid range 
\begin_inset Formula $\left[5,8\right)$
\end_inset

 to 
\begin_inset Formula $\left[8,10\right)$
\end_inset

.
 An alternative implementation for this
\family typewriter
 Codec
\family default
 can also be created by mapping the scalar range
\family typewriter
 Codec
\family default
 directly, as shown in the following listing.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Codec<Double, DoubleGene> codec = Codecs
\end_layout

\begin_layout Plain Layout

    .ofScalar(DoubleRange.of(0, 10))
\end_layout

\begin_layout Plain Layout

    .map(v -> {
\end_layout

\begin_layout Plain Layout

            if (v >= 2 && v < 8) {
\end_layout

\begin_layout Plain Layout

                return v < 5 ? ((v - 2)/3)*2 : ((8 - v)/3)*2 + 8;
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

            return v;
\end_layout

\begin_layout Plain Layout

        });
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../resources/graphic/Aldus_leaf_unicode2766.svg
	lyxscale 20
	height 12pt

\end_inset


\end_layout

\begin_layout Standard
Creating a new evolution
\family typewriter
 Engine
\family default
 with a
\family typewriter
 Constraint
\family default
, only repairs individuals which has been destroyed by the alterer step.
 It is still possible that the defined
\family typewriter
 Genotype
\family default
 factory will create invalid individuals.
 If your
\family typewriter
 Genotype
\family default
 factory can't guarantee that only valid individuals are created, an additional
 setup step is necessary.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Constraint<DoubleGene, Double> constraint = ...;
\end_layout

\begin_layout Plain Layout

final Factory<Genotype<DoubleGene>> gtf = ...;
\end_layout

\begin_layout Plain Layout

final Engine<DoubleGene, Double> engine = Engine
\end_layout

\begin_layout Plain Layout

    .builder(fitness, constraint.constrain(gtf))
\end_layout

\begin_layout Plain Layout

    .constraint(constraint)
\end_layout

\begin_layout Plain Layout

    .build();
\end_layout

\end_inset

The
\family typewriter
 Constraint::constrain
\family default
 method takes an unreliable genotype factory and wraps it into a reliable
 one.
 As long as the constraint is implemented
\emph on
 correctly
\emph default
, only valid individuals are generated by the
\family typewriter
 Engine
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
The
\family typewriter
 Constraint
\family sans
, defined in the Engine, only fixes individuals which has been destroyed
 during the evolution process.
 Individuals, created by the
\family typewriter
 Genotype
\family sans
 factory may still be invalid.
 Use the
\family typewriter
 Constraint::constrain
\family sans
 method for creating safe
\family typewriter
 Genotype
\family sans
 factories.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Termination
\begin_inset CommandInset label
LatexCommand label
name "subsec:Termination"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Termination
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Termination is the criterion by which the evolution stream decides whether
 to continue or truncate the stream.
 This section gives a deeper insight into the different ways of terminating
 or truncating the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
.
 The
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 of the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library offers an additional method for limiting the evolution.
 With the
\family typewriter
 limit(Predicate<\SpecialChar softhyphen
Evolution\SpecialChar softhyphen
Result<G,C>\SpecialChar softhyphen
>)
\family default
 method it is possible to use more advanced termination strategies.
 If the predicate, given to the
\family typewriter
 limit
\family default
 function, returns false, the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 is truncated.
 The
\family typewriter
 Evolution\SpecialChar softhyphen
Stream\SpecialChar softhyphen
.limit(r -> true)
\family default
 will create an infinite evolution stream.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
The predicate given to the
\family typewriter
 EvolutionStream::limit
\family sans
 function must return
\emph on
 false
\emph default
 for truncating the evolution stream.
 If it returns
\emph on
 true
\emph default
, the evolution is continued.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All termination strategies described in the following sections are part
 of the library and can be created by factory methods of the
\family typewriter
 io.jenetics\SpecialChar softhyphen
.eng\SpecialChar softhyphen
ine\SpecialChar softhyphen
.Limits
\family default
 class.
 The termination strategies were tested by solving the Knapsack problem
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The actual implementation used for the termination tests can be found in
 the Github repository:
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/jenetics/jenetics/blob/master/jenetics.example/src/main/java/io
/jenetics/example/Knapsack.java
\end_layout

\end_inset


\end_layout

\end_inset

 (see section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:0/1-Knapsack-example"
plural "false"
caps "false"
noprefix "false"

\end_inset

) with 
\begin_inset Formula $250$
\end_inset

 items.
 This makes it a real problem with a search space size of 
\begin_inset Formula $2^{250}\thickapprox10^{75}$
\end_inset

 elements.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle" tabularwidth="90text%">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="60text%">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Population size:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
150
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Survivors selector:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
TournamentSelector<>(5)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Offspring selector:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
RouletteWheelSelector<>()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Alterers:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Mutator<>(0.03)
\family default
 and
\family typewriter
 SinglePointCrossover<>(0.125)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Knapsack-evolution-parameters"

\end_inset

Knapsack evolution parameters
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Table
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Knapsack-evolution-parameters"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the evolution parameters used for the termination tests.
 To make the tests comparable, all test runs use the same evolution parameters
 and the very same set of knapsack items.
 Each termination test was repeated 1,000 times, which should give enough
 data to draw the given candlestick diagrams.
\end_layout

\begin_layout Standard
Some of the implemented termination strategies need to maintain an internal
 state.
 These strategies can't be reused in different evolution streams.
 To be on the safe side, it is recommended to always create a
\family typewriter
 Predicate
\family default
 instance for each stream.
 Calling
\family typewriter
 Stream\SpecialChar softhyphen
.limit\SpecialChar softhyphen
(Limits\SpecialChar softhyphen
::by
\emph on
\SpecialChar softhyphen
Termination\SpecialChar softhyphen
Strategy
\emph default
)
\family default
 will always work as expected.
\end_layout

\begin_layout Subsection
Fixed generation
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Termination!Fixed generation
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Fixed generation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The simplest way for terminating the evolution process, is to define a maximal
 number of generations on the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
.
 It just uses the existing
\family typewriter
 limit
\family default
 method of the Java
\family typewriter
 Stream
\family default
 interface.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final long MAX_GENERATIONS = 100;
\end_layout

\begin_layout Plain Layout

final EvolutionStream<DoubleGene, Double> stream = engine
\end_layout

\begin_layout Plain Layout

    .stream()
\end_layout

\begin_layout Plain Layout

    .limit(MAX_GENERATIONS);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This kind of termination method can always be applied—usually additional
 with other evolution terminators—, to guarantee the truncation of the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 and to define an upper limit of the executed generations.
 Additionally, the
\family typewriter
 Limits\SpecialChar softhyphen
::by\SpecialChar softhyphen
Fixed\SpecialChar softhyphen
Gene\SpecialChar softhyphen
ration(\SpecialChar softhyphen
long\SpecialChar softhyphen
)
\family default
 predicate can be used instead of the
\family typewriter
 Stream\SpecialChar softhyphen
::limit(\SpecialChar softhyphen
long\SpecialChar softhyphen
)
\family default
 method.
 This predicate is mainly there for the completion reason and behaves exactly
 as the
\family typewriter
 Stream\SpecialChar softhyphen
::limit(\SpecialChar softhyphen
long\SpecialChar softhyphen
)
\family default
 function, except for the number of evaluations performed by the resulting
 stream.
 The evaluation of the population is
\emph on
 max generations
\emph default
 + 1.
 This is because the limiting predicate works on the
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 object, which guarantees to contain an
\emph on
 evaluated
\emph default
 population.
 That means, that the population must be evaluated at least once, even for
 a generation limit of zero.
 If this is an unacceptable performance penalty, better use the
\family typewriter
 Stream\SpecialChar softhyphen
::limit(\SpecialChar softhyphen
long\SpecialChar softhyphen
)
\family default
 function instead.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/Knapsack-fixed_generation_termination.svg
	lyxscale 80
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Fixed-generation-diagram"

\end_inset

Fixed generation termination
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fixed-generation-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the best fitness values of the used Knapsack problem after a given
 number of generations, whereas the candlestick points represents the
\emph on
 min
\emph default
,
\emph on
 
\begin_inset Formula $25^{th}$
\end_inset

 percentile
\emph default
,
\emph on
 median
\emph default
,
\emph on
 
\begin_inset Formula $75^{th}$
\end_inset

 percentile
\emph default
 and
\emph on
 max
\emph default
 fitness after 
\begin_inset Formula $250$
\end_inset

 repetitions per generation.
 The solid line shows for the
\emph on
 mean
\emph default
 of the best fitness values.
 For a small increase of the fitness value, the needed generations grows
 exponentially.
 This is especially the case when the fitness is approaching its
\emph on
 maximal
\emph default
 value.
\end_layout

\begin_layout Subsection
Steady fitness
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Termination!Steady fitness
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Steady fitness
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The steady fitness strategy truncates the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 if its best fitness hasn't changed after a given number of generations.
 The predicate maintains an internal state—the number of generations with
 non increasing fitness—, and must be newly created for every
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final class SteadyFitnessLimit<C extends Comparable<? super C>>
\end_layout

\begin_layout Plain Layout

    implements Predicate<EvolutionResult<?, C>>
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    private final int _generations;
\end_layout

\begin_layout Plain Layout

    private boolean _proceed = true;
\end_layout

\begin_layout Plain Layout

    private int _stable = 0;
\end_layout

\begin_layout Plain Layout

    private C _fitness;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public SteadyFitnessLimit(final int generations) {
\end_layout

\begin_layout Plain Layout

        _generations = generations;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public boolean test(final EvolutionResult<?, C> er) {
\end_layout

\begin_layout Plain Layout

        if (!_proceed) return false;
\end_layout

\begin_layout Plain Layout

        if (_fitness == null) {
\end_layout

\begin_layout Plain Layout

            _fitness = er.bestFitness();
\end_layout

\begin_layout Plain Layout

            _stable = 1;
\end_layout

\begin_layout Plain Layout

		} else {
\end_layout

\begin_layout Plain Layout

            final Optimize opt = result.optimize();
\end_layout

\begin_layout Plain Layout

            if (opt.compare(_fitness, er.bestFitness()) >= 0) {
\end_layout

\begin_layout Plain Layout

                _proceed = ++_stable <= _generations;
\end_layout

\begin_layout Plain Layout

            } else {
\end_layout

\begin_layout Plain Layout

                _fitness = er.bestFitness();
\end_layout

\begin_layout Plain Layout

                _stable = 1;
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        return _proceed;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Steady-fitness-limit"

\end_inset

Steady fitness
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Steady-fitness-limit"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the implementation of the
\family typewriter
 Limits\SpecialChar softhyphen
::byStea\SpecialChar softhyphen
dy\SpecialChar softhyphen
Fit\SpecialChar softhyphen
ness(int)
\family default
 in the
\family typewriter
 io.jenetics\SpecialChar softhyphen
.engine
\family default
 package.
 It should give you an impression of how to implement own termination strategies
, which possible holds an internal state.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DobuleGene, Double> engine = ...
\end_layout

\begin_layout Plain Layout

final EvolutionStream<DoubleGene, Double> stream = engine
\end_layout

\begin_layout Plain Layout

    .stream()
\end_layout

\begin_layout Plain Layout

    .limit(Limits.bySteadyFitness(15));
\end_layout

\end_inset

The steady fitness terminator can be created by the
\family typewriter
 by\SpecialChar softhyphen
Steady\SpecialChar softhyphen
Fitness
\family default
 factory method of the
\family typewriter
 io.jenetics.\SpecialChar softhyphen
engine.\SpecialChar softhyphen
Limits
\family default
 class.
 In the example above, the evolution stream is terminated after 
\begin_inset Formula $15$
\end_inset

 stable generations.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/Knapsack-steady_fitness_termination.svg
	lyxscale 80
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Steady-fitness-diagram"

\end_inset

Steady fitness termination
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Steady-fitness-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the actual total executed generation depending on the desired number
 of steady fitness generations.
 The variation of the total generation is quite big, as shown by the candlestick
s.
 Though the variation can be quite big—the termination test has been repeated
 
\begin_inset Formula $250$
\end_inset

 times for each data point—, the tests showed that the steady fitness terminatio
n strategy always terminated, at least for the given test setup.
 The lower diagram give an overview of the fitness progression.
 Only the mean values of the maximal fitness is shown.
\end_layout

\begin_layout Subsection
Evolution time
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Termination!Evolution time
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Evolution time
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This termination strategy stops the evolution when the elapsed evolution
 time exceeds an user specified maximal value.
 The
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 is only truncated at the end of a generation and will not interrupt the
 current evolution step.
 A maximal evolution time of zero
\emph on
 ms
\emph default
 will at least evaluate one generation.
 In a time critical environment, where a solution must be found within a
 maximal time period, this terminator lets you define the desired guarantees.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DobuleGene, Double> engine = ...
\end_layout

\begin_layout Plain Layout

final EvolutionStream<DoubleGene, Double> stream = engine
\end_layout

\begin_layout Plain Layout

    .stream()
\end_layout

\begin_layout Plain Layout

    .limit(Limits.byExecutionTime(Duration.ofMillis(500));
\end_layout

\end_inset

In the code example above, the
\family typewriter
 by\SpecialChar softhyphen
Execution\SpecialChar softhyphen
Time(\SpecialChar softhyphen
Duration\SpecialChar softhyphen
)
\family default
 method is used for creating the termination object.
 Another method,
\family typewriter
 by\SpecialChar softhyphen
Execution\SpecialChar softhyphen
Time\SpecialChar softhyphen
(Du\SpecialChar softhyphen
ration, Instant\SpecialChar softhyphen
Source)
\family default
, lets you define the
\family typewriter
 java.\SpecialChar softhyphen
time.\SpecialChar softhyphen
In\SpecialChar softhyphen
stant\SpecialChar softhyphen
Source
\family default
, which is used for measure the execution time.

\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 uses the nano precision clock
\family typewriter
 io.je\SpecialChar softhyphen
ne\SpecialChar softhyphen
tics.\SpecialChar softhyphen
util.\SpecialChar softhyphen
Nano\SpecialChar softhyphen
Clock
\family default
 for measuring the time.
 To have the possibility to define a different
\family typewriter
 Instant\SpecialChar softhyphen
Source
\family default
 implementation is especially useful for testing purposes.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/Knapsack-execution_time_termination.svg
	lyxscale 80
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Execution-time-diagram"

\end_inset

Execution time termination
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Execution-time-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the evaluated generations depending on the execution time.
 Except for very small execution times, the evaluated generations per time
 unit stays quite stable.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
While running the tests, all other CPU intensive process has been stopped.
 The measuring started after a warm-up phase.
\end_layout

\end_inset

 That means that a doubling of the execution time will double the number
 of evolved generations.
\end_layout

\begin_layout Subsection
Fitness threshold
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Termination!Fitness threshold
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Fitness threshold
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A termination method that stops the evolution when the best fitness in the
 current population becomes less than the specified fitness threshold and
 the objective is set to minimize the fitness.
 This termination method also stops the evolution when the best fitness
 in the current population becomes greater than the specified fitness threshold
 when the objective is to maximize the fitness.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DobuleGene, Double> engine = ...
\end_layout

\begin_layout Plain Layout

final EvolutionStream<DoubleGene, Double> stream = engine
\end_layout

\begin_layout Plain Layout

    .stream()
\end_layout

\begin_layout Plain Layout

    .limit(Limits.byFitnessThreshold(10.5)
\end_layout

\begin_layout Plain Layout

    .limit(5000);
\end_layout

\end_inset

When limiting the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 by a fitness threshold, you have to have knowledge about the expected maximal
 fitness.
 This can be the case if you are minimizing an error function with a known
 optimal value of zero.
 If there is no such knowledge, it is advisable to add an additional fixed
 sized generation limit as a safety net.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/Knapsack-fitness_threshold_termination.svg
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Fitness-threshold-diagram"

\end_inset

Fitness threshold termination
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fitness-threshold-diagram"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows executed generations depending on the minimal fitness value.
 The total generations grow exponentially with the desired fitness value.
 This means, that this termination strategy will (practically) not terminate,
 if the value for the fitness threshold is chosen too high.
 And it will definitely not terminate if the fitness threshold is higher
 than the global maximum of the fitness function.
 It will be a
\emph on
 perfect
\emph default
 strategy if you can define some
\emph on
 good enough
\emph default
 fitness value, which can be
\emph on
 easily
\emph default
 achieved.
\end_layout

\begin_layout Subsection
Fitness convergence
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Termination!Fitness convergence
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Fitness convergence
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this termination strategy, the evolution stops when the fitness is deemed
 as converged.
 Two filters of different lengths are used to smooth the best fitness across
 the generations.
 When the best smoothed fitness of the long filter is less than a specified
 percentage away from the best smoothed fitness from the short filter, the
 fitness is deemed as converged.

\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 offers a generic version fitness convergence predicate and a version where
 the smoothed fitness is the moving average of the used filters.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public static <N extends Number & Comparable<? super N>>
\end_layout

\begin_layout Plain Layout

Predicate<EvolutionResult<?, N>> byFitnessConvergence(
\end_layout

\begin_layout Plain Layout

    final int shortFilterSize,
\end_layout

\begin_layout Plain Layout

    final int longFilterSize,
\end_layout

\begin_layout Plain Layout

    final BiPredicate<DoubleMoments, DoubleMoments> proceed
\end_layout

\begin_layout Plain Layout

);
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:General-fitness-convergence"

\end_inset

General fitness convergence
\end_layout

\end_inset


\end_layout

\end_inset

Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:General-fitness-convergence"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the factory method which creates the
\emph on
 generic
\emph default
 fitness convergence predicate.
 This method allows to define the evolution termination according to the
 statistical moments of the short and long fitness filter.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public static <N extends Number & Comparable<? super N>>
\end_layout

\begin_layout Plain Layout

Predicate<EvolutionResult<?, N>> byFitnessConvergence(
\end_layout

\begin_layout Plain Layout

    final int shortFilterSize,
\end_layout

\begin_layout Plain Layout

    final int longFilterSize,
\end_layout

\begin_layout Plain Layout

    final double epsilon
\end_layout

\begin_layout Plain Layout

);
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Mean-fitness-convergence"

\end_inset

Mean fitness convergence
\end_layout

\end_inset


\end_layout

\end_inset

The second factory method (shown in listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Mean-fitness-convergence"
plural "false"
caps "false"
noprefix "false"

\end_inset

) creates a fitness convergence predicate, which uses the moving average
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Moving_average
\end_layout

\end_inset


\end_layout

\end_inset

 for the two filters.
 The smoothed fitness value is calculated as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\sigma_{F}(N)=\frac{1}{N}\sum_{i=0}^{N-1}F_{[G-i]}\label{eq:fitness-convergence-mean}
\end{equation}

\end_inset

where 
\begin_inset Formula $N$
\end_inset

 is the length of the filter, 
\begin_inset Formula $F_{[i]}$
\end_inset

 the fitness value at generation
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $G$
\end_inset

 the current generation.
 If the condition
\begin_inset Formula 
\begin{equation}
\frac{\left|\sigma_{F}(N_{S})-\sigma_{F}(N_{L})\right|}{\delta}<\epsilon\label{eq:fitness-convergence-term}
\end{equation}

\end_inset

is fulfilled, the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 is truncated.
 Where 
\begin_inset Formula $\delta$
\end_inset

 is defined as follows:
\begin_inset Formula 
\begin{equation}
\delta=\left\{ \begin{array}{ccc}
\max\left(\left|\sigma_{F}(N_{S})\right|,\left|\sigma_{F}(N_{L})\right|\right) & \mathtt{\mathrm{if}} & \neq0\\
1 & \mathrm{otherwise}
\end{array}\right..\label{eq:fitness-convergence-div}
\end{equation}

\end_inset


\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DobuleGene, Double> engine = ...
\end_layout

\begin_layout Plain Layout

final EvolutionStream<DoubleGene, Double> stream = engine
\end_layout

\begin_layout Plain Layout

    .stream()
\end_layout

\begin_layout Plain Layout

    .limit(Limits.byFitnessConvergence(10, 30, 10E-4);
\end_layout

\end_inset

For using the fitness convergence strategy you have to specify three parameters.
 The length of the short filter, 
\begin_inset Formula $N_{S}$
\end_inset

, the length of the long filter, 
\begin_inset Formula $N_{L}$
\end_inset

, and the relative difference between the smoothed fitness values, 
\begin_inset Formula $\epsilon$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/Knapsack-fitness_convergence_termination-10@30.svg
	lyxscale 80
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Fitness-convergence-diagram-10-30"

\end_inset

Fitness convergence termination:
\begin_inset Formula $N_{S}=10$
\end_inset

,
\begin_inset Formula $N_{L}=30$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fitness-convergence-diagram-10-30"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the termination behavior of the fitness convergence termination strategy.
 It can be seen that the minimum number of evolved generations is the length
 of the long filter, 
\begin_inset Formula $N_{L}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/Knapsack-fitness_convergence_termination-50@150.svg
	lyxscale 80
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Fitness-convergence-diagram-50-150"

\end_inset

Fitness convergence termination:
\begin_inset Formula $N_{S}=50$
\end_inset

,
\begin_inset Formula $N_{L}=150$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Fitness-convergence-diagram-50-150"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the generations needed for terminating the evolution for higher values
 of the 
\begin_inset Formula $N_{S}$
\end_inset

 and 
\begin_inset Formula $N_{L}$
\end_inset

 parameters.
\end_layout

\begin_layout Subsection
Population convergence
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Termination!Population convergence
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Population convergence
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This termination method stops the evolution when the population is deemed
 as converged.
 A population is deemed as converged when the average fitness across the
 current population is less than a user specified percentage away from the
 best fitness of the current population.
 The population is deemed as converged and the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 is truncated if
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{\left|f_{max}-\bar{f}\right|}{\delta}<\epsilon,
\end{equation}

\end_inset

where
\begin_inset Formula 
\begin{equation}
\bar{f}=\frac{1}{N}\sum_{i=0}^{N-1}f_{i},
\end{equation}

\end_inset


\begin_inset Formula 
\begin{equation}
f_{max}=\max_{i\in\left[0,N\right)}\left\{ f_{i}\right\} 
\end{equation}

\end_inset

and
\begin_inset Formula 
\begin{equation}
\delta=\left\{ \begin{array}{ccc}
\max\left(\left|f_{max}\right|,\left|\bar{f}\right|\right) & \mathtt{\mathrm{if}} & \neq0\\
1 & \mathrm{otherwise}
\end{array}\right..
\end{equation}

\end_inset


\begin_inset Formula $N$
\end_inset

 denotes the number of individuals of the population.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DobuleGene, Double> engine = ...
\end_layout

\begin_layout Plain Layout

final EvolutionStream<DoubleGene, Double> stream = engine
\end_layout

\begin_layout Plain Layout

    .stream()
\end_layout

\begin_layout Plain Layout

    .limit(Limits.byPopulationConvergence(0.1);
\end_layout

\end_inset

The
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 in the example above will terminate, if the difference between the population's
 fitness mean value and the maximal fitness value of the population is less
 than 
\begin_inset Formula $10\%$
\end_inset

.
\end_layout

\begin_layout Subsection
Gene convergence
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Termination!Gene convergence
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Gene convergence
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This termination strategy is different, in the sense that it takes the genes
 or alleles, respectively, for terminating the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
.
 In the gene convergence termination strategy the evolution stops when a
 specified percentage of the genes of a genotype are deemed as converged.
 A gene is treated as converged when the average value of that gene across
 all of the genotypes in the current population is less than a given percentage
 away from the maximum allele value across the genotypes.
\end_layout

\begin_layout Section
Reproducibility
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Reproducibility
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Engine!reproducible
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Evolution!reproducible
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Some problems can be defined with different kinds of fitness functions or
 encodings.
 Which combination works best can't usually be decided a priori.
 To choose one, some testing is needed.

\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 allows you to set up an evolution
\family typewriter
 Engine
\family default
 in a way that will produce the very same result on every run.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DoubleGene, Double> engine =
\end_layout

\begin_layout Plain Layout

    Engine.builder(fitnessFunction, codec)
\end_layout

\begin_layout Plain Layout

        .executor(Runnable::run)
\end_layout

\begin_layout Plain Layout

        .build();
\end_layout

\begin_layout Plain Layout

final EvolutionResult<DoubleGene, Double> result =
\end_layout

\begin_layout Plain Layout

    RandomRegistry.with(new Random(456), r ->
\end_layout

\begin_layout Plain Layout

        engine.stream(population)
\end_layout

\begin_layout Plain Layout

            .limit(100)
\end_layout

\begin_layout Plain Layout

            .collect(EvolutionResult.toBestEvolutionResult())
\end_layout

\begin_layout Plain Layout

    );
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Reproducible-evolution-Engine"

\end_inset

Reproducible evolution
\family typewriter
Engine
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand vref
reference "lis:Reproducible-evolution-Engine"

\end_inset

 shows the basic setup of such a reproducible evolution
\family typewriter
 Engine
\family default
.
 Firstly, you have to make sure that all evolution steps are executed serially.
 This is done by configuring a single threaded executor.
 In the simplest case the evolution is performed solely on the main thread—
\family typewriter
Runnable::run
\family default
.
 If the evolution
\family typewriter
 Engine
\family default
 uses more than one worker thread, the reproducibility is no longer guaranteed.
 The second step configures the random generator, the evolution
\family typewriter
 Engine
\family default
 is working with.
 Just
\emph on
 wrap
\emph default
 the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 execution in a
\family typewriter
 RandomRegistry::with
\family default
 block.
 Additionally you can start the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 with a predefined, initial population.
 Once you have setup the
\family typewriter
 Engine
\family default
, you can vary the fitness function and the
\family typewriter
 Codec
\family default
 and compare the results.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
If you are using user defined implementations of the
\family typewriter
 Gene
\family sans
 and
\family typewriter
 Chromosome
\family sans
 interface, make sure to obtain the
\family typewriter
 Random\SpecialChar softhyphen
Generator
\family sans
 object from the
\family typewriter
 RandomRegistry
\family sans
.
 This is also required for every initialization code used in your problem
 implementation.
 Also check your code for hidden nondeterministic parts, e.
\begin_inset space ~
\end_inset

g.
\family typewriter
Collections::shuffle
\family sans
 method.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Evolution performance
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Evolution!performance
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This section contains an empirical proof, that evolutionary selectors deliver
 significantly better fitness results than a random search.
 The
\family typewriter
 Monte\SpecialChar softhyphen
Carlo\SpecialChar softhyphen
Selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Monte Carlo selector
\end_layout

\end_inset


\family default
 is used for creating the comparison (random search) fitness values.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/Knapsack-selector_comparison.svg
	lyxscale 80
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Selector-performance-Knapsack"

\end_inset

Selector performance (Knapsack)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Selector-performance-Knapsack"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the evolution performance of the
\family typewriter
 Selec\SpecialChar softhyphen
tor
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The termination tests are using a
\family typewriter
 Tournament\SpecialChar softhyphen
Selector
\family default
, with tournament-size 5, for selecting the survivors, and a
\family typewriter
 Roulette\SpecialChar softhyphen
Wheel\SpecialChar softhyphen
Selector
\family default
 for selecting the offspring.
\end_layout

\end_inset

 used by the examples in section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Termination"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The lower, blue line shows the (mean) fitness values of the
\emph on
 Knapsack
\emph default
 problem when using the
\family typewriter
 Monte\SpecialChar softhyphen
Carlo\SpecialChar softhyphen
Selector
\family default
 for selecting the survivors and offspring population.
 It can be easily seen, that the performance of the real evolutionary
\family typewriter
 Selector
\family default
s is much better than a random search.
\end_layout

\begin_layout Section
Evolution strategies
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Evolution strategy
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
ES
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
Evolution Strategies
\emph default
, ES, were developed by Ingo Rechenberg and Hans-Paul Schwefel at the Technical
 University of Berlin in the mid 1960s.
\begin_inset CommandInset citation
LatexCommand cite
key "FEDR:FEDR19750860506"
literal "true"

\end_inset

 It is a global optimization algorithm in continuous search spaces and is
 an instance of an Evolutionary Algorithm from the field of Evolutionary
 Computation.
 ES uses truncation selection
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See
\begin_inset CommandInset ref
LatexCommand vref
reference "par:Truncation-selector"

\end_inset

.
\end_layout

\end_inset

 for selecting the individuals and usually mutation
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See
\begin_inset CommandInset ref
LatexCommand vref
reference "par:Mutator"

\end_inset

.
\end_layout

\end_inset

 for changing the next generation.
 This section describes how to configure the evolution
\family typewriter
 Engine
\family default
 of the library for the 
\begin_inset Formula $\left(\mu,\lambda\right)$
\end_inset

- and 
\begin_inset Formula $\left(\mu+\lambda\right)$
\end_inset

-ES.
\end_layout

\begin_layout Subsection
\begin_inset Formula $\left(\mu,\lambda\right)$
\end_inset

 evolution strategy
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Evolution strategy!
\begin_inset Formula $\left(\mu,\lambda\right)$
\end_inset

-ES
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Formula $\left(\mu,\lambda\right)$
\end_inset

 algorithm starts by generating 
\begin_inset Formula $\lambda$
\end_inset

 individuals randomly.
 After evaluating the fitness of all the individuals, all but the 
\begin_inset Formula $\mu$
\end_inset

 fittest ones are deleted.
 Each of the 
\begin_inset Formula $\mu$
\end_inset

 fittest individuals gets to produce 
\begin_inset Formula $\frac{\lambda}{\mu}$
\end_inset

 children through an ordinary mutation.
 The newly created children just replaces the discarded parents.
\begin_inset CommandInset citation
LatexCommand cite
key "Luke2013Metaheuristics"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
To summarize it: 
\begin_inset Formula $\mu$
\end_inset

 is the number of parents which survive, and 
\begin_inset Formula $\lambda$
\end_inset

 is the number of offspring, created by the 
\begin_inset Formula $\mu$
\end_inset

 parents.
 The value of 
\begin_inset Formula $\lambda$
\end_inset

 should be a multiple of 
\begin_inset Formula $\mu$
\end_inset

.
 ES practitioners usually refer to their algorithm by the choice of 
\begin_inset Formula $\mu$
\end_inset

 and 
\begin_inset Formula $\lambda$
\end_inset

.
 If we set 
\begin_inset Formula $\mu=5$
\end_inset

 and 
\begin_inset Formula $\lambda=20$
\end_inset

, then we have a
\emph on
 
\begin_inset Formula $\left(5,20\right)$
\end_inset


\emph default
-ES.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DoubleGene, Double> engine =
\end_layout

\begin_layout Plain Layout

    Engine.builder(fitness, codec)
\end_layout

\begin_layout Plain Layout

        .populationSize(lambda)
\end_layout

\begin_layout Plain Layout

        .survivorsSize(0)
\end_layout

\begin_layout Plain Layout

        .offspringSelector(new TruncationSelector<>(mu))
\end_layout

\begin_layout Plain Layout

        .alterers(new Mutator<>(p))
\end_layout

\begin_layout Plain Layout

        .build();
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $\left(\mu,\lambda\right)$
\end_inset


\family typewriter
 Engine
\family default
 configuration
\begin_inset CommandInset label
LatexCommand label
name "lis:mu-lambda-Engine-configuration"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:mu-lambda-Engine-configuration"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how to configure the evolution Engine for 
\begin_inset Formula $\left(\mu,\lambda\right)$
\end_inset

-ES.
 The population size is set to 
\begin_inset Formula $\lambda$
\end_inset

 and the survivors size to zero, since the best parents are not part of
 the final population.
 Step three is configured by setting the offspring selector to the
\family typewriter
 Truncation\SpecialChar softhyphen
Selector
\family default
.
 Additionally, the
\family typewriter
 Truncation\SpecialChar softhyphen
Selector
\family default
 is parameterized with 
\begin_inset Formula $\mu$
\end_inset

.
 This lets the
\family typewriter
 Truncation\SpecialChar softhyphen
Selector
\family default
 only select the 
\begin_inset Formula $\mu$
\end_inset

 best individuals, which corresponds to step two of the ES.
 There are mainly three levers for the 
\begin_inset Formula $\left(\mu,\lambda\right)$
\end_inset

-ES where we can adjust exploration versus exploitation:
\begin_inset CommandInset citation
LatexCommand cite
key "Luke2013Metaheuristics"
literal "true"

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Population size 
\begin_inset Formula $\lambda$
\end_inset


\series default
: This parameter controls the sample size for each population.
 For the extreme case, as 
\begin_inset Formula $\lambda$
\end_inset

 approaches 
\begin_inset Formula $\infty$
\end_inset

, the algorithm would perform a simple random search.
\end_layout

\begin_layout Itemize

\series bold
Survivors size of 
\begin_inset Formula $\mu$
\end_inset


\series default
: This parameter controls how selective the ES is.
 Relatively low 
\begin_inset Formula $\mu$
\end_inset

 values push the algorithm towards exploitative search, because only the
 best individuals are used for reproduction.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
As you can see in listing
\begin_inset CommandInset ref
LatexCommand vref
reference "lis:mu-lambda-Engine-configuration"

\end_inset

, the survivors size (reproduction pool size) for the
\begin_inset Formula $\left(\mu,\lambda\right)$
\end_inset

-ES must be set
\emph on
 indirectly
\emph default
 via the
\family typewriter
 Truncation\SpecialChar softhyphen
Selector
\family default
 parameter.
 This is necessary, since for the
\begin_inset Formula $\left(\mu,\lambda\right)$
\end_inset

-ES, the selected best
\begin_inset Formula $\mu$
\end_inset

 individuals are not part of the population of the next generation.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Mutation probability 
\begin_inset Formula $p$
\end_inset


\series default
: A high mutation probability pushes the algorithm toward a fairly random
 search, regardless of the selectivity of 
\begin_inset Formula $\mu$
\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset Formula $\left(\mu+\lambda\right)$
\end_inset

 evolution strategy
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Evolution strategy!
\begin_inset Formula $\left(\mu+\lambda\right)$
\end_inset

-ES
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the 
\begin_inset Formula $\left(\mu+\lambda\right)$
\end_inset


\emph on
-ES
\emph default
, the next generation consists of the selected best 
\begin_inset Formula $\mu$
\end_inset

 parents and the 
\begin_inset Formula $\lambda$
\end_inset

 new children.
 This is also the main difference compared to 
\begin_inset Formula $\left(\mu,\lambda\right)$
\end_inset

, where the 
\begin_inset Formula $\mu$
\end_inset

 parents are not part of the next generation.
 Thus the next and all successive generations are 
\begin_inset Formula $\mu+\lambda$
\end_inset

 in size.
\begin_inset CommandInset citation
LatexCommand cite
key "Luke2013Metaheuristics"
literal "true"

\end_inset


\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 works with a constant population size and it is therefore not possible
 to implement an increasing population size.
 Besides this restriction, the
\family typewriter
 Engine
\family default
 configuration for the 
\begin_inset Formula $\left(\mu+\lambda\right)$
\end_inset

-ES is shown in listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:mu-plus-lambda-Engine-configuration"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DoubleGene, Double> engine =
\end_layout

\begin_layout Plain Layout

    Engine.builder(fitness, codec)
\end_layout

\begin_layout Plain Layout

        .populationSize(lambda)
\end_layout

\begin_layout Plain Layout

        .survivorsSize(mu)
\end_layout

\begin_layout Plain Layout

        .selector(new TruncationSelector<>(mu))
\end_layout

\begin_layout Plain Layout

        .alterers(new Mutator<>(p))
\end_layout

\begin_layout Plain Layout

        .build();
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $\left(\mu+\lambda\right)$
\end_inset


\family typewriter
 Engine
\family default
 configuration
\begin_inset CommandInset label
LatexCommand label
name "lis:mu-plus-lambda-Engine-configuration"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since the selected 
\begin_inset Formula $\mu$
\end_inset

 parents are part of the next generation, the
\family typewriter
 survivors\SpecialChar softhyphen
Size
\family default
 property must be set to 
\begin_inset Formula $\mu$
\end_inset

.
 This also requires setting the survivors selector to the
\family typewriter
 Truncation\SpecialChar softhyphen
Selector
\family default
.
 With the
\family typewriter
 selector\SpecialChar softhyphen
(Selector)
\family default
 method, both selectors and the selector for the survivors and for the offspring
, can be set.
 Because the best parents are also part of the next generation, the 
\begin_inset Formula $\left(\mu+\lambda\right)$
\end_inset

-ES may be more exploitative than the 
\begin_inset Formula $\left(\mu,\lambda\right)$
\end_inset

-ES.
 This has the risk, that very fit parents can defeat other individuals over
 and over again, which leads to a premature convergence to a local optimum.
\end_layout

\begin_layout Section
Evolution interception
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Evolution!interception
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EvolutionResult!interception
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EvolutionResult!mapper
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Interception
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Once the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 is created, it will continuously create
\family typewriter
 Evolution\SpecialChar softhyphen
Re\SpecialChar softhyphen
sult
\family default
 objects, one for every generation.
 It is not possible to alter the results, although it is tempting to use
 the
\family typewriter
 Streams::map
\family default
 method for this purpose.
 The problem with the
\family typewriter
 map
\family default
 method is, that the altered
\family typewriter
 Evolution\SpecialChar softhyphen
Re\SpecialChar softhyphen
sult
\family default
 will not be fed back to the
\family typewriter
 Engine
\family default
 when evolving the next generation.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

private EvolutionResult<DoubleGene, Double>
\end_layout

\begin_layout Plain Layout

mapping(EvolutionResult<DoubleGene, Double> result) {...}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

final Genotype<DobuleGene> result = engine.stream()
\end_layout

\begin_layout Plain Layout

    .map(this::mapping)
\end_layout

\begin_layout Plain Layout

    .limit(100)
\end_layout

\begin_layout Plain Layout

    .collect(toBestGenotype());
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Performing the
\family typewriter
 EvolutionResult
\family default
 mapping as shown in the code snippet above, will only change the results
 for the operations after the mapper definition.
 The evolution processing of the
\family typewriter
 Engine
\family default
 is
\emph on
 not
\emph default
 affected.
 If we want to intercept the evolution process, the interceptor must be
 defined when the
\family typewriter
 Engine
\family default
 is created.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DobuleGene, Double> engine = Engine.builder(problem)
\end_layout

\begin_layout Plain Layout

    .interceptor(EvolutionInterceptor.ofAfter(this::mapping))
\end_layout

\begin_layout Plain Layout

    .build();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code snippet above shows the correct way for intercepting the evolution
 stream.
 The mapper given to the
\family typewriter
 Engine
\family default
 will change the stream of
\family typewriter
 Evolution\SpecialChar softhyphen
Results
\family default
 and the will also feed the altered result back to the evolution
\family typewriter
 Engine
\family default
.
 Changing the evolved
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 is a powerful tool and should used cautiously.
\end_layout

\begin_layout Paragraph
Distinct population
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Unique population
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Distinct population
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This kind of intercepting the evolution process is very flexible.

\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 comes with one predefined stream interception method, which allows for
 removing duplicate individuals from the resulting population.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DobuleGene, Double> engine = Engine.builder(problem)
\end_layout

\begin_layout Plain Layout

    .interceptor(EvolutionResult.toUniquePopulation())
\end_layout

\begin_layout Plain Layout

    .build();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Despite the de-duplication, it is still possible to have duplicate individuals.
 This will be the case when domain of the possible
\family typewriter
 Genotype
\family default
s is not big enough, and the same individual is created by chance.
 You can control the number of
\family typewriter
 Genotype
\family default
 creation retries using the
\family typewriter
 EvolutionResult\SpecialChar softhyphen
::to\SpecialChar softhyphen
Unique\SpecialChar softhyphen
Population(\SpecialChar softhyphen
int\SpecialChar softhyphen
)
\family default
 method, which allows you to define the maximal number of retries if an
 individual already exists.
\end_layout

\begin_layout Chapter
Modules
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Modules
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library has been split into several modules, which allows keeping the base
 EA module as small as possible.
 It currently consists of the modules shown in table
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Jenetics-modules"
plural "false"
caps "false"
noprefix "false"

\end_inset

, including the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 base module.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The used module names follow the recommended naming scheme for the JPMS
 automatic modules:
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://blog.joda.org/2017/05/java-se-9-jpms-automatic-modules.html
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Module
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Artifact
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
io.jenetics.base
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
io.jenetics:jenetics:@__version__@
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
io.jenetics.ext
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
io.jenetics:jenetics.ext:@__version__@
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
io.jenetics.prog
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
io.jenetics:jenetics.prog:@__version__@
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
io.jenetics.xml
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
io.jenetics:jenetics.xml:@__version__@
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
io.jenetics.prngine
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
io.jenetics:prngine:2.0.0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\family sans
\series bold
\shape smallcaps
\begin_inset CommandInset label
LatexCommand label
name "tab:Jenetics-modules"

\end_inset

Jenetics
\family default
\series default
\shape default
 modules
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With this module split, the code is easier to maintain and doesn't force
 the user to use parts of the library he or she isn't using.
 This keeps the
\family typewriter
 io.jenetics\SpecialChar softhyphen
.base
\family default
 module as small as possible.
 The additional
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 modules will be described in this chapter.
 Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Module-graph"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the dependency graph of the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 modules.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/model/ModuleModel.eps
	width 60text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Module-graph"

\end_inset

Module graph
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
io.jenetics.ext
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
io.jenetics.ext
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Modules!io.jenetics.ext
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 io.jenetics.ext
\family default
 module implements additional
\emph on
 non
\emph default
 standard
\family typewriter
 Gene
\family default
s and evolutionary operations.
 It also contains data structures which are used by these additional
\family typewriter
 Gene
\family default
s and operations.
\end_layout

\begin_layout Subsection
Data structures
\end_layout

\begin_layout Subsubsection
Tree
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Tree
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Tree
\family default
 interface defines a general tree data type, where each tree node can have
 an arbitrary number of children.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface Tree<V, T extends Tree<V, T>> {
\end_layout

\begin_layout Plain Layout

    V value();
\end_layout

\begin_layout Plain Layout

    Optional<T> parent();
\end_layout

\begin_layout Plain Layout

    T childAt(int index);
\end_layout

\begin_layout Plain Layout

    int childCount();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Tree-interface"

\end_inset


\family typewriter
Tree
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Tree-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the
\family typewriter
 Tree
\family default
 interface with its basic abstract tree methods.
 All other needed tree methods, e.
\begin_inset space ~
\end_inset

g.
 for node traversal and search, are implemented by default methods, which
 are derived from these four abstract tree methods.
 A mutable default implementation of the
\family typewriter
 Tree
\family default
 interface is given by the
\family typewriter
 Tree\SpecialChar softhyphen
Node
\family default
 class.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/ExampleTree.svg
	lyxscale 80
	width 67text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Example-tree"

\end_inset

Example tree
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To illustrate the usage of the
\family typewriter
 Tree\SpecialChar softhyphen
Node
\family default
 class, we will create a
\family typewriter
 Tree\SpecialChar softhyphen
Node
\family default
 instance from the tree shown in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Example-tree"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The example tree consists of 
\begin_inset Formula $12$
\end_inset

 nodes with a maximal depth of three and a varying child count from one
 to three.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final TreeNode<Integer> tree = TreeNode.of(0)
\end_layout

\begin_layout Plain Layout

	.attach(TreeNode.of(1)
\end_layout

\begin_layout Plain Layout

        .attach(4, 5))
\end_layout

\begin_layout Plain Layout

	.attach(TreeNode.of(2)
\end_layout

\begin_layout Plain Layout

        .attach(6))
\end_layout

\begin_layout Plain Layout

	.attach(TreeNode.of(3)
\end_layout

\begin_layout Plain Layout

		.attach(TreeNode.of(7)
\end_layout

\begin_layout Plain Layout

            .attach(10, 11))
\end_layout

\begin_layout Plain Layout

		.attach(8)
\end_layout

\begin_layout Plain Layout

		.attach(9));
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Example-TreeNode"

\end_inset

Example
\family typewriter
 TreeNode
\end_layout

\end_inset


\end_layout

\end_inset

Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Example-TreeNode"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the
\family typewriter
 Tree\SpecialChar softhyphen
Node
\family default
 representation of the given example tree.
 New children are added by using the
\family typewriter
 attach
\family default
 method.
 For full
\family typewriter
 Tree
\family default
 method list have a look at the Javadoc documentation.
\end_layout

\begin_layout Subsubsection
Parentheses tree
\begin_inset CommandInset label
LatexCommand label
name "subsec:Parentheses-tree"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Parentheses tree
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A parentheses tree
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://www.i-programmer.info/programming/theory/3458-parentheses-are-trees.html
\end_layout

\end_inset


\end_layout

\end_inset

 is a serialized representation of a tree and is a simplified form of the
\emph on
 Newick
\emph default
 tree format
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://evolution.genetics.washington.edu/phylip/newicktree.html
\end_layout

\end_inset


\end_layout

\end_inset

.
 The parentheses tree representation of the tree in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Example-tree"
plural "false"
caps "false"
noprefix "false"

\end_inset

 will look like the following string:
\end_layout

\begin_layout LyX-Code
0(1(4,5),2(6),3(7(10,11),8,9))
\end_layout

\begin_layout Standard
As you can see, nodes on the same tree level are separated by a comma, '
\family typewriter
,
\family default
'.
 New tree levels are created with an opening parentheses '
\family typewriter
(
\family default
' and closed with a closing parentheses '
\family typewriter
)
\family default
'.
 No additional spaces are inserted between the separator character and the
 node value.
 Any spaces in the parentheses tree string will be part of the node value.
 Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Parentheses-tree-syntax"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the syntax diagram of the parentheses tree.
 The
\family typewriter
 Node\SpecialChar softhyphen
Value
\family default
 in the diagram is the string representation of the
\family typewriter
 Tree\SpecialChar softhyphen
::val\SpecialChar softhyphen
ue
\family default
 object.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/ParenthesesTreeGrammar.png
	lyxscale 30
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Parentheses-tree-syntax"

\end_inset

Parentheses tree syntax diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To get the parentheses tree representation, you just have to call
\family typewriter
 Tree\SpecialChar softhyphen
::to\SpecialChar softhyphen
Paren\SpecialChar softhyphen
the\SpecialChar softhyphen
ses\SpecialChar softhyphen
Tree
\family default
.
 This method uses the
\family typewriter
 Ob\SpecialChar softhyphen
ject\SpecialChar softhyphen
::to\SpecialChar softhyphen
String
\family default
 method for serializing the tree node value.
 If you need a different string representation you can use the
\family typewriter
 Tree\SpecialChar softhyphen
::to\SpecialChar softhyphen
Paren\SpecialChar softhyphen
the\SpecialChar softhyphen
ses\SpecialChar softhyphen
Tree(\SpecialChar softhyphen
Function<\SpecialChar softhyphen
? super V, String>\SpecialChar softhyphen
)
\family default
 method.
 A simple example, on how to use this method, is shown in the code snippet
 below.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Tree<Path, ?> tree = ...;
\end_layout

\begin_layout Plain Layout

final String string = tree.toParenthesesString(Path::getFileName);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the string representation of the tree node value contains one of the
 protected characters, '
\family typewriter
,
\family default
', '
\family typewriter
(
\family default
' or '
\family typewriter
)
\family default
', they will be escaped with a '
\family typewriter

\backslash

\family default
' character.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Tree<String, ?> tree = TreeNode.of("(root)")
\end_layout

\begin_layout Plain Layout

	.attach(",", "(", ")")
\end_layout

\end_inset

The tree in the code snippet above will be represented as the following
 parentheses string:
\end_layout

\begin_layout LyX-Code

\backslash
(root
\backslash
)(
\backslash
,,
\backslash
(,
\backslash
))
\end_layout

\begin_layout Standard
Serializing a tree into parentheses form is just one part of the story.
 It is also possible to read back the parentheses string as tree object.
 The
\family typewriter
 Tree\SpecialChar softhyphen
Node\SpecialChar softhyphen
::parse(\SpecialChar softhyphen
String\SpecialChar softhyphen
)
\family default
 method allows you to parse a tree string back to a
\family typewriter
 Tree\SpecialChar softhyphen
Node<\SpecialChar softhyphen
String\SpecialChar softhyphen
>
\family default
 object.
 If you need to create a tree with the original node type, you can call
 the
\family typewriter
 parse
\family default
 method with an additional string mapper function.
 How you can parse a given parentheses tree string is shown in the code
 below.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Tree<Integer, ?> tree = TreeNode.parse(
\end_layout

\begin_layout Plain Layout

    "0(1(4,5),2(6),3(7(10,11),8,9))",
\end_layout

\begin_layout Plain Layout

    Integer::parseInt
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

The
\family typewriter
 TreeNode::parse
\family default
 method will throw an
\family typewriter
 Illegal\SpecialChar softhyphen
Argument\SpecialChar softhyphen
Exception
\family default
 if it is called with an invalid tree string.
\end_layout

\begin_layout Subsubsection
Flat tree
\begin_inset CommandInset label
LatexCommand label
name "subsec:Flat-tree"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
FlatTree
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The main purpose for the
\family typewriter
 Tree
\family default
 data type in the
\family typewriter
 io.jenetics\SpecialChar softhyphen
.ext
\family default
 module is to support hierarchical
\family typewriter
 Tree\SpecialChar softhyphen
Gene
\family default
s, which are needed for genetic programming (see section
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Genetic-programming"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Since the
\family typewriter
 Chromosome
\family default
 type is essentially an array, a mapping from the hierarchical tree structure
 to a
\begin_inset Formula $1$
\end_inset

-dimensional array is needed.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
There exists mapping schemes for
\emph on
 perfect
\emph default
 binary trees, which allows a bijective mapping from tree to array without
 additional storage need:
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Binary_tree##Arrays
\end_layout

\end_inset

.
 For general trees with arbitrary child count, such simple mapping doesn't
 exist.
\end_layout

\end_inset

 For general trees with arbitrary child count, additional information needs
 to be stored for a bijective mapping between tree and array.
 The
\family typewriter
 Flat\SpecialChar softhyphen
Tree
\family default
 interface extends the
\family typewriter
 Tree
\family default
 node with a
\family typewriter
 child\SpecialChar softhyphen
Off\SpecialChar softhyphen
set
\family default
 method, which returns the absolute start index of the tree's children.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface FlatTree<V, T extends FlatTree<V, T>>
\end_layout

\begin_layout Plain Layout

    extends Tree<V, T>
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    int childOffset();
\end_layout

\begin_layout Plain Layout

    default ISeq<T> flattenedNodes() {...};
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:FlatTree-interface"

\end_inset


\family typewriter
FlatTree
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:FlatTree-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the additional child offset needed for reconstructing the tree from
 the flattened array version.
 When flattening an existing tree, the nodes are traversed in breadth first
 order.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Breadth-first_search
\end_layout

\end_inset


\end_layout

\end_inset

 For each node the absolute array offset of the first child is stored, together
 with the child count of the node.
 If the node has no children, the child offset is set to 
\begin_inset Formula $-1$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/FlatTree.eps
	lyxscale 80
	width 55text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Example-FlatTree"

\end_inset

Example
\family typewriter
 FlatTree
\end_layout

\end_inset


\end_layout

\end_inset

Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Example-FlatTree"
plural "false"
caps "false"
noprefix "false"

\end_inset

 illustrates the flattened example tree shown in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Example-tree"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The curved arrows denotes the child offset of a given parent node and the
 curly braces denotes the child count of a given parent node.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final TreeNode<Integer> tree = ...;
\end_layout

\begin_layout Plain Layout

final ISeq<FlatTreeNode<Integer>> nodes = FlatTreeNode.of(tree)
\end_layout

\begin_layout Plain Layout

    .flattenedNodes();
\end_layout

\begin_layout Plain Layout

assert Tree.equals(tree, nodes.get(0));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

final TreeNode<Integer> unflattened = TreeNode.of(nodes.get(0));
\end_layout

\begin_layout Plain Layout

assert tree.equals(unflattened);
\end_layout

\begin_layout Plain Layout

assert unflattened.equals(tree);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code snippet above shows how to flatten a given integer tree and convert
 it back to a regular tree.
 The first element of the flattened tree node sequence is always the root
 node.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
Since the
\family typewriter
 TreeGene
\family sans
 and the
\family typewriter
 ProgramGene
\family sans
 are implementing the
\family typewriter
 FlatTree
\family sans
 interface, it is helpful to know and understand the used tree to array
 mapping.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since there is no possibility to change the nodes of a
\family typewriter
 FlatTree
\family default
, it can be used as an immutable version of the
\family typewriter
 Tree
\family default
 interface.
 The tree nodes are also stored more memory efficient than in the
\family typewriter
 TreeNode
\family default
 class.
\end_layout

\begin_layout Subsubsection
Tree formatting
\end_layout

\begin_layout Standard
Using the parentheses tree is one possibility for creating a string representati
on of a given tree.
 Although it is the default format returned by the
\family typewriter
 toString()
\family default
 method, it is sometime desirable to use different formats.
 The
\family typewriter
 Tree\SpecialChar softhyphen
For\SpecialChar softhyphen
mat\SpecialChar softhyphen
ter
\family default
 class lets you to implement your own formats and also defines additional
 tree formats.
\end_layout

\begin_layout Description

\family typewriter
TreeFormatter.PARENTHESES
\family default
 Converts a tree to its default parentheses format.
 This is the default format and is also used by the
\family typewriter
 Tree\SpecialChar softhyphen
::to\SpecialChar softhyphen
String
\family default
 method.
\end_layout

\begin_layout Description

\family typewriter
TreeFormatter.TREE
\family default
 Creates a verbose tree string, which spans multiple lines, e.
\begin_inset space ~
\end_inset

g.
\end_layout

\begin_layout LyX-Code
        div
\end_layout

\begin_layout LyX-Code
        ├── cos
\end_layout

\begin_layout LyX-Code
        │   └── 1.3
\end_layout

\begin_layout LyX-Code
        └── cos
\end_layout

\begin_layout LyX-Code
            └── 3.14
\end_layout

\begin_layout Description

\family typewriter
TreeFormatter.DOT
\family default
 Creates a tree string in the dot format, which can be used to create nice
 graphs with Graphviz
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://www.graphviz.org/
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
TreeFormatter.LISP
\family default
 Creates a
\emph on
 Lisp
\emph default
 tree from a given
\family typewriter
 Tree
\family default
 instance.
 E.
\begin_inset space ~
\end_inset

g.
\end_layout

\begin_layout LyX-Code
        (mul (div (cos 1.0) (cos 3.14)) (sin (mul 1.0 z)))
\end_layout

\begin_layout Subsubsection
Tree reduction
\begin_inset CommandInset label
LatexCommand label
name "subsec:Tree-reduction"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Tree!reduce
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Tree
\family default
 is a very mighty data structure.
 It implements methods, which allows you to traverse and manipulate it.
 One of these methods is the
\family typewriter
 Tree::reduce
\family default
 function, which traverses the tree in pre-order.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface Tree<V, T> {
\end_layout

\begin_layout Plain Layout

    default <U> U reduce(
\end_layout

\begin_layout Plain Layout

        U[] neutral,
\end_layout

\begin_layout Plain Layout

        BiFunction<? super V, ? super U[], ? extends U> reducer
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
\begin_inset CommandInset label
LatexCommand label
name "lis:Tree::reduce-method"

\end_inset

Tree::reduce
\family default
 method
\end_layout

\end_inset


\end_layout

\end_inset

Listing
\begin_inset CommandInset ref
LatexCommand vref
reference "lis:Tree::reduce-method"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the signature of the
\family typewriter
 reduce
\family default
 method.
 The
\family typewriter
 neutral
\family default
 array is used in the
\family typewriter
 reducer
\family default
 function for leaf elements.
 After the reduction process, one element is returned, which might be
\family typewriter
 null
\family default
 for empty trees.
 The following code snippet shows how to use the
\family typewriter
 Tree::reduce
\family default
 method for evaluating a simple arithmetic expression tree.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Tree<String, ?> formula = TreeNode.parse(
\end_layout

\begin_layout Plain Layout

    "add(sub(6,div(230,10)),mul(5,6))"
\end_layout

\begin_layout Plain Layout

);
\end_layout

\begin_layout Plain Layout

final double result = formula.reduce(new Double[0], (op, args) ->
\end_layout

\begin_layout Plain Layout

    switch (op) {
\end_layout

\begin_layout Plain Layout

        case "add" -> args[0] + args[1];
\end_layout

\begin_layout Plain Layout

        case "sub" -> args[0] - args[1];
\end_layout

\begin_layout Plain Layout

        case "mul" -> args[0] * args[1];
\end_layout

\begin_layout Plain Layout

        case "div" -> args[0] / args[1];
\end_layout

\begin_layout Plain Layout

        default -> Double.parseDouble(op);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

The result of the reduced arithmetic tree will be 
\begin_inset Formula $13.0$
\end_inset

, as expected.
\end_layout

\begin_layout Subsection
Rewriting
\begin_inset CommandInset label
LatexCommand label
name "subsec:Rewriting"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Rewriting
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tree rewriting is a synonym for term rewriting, i.e., the process of transforming
 trees (tree structured data) into other trees by applying rewriting rules.
 Rewriting trees is not necessarily deterministic.
 One rewrite rule can be applied in many different ways to that term, or
 more than one rule will be applicable to a tree node.
 The rewriting system implementation in
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 is currently used for simplifying program trees, which are evolved in genetic
 programming problems (see section
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Genetic-programming"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Program-pruning"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 A good introduction in tree/term rewriting systems can be found in
\begin_inset CommandInset citation
LatexCommand cite
key "baader_nipkow_1998"
literal "false"

\end_inset

.
\end_layout

\begin_layout Definition*

\series bold
(Tree rewrite rule):
\series default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Tree rewrite rule
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Rewrite rule
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Tree!rewrite rule
\end_layout

\end_inset

 A tree rewrite rule is a pair of terms (sub trees), 
\begin_inset Formula $l\rightarrow r$
\end_inset

.
 The notation indicates that the
\emph on
 left
\emph default
-hand side, 
\begin_inset Formula $l$
\end_inset

, can be replaced by the
\emph on
 right
\emph default
-hand side, 
\begin_inset Formula $r$
\end_inset

.
\end_layout

\begin_layout Standard
A rule, 
\begin_inset Formula $l\rightarrow r$
\end_inset

, can be applied to a tree, 
\begin_inset Formula $t$
\end_inset

, if the left tree (pattern) matches a sub tree of
\begin_inset Formula $t$
\end_inset

.
 The matching sub tree is then replaced by the right tree (pattern)
\begin_inset Formula $r$
\end_inset

.
\end_layout

\begin_layout Definition*

\series bold
(Tree rewrite system):
\series default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Tree rewrite system
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Rewrite system
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Tree!rewrite system
\end_layout

\end_inset

 A tree rewrite system is a set, 
\begin_inset Formula $\mathfrak{\mathcal{R}}$
\end_inset

, of rewrite rules, 
\begin_inset Formula $l\rightarrow r$
\end_inset

.
\end_layout

\begin_layout Standard
In contrast to string rewriting systems, whose objects are flat sequences
 of symbols, the objects a term rewriting system works on, i.e.
 the terms, form a term algebra.
 A term can be visualized as a tree of symbols, the set of admitted symbols
 being fixed by a given signature.
\end_layout

\begin_layout Subsubsection
Tree pattern
\begin_inset CommandInset label
LatexCommand label
name "subsec:Tree-pattern"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Tree pattern
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Tree!pattern
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 TreePattern
\family default
 class is used for the left-hand and the right-hand side of a rewrite rule.
 It is typed and consists of variable (
\family typewriter
Var
\family default
) and value (
\family typewriter
Val
\family default
) nodes which form a sum type
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Algebraic_data_type
\end_layout

\end_inset


\end_layout

\end_inset

 of the
\emph on
 sealed
\family typewriter
\emph default
 Decl
\family default
 class.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public final class TreePattern<V> {
\end_layout

\begin_layout Plain Layout

    public TreePattern(Tree<Decl<V>, ?> pattern) {...}
\end_layout

\begin_layout Plain Layout

    public TreeMatcher<V> filters(Tree<V, ?> tree) {...}
\end_layout

\begin_layout Plain Layout

    public TreeNode<V> expand(Map<Var<V>, Tree<V, ?>> vars) {...}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:TreePattern-class"

\end_inset


\family typewriter
TreePattern
\family default
 class
\end_layout

\end_inset


\end_layout

\end_inset

Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:TreePattern-class"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the constructor and main methods of the
\family typewriter
 Tree\SpecialChar softhyphen
Pattern
\family default
.
 The
\family typewriter
 filters
\family default
 method is used when used for the left-hand side and the
\family typewriter
 expand
\family default
 method for the right-hand side.
 How to create a simple tree pattern is shown in the code snippet below.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Tree<Decl<String>, ?> t = TreeNode
\end_layout

\begin_layout Plain Layout

    .<Decl<String>>of(new Val<>("add"))
\end_layout

\begin_layout Plain Layout

    .attach(new Var<>("x"), new Val<>("1"));
\end_layout

\begin_layout Plain Layout

final TreePattern<String> p = new TreePattern<>(t);
\end_layout

\begin_layout Plain Layout

assert p.filters(TreeNode.parse("add(sub(x,y),1)")).matches();
\end_layout

\end_inset

You can see that the variable
\family typewriter
 x
\family default
 will match for arbitrary sub trees.
 For more complicated patterns it is quite cumbersome to create it via a
\family typewriter
 Decl
\family default
 tree.
 Usually you will create a
\family typewriter
 Tree\SpecialChar softhyphen
Pattern
\family default
 object by compiling a proper pattern string.
 For creating the same pattern as in the example above you can write
\family typewriter
 Tree\SpecialChar softhyphen
Pattern\SpecialChar softhyphen
.compile(\SpecialChar softhyphen
"add($x,1)"\SpecialChar softhyphen
)
\family default
.
 The base syntax for the tree pattern follows the parentheses tree DSL described
 in
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Parentheses-tree"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 It only differs in the declaration of tree variables, which start with
 a '$' and must be a valid Java identifier.
 If you want to match
\emph on
 non
\emph default
 string trees you must specify an additional mapper function with the
\family typewriter
 compile
\family default
 method.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final TreePattern<Integer> pattern = TreePattern
\end_layout

\begin_layout Plain Layout

    .compile("0($x,1)", Integer::parseInt);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The right-hand side functionality of the rewrite rule is used to expand
 a given pattern.
 For expanding a given pattern you have to deliver a
\family typewriter
 Var
\family default
 to sub tree mapping.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final TreePattern<String> pattern = TreePattern
\end_layout

\begin_layout Plain Layout

    .compile("add($x,$y,1)");
\end_layout

\begin_layout Plain Layout

final Map<Var<String>, Tree<String, ?>> vars = new HashMap<>();
\end_layout

\begin_layout Plain Layout

vars.put(new TreePattern.Var<>("x"), TreeNode.parse("sin(x)"));
\end_layout

\begin_layout Plain Layout

vars.put(new TreePattern.Var<>("y"), TreeNode.parse("sin(y)"));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

final Tree<String, ?> tree = pattern.expand(vars);
\end_layout

\begin_layout Plain Layout

assert tree.toParenthesesString().equals("add(sin(x),sin(y),1)"));
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Tree rewriter
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Tree rewriter
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Tree\SpecialChar softhyphen
Rewriter
\family default
 interface is an abstraction of the tree
\emph on
 rewriting
\emph default
 functionality.
 Its
\family typewriter
 rewrite
\family default
 method takes a
\family typewriter
 Tree\SpecialChar softhyphen
Node
\family default
, which will be rewritten, and the maximal number the rule should be applied
 to the input tree.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface TreeRewriter<V> {
\end_layout

\begin_layout Plain Layout

    int rewrite(TreeNode<V> tree, int limit);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:TreeRewriter-interface"

\end_inset


\family typewriter
TreeRewriter
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset

With the
\family typewriter
 TreeRewriter
\family default
 interface you are able to combine two or more tree rewriter to one.
 This can be done with the
\family typewriter
 con\SpecialChar softhyphen
cat(\SpecialChar softhyphen
final TreeRewriter<V>...
 rewriters\SpecialChar softhyphen
)
\family default
 factory method.
 There are two implementations of the
\family typewriter
 Tree\SpecialChar softhyphen
Rewriter
\family default
 interface: the
\family typewriter
 Tree\SpecialChar softhyphen
Rewrite\SpecialChar softhyphen
Rule
\family default
 class and the
\family typewriter
 TRS
\family default
 class.
\end_layout

\begin_layout Subsubsection
Tree rewrite rule
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Tree rewrite rule
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Term rewrite rule
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A
\family typewriter
 TreeRewriteRule
\family default
 consists of left
\emph on
 matching
\emph default
 pattern and a right
\emph on
 replacing
\emph default
 pattern.
 To simplify the creation of a rewrite rule, it is possible to create one
 via a simple DSL:
\family typewriter
 add(0,$x) -> $x
\family default
.
 The left and the right tree pattern is separated by an arrow,
\family typewriter
 ->
\family default
, and the pattern DSL is described in section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Tree-pattern"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final TreeRewriteRule<String> rule = TreeRewriteRule
\end_layout

\begin_layout Plain Layout

    .compile("add($x,0) -> $x");
\end_layout

\begin_layout Plain Layout

final TreeNode<String> t = parse("add(5,0)");
\end_layout

\begin_layout Plain Layout

rule.rewrite(t);
\end_layout

\end_inset

Since the
\family typewriter
 TreeRewriteRule
\family default
 implements the
\family typewriter
 TreeRewriter
\family default
 interface, it can directly be used for rewriting input trees.
\end_layout

\begin_layout Subsubsection
Tree rewrite system (TRS)
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Tree rewrite system
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Term rewrite system
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 TRS
\family default
 class puts all things together and allows for defining a complete tree
 (term) rewriting system.
 The primary constructor will take a sequence of
\family typewriter
 Tree\SpecialChar softhyphen
Re\SpecialChar softhyphen
write\SpecialChar softhyphen
Rule
\family default
s (
\family typewriter
ISeq<\SpecialChar softhyphen
Tree\SpecialChar softhyphen
Re\SpecialChar softhyphen
write\SpecialChar softhyphen
Rule<\SpecialChar softhyphen
V\SpecialChar softhyphen
>\SpecialChar softhyphen
>
\family default
), but the
\family typewriter
 TRS
\family default
 creation can be simplified by using a simple DSL.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final TRS<String> trs = TRS.of(
\end_layout

\begin_layout Plain Layout

    "add(0,$x) -> $x",
\end_layout

\begin_layout Plain Layout

    "add(S($x),$y) -> S(add($x,$y))",
\end_layout

\begin_layout Plain Layout

    "mul(0,$x) -> 0",
\end_layout

\begin_layout Plain Layout

    "mul(S($x),$y) -> add(mul($x,$y),$y)"
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

The example above defines a tree rewrite system with four rewrite rules,
 which are applied in the given order.
 Each rule is applied until the given tree stays unchanged.
 This also means, that the termination of the
\family typewriter
 TRS
\family default
 can't be guaranteed.
 It's mainly your responsibility to create a rewrite system which will
\emph on
 always
\emph default
 terminate.
 If you are not sure whether the system is terminating or not, you better
 call the
\family typewriter
 Tree\SpecialChar softhyphen
Rewriter\SpecialChar softhyphen
.re\SpecialChar softhyphen
write(\SpecialChar softhyphen
Tree\SpecialChar softhyphen
Node, int\SpecialChar softhyphen
)
\family default
 method, which also takes the maximal number, the rule should be applied
 to the input tree.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final TreeNode<String> t = parse("add(S(0),S(mul(S(0),S(S(0)))))");
\end_layout

\begin_layout Plain Layout

trs.rewrite(t);
\end_layout

\begin_layout Plain Layout

assert t.equals(parse("S(S(S(S(0))))"));
\end_layout

\end_inset

Since the given tree rewrite system is terminating, we can safely apply
 the
\family typewriter
 TRS
\family default
 to
\family sans
 add(S(0),S(mul(S(0),S(S(0)))))
\family default
, which will then be rewritten to
\family sans
 S(S(S(S(0))))
\family default
.
\end_layout

\begin_layout Subsubsection
Constant expression rewriter
\end_layout

\begin_layout Standard
The
\family typewriter
 ConstExprRewriter
\family default
 class allows for the evaluation of constant tree expressions.
 In the code snippet below, it is shown how to evaluate a constant double
 expression.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final TreeNode<Op<Double>> tree = MathExpr
\end_layout

\begin_layout Plain Layout

    .parse("1+2+3+4")
\end_layout

\begin_layout Plain Layout

    .toTree();
\end_layout

\begin_layout Plain Layout

ConstRewriter.ofType(Double.class).rewrite(tree);
\end_layout

\begin_layout Plain Layout

assert tree.value().equals(Const.of(10.0))
\end_layout

\end_inset

Since the
\family typewriter
 ConstExprRewriter
\family default
 can rewrite constant expressions of arbitrary types, a rewrite instance
 of the appropriate type,
\family typewriter
Double
\family default
, must be created first.
\end_layout

\begin_layout Subsection
Genes
\end_layout

\begin_layout Subsubsection
BigInteger gene
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
BigIntegerGene
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 BigIntegerGene
\family default
 implements the
\family typewriter
 NumericGene
\family default
 interface and can be used when the range of the existing
\family typewriter
 Long\SpecialChar softhyphen
Gene
\family default
 or
\family typewriter
 Double\SpecialChar softhyphen
Gene
\family default
 is not enough.
 Its allele type is a
\family typewriter
 Big\SpecialChar softhyphen
Integer
\family default
, which can store arbitrary precision integers.
 There also exists a corresponding
\family typewriter
 Big\SpecialChar softhyphen
Integer\SpecialChar softhyphen
Chromosome
\family default
.
\end_layout

\begin_layout Subsubsection
Tree gene
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
TreeGene
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 TreeGene
\family default
 interface extends the
\family typewriter
 Flat\SpecialChar softhyphen
Tree
\family default
 interface and serves as basis for the
\family typewriter
 Program\SpecialChar softhyphen
Gene
\family default
, used for genetic programming.
 Its tree nodes are stored in the corresponding
\family typewriter
 Tree\SpecialChar softhyphen
Chromosome
\family default
.
 How the tree hierarchy is flattened and mapped to an array is described
 in section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Flat-tree"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Operators
\end_layout

\begin_layout Paragraph
Simulated binary crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Simulated binary crossover
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
SBX
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Crossover!Simulated binary crossover
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Simulated\SpecialChar softhyphen
Binary\SpecialChar softhyphen
Crossover
\family default
 performs the simulated binary crossover (SBX) on
\family typewriter
 Numeric\SpecialChar softhyphen
Chromosome
\family default
s such that each position is either crossed contracted or expanded with
 a certain probability.
 The probability distribution is designed such that the children will lie
 closer to their parents as is the case with the single point binary crossover.
 It is implemented as described in
\begin_inset CommandInset citation
LatexCommand cite
key "Deb99self-adaptivegenetic"
literal "true"

\end_inset

.
\end_layout

\begin_layout Paragraph
Single-node crossover
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Single-node crossover
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 SingleNodeCrossover
\family default
 class works on
\family typewriter
 Tree\SpecialChar softhyphen
Ch\SpecialChar softhyphen
ro\SpecialChar softhyphen
mo\SpecialChar softhyphen
some
\family default
s.
 It swaps two, randomly chosen, nodes from two tree chromosomes.
 Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Single-node-crossover"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how the single-node crossover works.
 In this example node 
\begin_inset Formula $3$
\end_inset

 of the first tree is swapped with node 
\begin_inset Formula $h$
\end_inset

 of the second tree.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../resources/graphic/SingleNodeCrossover-t1.svg
	lyxscale 50
	width 50text%

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../resources/graphic/SingleNodeCrossover-ta.svg
	lyxscale 50
	width 50text%

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3\,\,\,\longleftrightarrow\,\,\,h$
\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../resources/graphic/SingleNodeCrossover-t1a.svg
	lyxscale 50
	width 35text%
	BoundingBox 30bp -144bp 380bp 188bp

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../resources/graphic/SingleNodeCrossover-ta1.svg
	lyxscale 50
	width 50text%

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Single-node-crossover"

\end_inset

Single-node crossover
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Reverse sequence mutator (RSM)
\end_layout

\begin_layout Standard
The
\family typewriter
 RSMutator
\family default
 chooses two positions
\emph on
 i
\emph default
 and
\emph on
 j
\emph default
 randomly.
 The gene order in a chromosome will then be reversed between these two
 points.
 This mutation operator can also be used for combinatorial problems, where
 no duplicated genes within a chromosome are allowed, e.g.
 for the TSP.
\begin_inset CommandInset citation
LatexCommand cite
key "DBLP:journals/corr/abs-1203-3099"
literal "false"

\end_inset


\end_layout

\begin_layout Paragraph
Hybridizing PSM and RSM (HPRM)
\end_layout

\begin_layout Standard
The
\family typewriter
 HPRMutator
\family default
 constructs an offspring from a pair of parents by hybridizing two mutation
 operators, PSM (
\family typewriter
Swap\SpecialChar softhyphen
Mu\SpecialChar softhyphen
ta\SpecialChar softhyphen
tor
\family default
) and RSM.
 Its main application is for combinatorial problems, like the TSP.
\begin_inset CommandInset citation
LatexCommand cite
key "DBLP:journals/corr/abs-1203-5028"
literal "false"

\end_inset


\end_layout

\begin_layout Subsection
Weasel program
\begin_inset CommandInset label
LatexCommand label
name "subsec:Weasel-program"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Weasel program
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Weasel program
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Weasel_program
\end_layout

\end_inset


\end_layout

\end_inset

 is thought experiment from Richard Dawkins, in which he tries to illustrate
 the function of genetic
\emph on
 mutation
\emph default
 and
\emph on
 selection
\emph default
.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The classes are located in the
\family typewriter
 io.jenetics.ext
\family default
 module.
\end_layout

\end_inset

 For this reason he chooses the well known example of typewriting monkeys.
\end_layout

\begin_layout Quote
I don't know who it was first pointed out that, given enough time, a monkey
 bashing away at random on a typewriter could produce all the works of Shakespea
re.
 The operative phrase is, of course, given enough time.
 Let us limit the task facing our monkey somewhat.
 Suppose that he has to produce, not the complete works of Shakespeare but
 just the short sentence 
\begin_inset Quotes ald
\end_inset

Methinks it is like a weasel
\begin_inset Quotes ard
\end_inset

, and we shall make it relatively easy by giving him a typewriter with a
 restricted keyboard, one with just the 26 (uppercase) letters, and a space
 bar.
 How long will he take to write this one little sentence?
\begin_inset CommandInset citation
LatexCommand cite
key "dawkins1986"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
The search space of the 28 character long target string is 
\begin_inset Formula $27^{28}\approx10^{40}$
\end_inset

.
 If the monkey writes 
\begin_inset Formula $1,000,000$
\end_inset

 different
\emph on
 sentences
\emph default
 per second, it would take about 
\begin_inset Formula $10^{26}$
\end_inset

 years (in average) writing the correct one.
 Although Dawkins did not provide the source code for his program, a 
\begin_inset Quotes ald
\end_inset

Weasel
\begin_inset Quotes ard
\end_inset

 style algorithm could run as follows:
\end_layout

\begin_layout Enumerate
Start with a random string of 28 characters.
\end_layout

\begin_layout Enumerate
Make
\begin_inset Formula $n$
\end_inset

 copies of the string (reproduce).
\end_layout

\begin_layout Enumerate
Mutate the characters with an mutation probability of 5%.
\end_layout

\begin_layout Enumerate
Compare each new string with the target string 
\begin_inset Quotes ald
\end_inset

METHINKS IT IS LIKE A WEASEL
\begin_inset Quotes ard
\end_inset

, and give each a score (the number of letters in the string that are correct
 and in the correct position).
\end_layout

\begin_layout Enumerate
If any of the new strings has a perfect score (
\begin_inset Formula $28$
\end_inset

), halt.
 Otherwise, take the highest scoring string, and go to step 2.
\end_layout

\begin_layout Standard
Richard Dawkins was also very careful to point out the limitations of this
 simulation:
\end_layout

\begin_layout Quote
Although the monkey/Shakespeare model is useful for explaining the distinction
 between single-step selection and cumulative selection, it is misleading
 in important ways.
 One of these is that, in each generation of selective 
\begin_inset Quotes ald
\end_inset

breeding
\begin_inset Quotes ard
\end_inset

, the mutant 
\begin_inset Quotes ald
\end_inset

progeny
\begin_inset Quotes ard
\end_inset

 phrases were judged according to the criterion of resemblance to a distant
 ideal target, the phrase METHINKS IT IS LIKE A WEASEL.
 Life isn't like that.
 Evolution has no long-term goal.
 There is no long-distance target, no final perfection to serve as a criterion
 for selection, although human vanity cherishes the absurd notion that our
 species is the final goal of evolution.
 In real life, the criterion for selection is always short-term, either
 simple survival or, more generally, reproductive success.
\begin_inset CommandInset citation
LatexCommand cite
key "dawkins1986"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
If you want to write a Weasel program with the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library, you need to use the special
\family typewriter
 Weasel\SpecialChar softhyphen
Selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
WeaselSelector
\end_layout

\end_inset


\family default
 and
\family typewriter
 Weasel\SpecialChar softhyphen
Mutator
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
WeaselMutator
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public class WeaselProgram {
\end_layout

\begin_layout Plain Layout

	private static final String TARGET =
\end_layout

\begin_layout Plain Layout

        "METHINKS IT IS LIKE A WEASEL";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	private static int score(final Genotype<CharacterGene> gt) {
\end_layout

\begin_layout Plain Layout

		final var src = gt.chromosome().as(CharSequence.class);
\end_layout

\begin_layout Plain Layout

		return IntStream.range(0, TARGET.length())
\end_layout

\begin_layout Plain Layout

			.map(i -> src.charAt(i) == TARGET.charAt(i) ? 1 : 0)
\end_layout

\begin_layout Plain Layout

			.sum();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public static void main(final String[] args) {
\end_layout

\begin_layout Plain Layout

		final CharSeq chars = CharSeq.of("A-Z ");
\end_layout

\begin_layout Plain Layout

		final Factory<Genotype<CharacterGene>> gtf = Genotype.of(
\end_layout

\begin_layout Plain Layout

			new CharacterChromosome(chars, TARGET.length())
\end_layout

\begin_layout Plain Layout

		);
\end_layout

\begin_layout Plain Layout

		final Engine<CharacterGene, Integer> engine = Engine
\end_layout

\begin_layout Plain Layout

			.builder(WeaselProgram::score, gtf)
\end_layout

\begin_layout Plain Layout

			.populationSize(150)
\end_layout

\begin_layout Plain Layout

			.selector(new WeaselSelector<>())
\end_layout

\begin_layout Plain Layout

			.offspringFraction(1)
\end_layout

\begin_layout Plain Layout

			.alterers(new WeaselMutator<>(0.05))
\end_layout

\begin_layout Plain Layout

			.build();
\end_layout

\begin_layout Plain Layout

		final Phenotype<CharacterGene, Integer> result = engine
\end_layout

\begin_layout Plain Layout

            .stream()
\end_layout

\begin_layout Plain Layout

			.limit(byFitnessThreshold(TARGET.length() - 1))
\end_layout

\begin_layout Plain Layout

			.peek(r -> System.out.println(
\end_layout

\begin_layout Plain Layout

				r.totalGenerations() + ": " +
\end_layout

\begin_layout Plain Layout

				r.bestPhenotype()))
\end_layout

\begin_layout Plain Layout

			.collect(toBestPhenotype());
\end_layout

\begin_layout Plain Layout

		System.out.println(result);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
Weasel program
\begin_inset CommandInset label
LatexCommand label
name "lis:Weasel-program"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Weasel-program"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how to implement the
\family typewriter
 Weasel\SpecialChar softhyphen
Program
\family default
 with
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
.
 Step (1) and (2) of the algorithm is done implicitly when the initial populatio
n is created.
 The third step is done by the
\family typewriter
 Weasel\SpecialChar softhyphen
Mutator
\family default
, with mutation probability of 0.05.
 Step (4) is done by the
\family typewriter
 Weasel\SpecialChar softhyphen
Selector
\family default
 together with the configured offspring fraction of one.
 The
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 is limited by the
\family typewriter
 Limits\SpecialChar softhyphen
.\SpecialChar softhyphen
by\SpecialChar softhyphen
Fitness\SpecialChar softhyphen
Threshold
\family default
, which is set to 
\begin_inset Formula $score_{max}-1$
\end_inset

.
 In the current example this value is set to
\family typewriter
 TARGET\SpecialChar softhyphen
.length()
\family default
 - 1 = 27.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
scriptsize
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/WeaselProgram.out}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The (shortened) output of the Weasel program (listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Weasel-program"
plural "false"
caps "false"
noprefix "false"

\end_inset

) shows, that the optimal solution is reached in generation 
\begin_inset Formula $46$
\end_inset

.
\end_layout

\begin_layout Subsection
Modifying
\family typewriter
 Engine
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Modifying Engine
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The current design of
\family typewriter
 Engine
\family default
 allows for creating multiple independent
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
s from a single
\family typewriter
 Engine
\family default
 instance.
 One drawback of this approach is, that the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 runs with the same evolution parameters until the stream is truncated.
 It is not possible to change the stream's
\family typewriter
 Engine
\family default
 configuration during the evolution process.
 This is the purpose of the
\family typewriter
 Evolution\SpecialChar softhyphen
Streamable
\family default
 interface.
 It is similar to the Java
\family typewriter
 Iterable
\family default
 interface and abstracts the
\family typewriter
 EvolutionStream
\family default
 creation.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface EvolutionStreamable<
\end_layout

\begin_layout Plain Layout

    G extends Gene<?, G>,
\end_layout

\begin_layout Plain Layout

    C extends Comparable<? super C>
\end_layout

\begin_layout Plain Layout

> {
\end_layout

\begin_layout Plain Layout

    EvolutionStream<G, C>
\end_layout

\begin_layout Plain Layout

    stream(Supplier<EvolutionStart<G, C>> start);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    EvolutionStream<G, C> stream(EvolutionInit<G> init);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    EvolutionStreamable<G, C>
\end_layout

\begin_layout Plain Layout

    limit(Supplier<Predicate<? super EvolutionResult<G, C>>> p)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
EvolutionStreamable
\family default
 interface
\begin_inset CommandInset label
LatexCommand label
name "lis:EvolutionStreamable-interface"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
EvolutionStreamable
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:EvolutionStreamable-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the main methods of the
\family typewriter
 Evo\SpecialChar softhyphen
lu\SpecialChar softhyphen
tion\SpecialChar softhyphen
Stream\SpecialChar softhyphen
able
\family default
 interface.
 The existing
\family typewriter
 stream
\family default
 methods take an initial value, which allows to concatenate different engines.
 With the
\family typewriter
 limit
\family default
 method it is possible to limit the size of the created
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 instances.
 The
\family typewriter
 io.jenetics.ext
\family default
 module contains additional classes which allows for concatenating evolution
\family typewriter
 Engines
\family default
 with different configurations, which will then create one varying
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
.
 This additional
\family typewriter
 Engine
\family default
 classes are:
\end_layout

\begin_layout Enumerate

\family typewriter
ConcatEngine
\family default
 and
\end_layout

\begin_layout Enumerate

\family typewriter
CyclicEngine.
\end_layout

\begin_layout Subsubsection
ConcatEngine
\family typewriter

\begin_inset CommandInset label
LatexCommand label
name "subsec:ConcatEngine"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout

\family typewriter
ConcatEngine
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 ConcatEngine
\family default
 class allows for creating more than one
\family typewriter
 Engine
\family default
 with different configurations, and combine it into one
\family typewriter
 Evolution\SpecialChar softhyphen
Streamable
\family default
 (
\family typewriter
Engine
\family default
).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/ConcatEngine.eps
	width 95text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Engine-concatenation"

\end_inset


\family typewriter
Engine
\family default
 concatenation
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Engine-concatenation"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 of two concatenated
\family typewriter
 Engine
\family default
s works.
 You can create the first partial
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 with an optional start value.
 If the first
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 stops, its final
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 is used as start value of the second
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
, created by the second evolution
\family typewriter
 Engine
\family default
.
 It is important that the evolution
\family typewriter
 Engine
\family default
s used for concatenation are limited.
 Otherwise the created
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 will only use the first
\family typewriter
 Engine
\family default
, since it is not limited.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
The concatenated evolution Engines must be limited (by calling
\family typewriter
 Engine::limit
\family sans
), otherwise only the first
\family typewriter
 Engine
\family sans
 is used executing the resulting EvolutionStream.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following code sample shows how to create an
\family typewriter
 EvolutionStream
\family default
 from two concatenate
\family typewriter
 Engine
\family default
s.
 As you can see, the two
\family typewriter
 Engine
\family default
s are limited.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<DoubleGene, Double> engine1 = ...;
\end_layout

\begin_layout Plain Layout

final Engine<DoubleGene, Double> engine2 = ...;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

final Genotype<DoubleGene> result =
\end_layout

\begin_layout Plain Layout

    ConcatEngine.of(
\end_layout

\begin_layout Plain Layout

        engine1.limit(50),
\end_layout

\begin_layout Plain Layout

        engine2.limit(() -> Limits.bySteadyFitness(30)))
\end_layout

\begin_layout Plain Layout

    .stream()
\end_layout

\begin_layout Plain Layout

        .collect(EvolutionResult.toBestGenotype());
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A practical use case for the
\family typewriter
 Engine
\family default
 concatenation is, when you want to do a broader exploration of the search
 space at the beginning and narrow it with the following
\family typewriter
 Engine
\family default
.
 In such a setup, the first
\family typewriter
 Engine
\family default
 would be configured with a
\family typewriter
 Mutator
\family default
 with a relatively big mutation probability.
 The mutation probabilities of the following
\family typewriter
 Engine
\family default
 would then be gradually reduced.
\end_layout

\begin_layout Subsubsection
CyclicEngine
\family typewriter

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
CyclicEngine
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 CyclicEngine
\family default
 is similar to the
\family typewriter
 ConcatEngine
\family default
.
 Where the
\family typewriter
 Concat\SpecialChar softhyphen
Engine
\family default
 stops the evolution, when the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 of the last engine terminates, the
\family typewriter
 Cyclic\SpecialChar softhyphen
Engine
\family default
 continues with a new
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 from the first
\family typewriter
 Engine
\family default
.
 The evolution flow of the
\family typewriter
 Cyclic\SpecialChar softhyphen
Engine
\family default
 is shown in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Cyclic-Engine"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/CyclicEngine.eps
	width 95text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Cyclic-Engine"

\end_inset

Cyclic
\family typewriter
Engine
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since the
\family typewriter
 CyclicEngine
\family default
 creates unlimited streams, although the participating
\family typewriter
 Engine
\family default
s are all creating limited streams, the resulting
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
\emph on
 must
\emph default
 be limited as well.
 The code snippet below shows the creation and execution of a
\emph on
cyclic
\family typewriter
\emph default
 EvolutionStream
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Genotype<DoubleGene> result =
\end_layout

\begin_layout Plain Layout

    CyclicEngine.of(
\end_layout

\begin_layout Plain Layout

        engine1.limit(50),
\end_layout

\begin_layout Plain Layout

        engine2.limit(() -> Limits.bySteadyFitness(15)))
\end_layout

\begin_layout Plain Layout

    .stream()
\end_layout

\begin_layout Plain Layout

        .limit(Limits.bySteadyFitness(50))
\end_layout

\begin_layout Plain Layout

        .collect(EvolutionResult.toBestGenotype());
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The reason for using a cyclic
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 is similar to the reason for using a concatenated
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
.
 It allows you to do a broad search, followed by a narrowed exploration.
 This cycle is then repeated until the limiting predicate of the
\emph on
 outer
\emph default
 stream terminates the evolution process.
\end_layout

\begin_layout Subsection
Multi-objective optimization
\begin_inset CommandInset label
LatexCommand label
name "subsec:Multi-objective-optimization"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Multi-objective optimization
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
MOO
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A Multi-objective optimization Problem (MOP) can be defined as the problem
 of finding
\end_layout

\begin_layout Quote
a vector of decision variables which satisfies constraints and optimizes
 a vector function whose elements represent the objective functions.
 These functions form a mathematical description of performance criteria
 which are usually in conflict with each other.
 Hence, the term 
\begin_inset Quotes ald
\end_inset

optimize
\begin_inset Quotes ard
\end_inset

 means finding such a solution which would give the values of all the objective
 functions acceptable to the decision maker.
\begin_inset CommandInset citation
LatexCommand cite
key "Osyczka1985"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
There are several ways for solving multiobjective problems.
 An excellent theoretical foundation is given in
\begin_inset CommandInset citation
LatexCommand cite
key "CoelloCoello2007"
literal "true"

\end_inset

.
 The algorithms implemented by
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 are based in therms of Pareto optimality as described in
\begin_inset CommandInset citation
LatexCommand cite
key "Fortin2013"
literal "true"

\end_inset

,
\begin_inset CommandInset citation
LatexCommand cite
key "Deb:2002:FEM:2221359.2221582"
literal "true"

\end_inset

 and
\begin_inset CommandInset citation
LatexCommand cite
key "Konak2006"
literal "true"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Pareto efficiency
\begin_inset CommandInset label
LatexCommand label
name "subsec:Pareto-efficiency"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Pareto efficiency
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Pareto efficiency is named after the Italian economist and political scientist
 Vilfredo Pareto
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Vilfredo_Pareto
\end_layout

\end_inset


\end_layout

\end_inset

.
 He used the concept in his studies of economic efficiency and income distributi
on.
 The concept has been applied in different academic fields such as economics,
 engineering, and the life sciences.
 Pareto efficiency says that an allocation is efficient if an action makes
 some individual better off and no individual worse off.
 In contrast to single-objective optimization, where usually only one optimal
 solution exits, the multi-objective optimization creates a set of optimal
 solutions.
 The optimal solutions are also known as the Pareto front or Pareto set.
\end_layout

\begin_layout Definition*

\series bold
(Pareto efficiency
\series default

\begin_inset CommandInset citation
LatexCommand cite
key "CoelloCoello2007"
literal "true"

\end_inset


\series bold
):
\series default
 A solution, 
\begin_inset Formula $\mathbf{x}$
\end_inset

, is said to be Pareto optimal iff there is no 
\begin_inset Formula $\mathbf{x}'$
\end_inset

 for which 
\begin_inset Formula $\mathbf{v}=\left(f_{1}\left(\mathbf{x}'\right),...,f_{k}\left(\mathbf{x}'\right)\right)$
\end_inset

 dominates 
\begin_inset Formula $\mathbf{u}=\left(f_{1}\left(\mathbf{x}\right),...,f_{k}\left(\mathbf{x}\right)\right)$
\end_inset

.
\end_layout

\begin_layout Standard
The definition says that 
\begin_inset Formula $\mathbf{x}^{*}$
\end_inset

 is Pareto optimal if there exists no feasible vector,
\begin_inset Formula $\mathbf{x}$
\end_inset

, which would decrease some criterion without causing a simultaneous increase
 in at least one other criterion.
\end_layout

\begin_layout Definition*

\series bold
(Pareto dominance
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Pareto dominance
\end_layout

\end_inset


\series default

\begin_inset CommandInset citation
LatexCommand cite
key "CoelloCoello2007"
literal "true"

\end_inset


\series bold
):
\series default
 A vector 
\begin_inset Formula $\mathbf{u}=\left(u_{1},...,u_{k}\right)$
\end_inset

 is said to
\series bold
 dominate
\series default
 another vector 
\begin_inset Formula $\mathbf{v}=\left(v_{1},...,v_{k}\right)$
\end_inset

 (denoted by 
\begin_inset Formula $\mathbf{u}\succeq\mathbf{v}$
\end_inset

) iff 
\begin_inset Formula $\mathbf{u}$
\end_inset

 is partially greater than 
\begin_inset Formula $\boldsymbol{v}$
\end_inset

, i.e., 
\begin_inset Formula $\forall i\in\left\{ 1,...,k\right\} $
\end_inset

,
\begin_inset Formula $u_{i}\geq v_{i}\land\exists i\in\left\{ 1,...,k\right\} :\,\,u_{i}>v_{i}$
\end_inset

.
\end_layout

\begin_layout Standard
After this two basic definitions, lets have a look at a simple example.
 Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Circle-points"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows some points of a two-dimensional solution space.
 For simplicity, the points will all lie within a circle with radius
\begin_inset Formula $1$
\end_inset

 and center point of 
\begin_inset Formula $\left(1,1\right)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/circle_points.svg
	lyxscale 80
	width 53text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Circle-points"

\end_inset

Circle points
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Maximizing-Pareto-front"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the Pareto front of a maximization problem.
 This means we are searching for solutions that try to maximize the 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 coordinate at the same time.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/circle_max_front.svg
	lyxscale 80
	width 53text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Maximizing-Pareto-front"

\end_inset

Maximizing Pareto front
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Minimizing-Pareto-front"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the Pareto front if we try to minimize the
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $y$
\end_inset

 coordinate at the same time.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/circle_min_front.svg
	lyxscale 80
	width 53text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Minimizing-Pareto-front"

\end_inset

Minimizing Pareto front
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Implementing classes
\end_layout

\begin_layout Standard
The classes, used for solving multi-objective problems, reside in the
\family typewriter
 io\SpecialChar softhyphen
.jenetics\SpecialChar softhyphen
.ext\SpecialChar softhyphen
.moea
\family default
 package.
 Originally, the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library focuses on solving single-objective problems.
 This drives the design decision to force the return value of the fitness
 function to be
\family typewriter
 Comparable
\family default
.
 If the result type of the fitness function is a vector, it is no longer
 clear how to make the results comparable.

\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 chooses to use the Pareto dominance relation (see section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Pareto-efficiency"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 The Pareto dominance relation, 
\begin_inset Formula $\succ$
\end_inset

, defines a strict partial order, which means 
\begin_inset Formula $\succ$
\end_inset

 is
\end_layout

\begin_layout Enumerate
irreflexive: 
\begin_inset Formula $\mathbf{u}\nsucc\mathbf{u}$
\end_inset

,
\end_layout

\begin_layout Enumerate
transitive: 
\begin_inset Formula $\mathbf{u}\succ\mathbf{v}\land\mathbf{v}\succ\mathbf{w}\Rightarrow\mathbf{u}\succ\mathbf{w}$
\end_inset

 and
\end_layout

\begin_layout Enumerate
asymmetric: 
\begin_inset Formula $\mathbf{u}\succ\mathbf{v}\Rightarrow\mathbf{v}\nsucc\mathbf{u}$
\end_inset

 .
\end_layout

\begin_layout Standard
The
\family typewriter
 io.jenetics.ext.moea
\family default
 package contains the classes needed for doing multi-objective optimization.
 One of the central types is the
\family typewriter
 Vec
\family default
 interface, which allows you to wrap a vector of any element type into a
\family typewriter
 Comparable
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface Vec<T> extends Comparable<Vec<T>> {
\end_layout

\begin_layout Plain Layout

    T data();
\end_layout

\begin_layout Plain Layout

    int length();
\end_layout

\begin_layout Plain Layout

    ElementComparator<T> comparator();
\end_layout

\begin_layout Plain Layout

    ElementDistance<T> distance();
\end_layout

\begin_layout Plain Layout

    Comparator<T> dominance();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Vec-interface"

\end_inset


\family typewriter

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Vec
\end_layout

\end_inset

Vec
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Vec-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the necessary methods of the
\family typewriter
 Vec
\family default
 interface.
 These methods are sufficient to do all the optimization calculations.
 The
\family typewriter
 data()
\family default
 method returns the underlying vector type, like
\family typewriter
 double[]
\family default
 or
\family typewriter
 int[]
\family default
.
 With the
\family typewriter
 Element\SpecialChar softhyphen
Comparator
\family default
, which is returned by the
\family typewriter
 comparator()
\family default
 method, it is possible to compare single elements of the vector type
\family typewriter
 T
\family default
.
 This is similar to the
\family typewriter
 Element\SpecialChar softhyphen
Distance
\family default
 function, returned by the
\family typewriter
 distance()
\family default
 method, which calculates the distance of two vector elements.
 The last method,
\family typewriter
 dominance()
\family default
, returns the Pareto dominance comparator, 
\begin_inset Formula $\succ$
\end_inset

.
 Since it is quite a bothersome to implement all these needed methods, the
\family typewriter
 Vec
\family default
 interface comes with a set of factory methods, which allows for creating
\family typewriter
 Vec
\family default
 instance for some primitive array types.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Vec<int[]> ivec = Vec.of(1, 2, 3);
\end_layout

\begin_layout Plain Layout

final Vec<long[]> lvec = Vec.of(1L, 2L, 3L);
\end_layout

\begin_layout Plain Layout

final Vec<double[]> dvec = Vec.of(1.0, 2.0, 3.0);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For efficiency reason, the primitive arrays are not copied, when the
\family typewriter
 Vec
\family default
 instance is created.
 This lets you, theoretically, change the value of a created
\family typewriter
 Vec
\family default
 instance, which will lead to unexpected results.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
Although the
\family typewriter
 Vec
\family sans
 interface extends the
\family typewriter
 Comparable
\family sans
 interface, it violates its general contract.
 It only implements the Pareto dominance relation, which defines a partial
 order.
 Trying to sort a list of
\family typewriter
 Vec
\family sans
 objects, might lead to an exception (thrown by the sorting method) at runtime.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The second difference to the single-objective setup is the
\family typewriter
 Evolution\SpecialChar softhyphen
Result
\family default
 collector.
 In the single-objective case, we will only get one
\emph on
 best
\emph default
 result, which is different in the multi-object optimization.
 As we have seen in section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Pareto-efficiency"
plural "false"
caps "false"
noprefix "false"

\end_inset

, we no longer have only one result, we have a set of Pareto optimal solutions.
 There is a predefined collector in the
\family typewriter
 io.jenetics.ext.moea
\family default
 package,
\family typewriter
 MOEA\SpecialChar softhyphen
::to\SpecialChar softhyphen
Pareto\SpecialChar softhyphen
Set(\SpecialChar softhyphen
Int\SpecialChar softhyphen
Range\SpecialChar softhyphen
)
\family default
, which collects the Pareto optimal
\family typewriter
 Pheno\SpecialChar softhyphen
types
\family default
 into an
\family typewriter
 ISeq
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final ISeq<Phenotype<DoubleGene, Vec<double[]>>> paretoSet =
\end_layout

\begin_layout Plain Layout

    engine.stream()
\end_layout

\begin_layout Plain Layout

        .limit(100)
\end_layout

\begin_layout Plain Layout

        .collect(MOEA.toParetoSet(IntRange.of(30, 50)));
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since there exists a potential infinite number of Pareto optimal solutions,
 you have to define desired number of set elements.
 This is done with an
\family typewriter
 IntRange
\family default
 object, where you can specify the minimal and maximal set size.
 The example above will return a Pareto size with size in the range of 
\begin_inset Formula $\left[30,50\right)$
\end_inset

.
 For reducing the Pareto set size, the distance between two vector elements
 is taken into account.
 Points which lie very close to each other are removed.
 This leads to a result, where the Pareto optimal solutions are, more or
 less, evenly distributed over the whole Pareto front.
 The
\emph on
 crowding distance
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The crowding distance value of a solution provides an estimate of the density
 of solutions surrounding that solution.
 The crowding distance value of a particular solution is the average distance
 of its two neighboring solutions.
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://www.igi-global.com/dictionary/crowding-distance/42740
\end_layout

\end_inset

.
\end_layout

\end_inset


\emph default
 measure is used for calculating the proximity of two points and it is described
 in
\begin_inset CommandInset citation
LatexCommand cite
key "CoelloCoello2007"
literal "true"

\end_inset

 and
\begin_inset CommandInset citation
LatexCommand cite
key "Fortin2013"
literal "true"

\end_inset

.
\end_layout

\begin_layout Standard
Till now we have described the multi-objective result type (
\family typewriter
Vec
\family default
) and the final collecting of the Pareto optimal solution.
 So lets create a simple multi-objective problem and an appropriate
\family typewriter
 Engine
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Problem<double[], DoubleGene, Vec<double[]>> problem =
\end_layout

\begin_layout Plain Layout

    Problem.of(
\end_layout

\begin_layout Plain Layout

        v -> Vec.of(v[0]*cos(v[1]) + 1, v[0]*sin(v[1]) + 1),
\end_layout

\begin_layout Plain Layout

        Codecs.ofVector(
\end_layout

\begin_layout Plain Layout

            DoubleRange.of(0, 1),
\end_layout

\begin_layout Plain Layout

            DoubleRange.of(0, 2*PI)
\end_layout

\begin_layout Plain Layout

        )
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

final Engine<DoubleGene, Vec<double[]>> engine =
\end_layout

\begin_layout Plain Layout

    Engine.builder(problem)
\end_layout

\begin_layout Plain Layout

        .offspringSelector(new TournamentSelector<>(4))
\end_layout

\begin_layout Plain Layout

        .survivorsSelector(UFTournamentSelector.ofVec())
\end_layout

\begin_layout Plain Layout

        .build();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The fitness function in the example problem above will create 2D-points
 which will all lies within a circle with a center of 
\begin_inset Formula $\left(1,1\right)$
\end_inset

.
 In figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Maximizing-Pareto-front"
plural "false"
caps "false"
noprefix "false"

\end_inset

 you can see how the resulting solution will look like.
 There is almost no difference in creating an evolution
\family typewriter
 Engine
\family default
 for single- or multi-objective optimization.
 You only have to take care to choose the right
\family typewriter
 Selector
\family default
.
 Not all
\family typewriter
 Selector
\family default
s will work for multi-objective optimization.
 This include all
\family typewriter
 Selector
\family default
s which needs a
\family typewriter
 Number
\family default
 fitness type and where the population needs to be sorted
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Since the
\begin_inset Formula $\succ$
\end_inset

 relation doesn't define a total order, sorting the population will lead
 to an
\family typewriter
Illegal\SpecialChar softhyphen
Argument\SpecialChar softhyphen
Exception
\family default
 at runtime.
\end_layout

\end_inset

.
 The
\family typewriter
 Selector
\family default
 which works fine in a multi-objective setup is the
\family typewriter
 TournamentSelector
\family default
.
 Additionally you can use one of the special MO selectors:
\family typewriter
 NSGA2Selector
\family default
 and
\family typewriter
 UFTournamentSelector
\family default
.
\end_layout

\begin_layout Paragraph
NSGA2 selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
NSGA2 selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This selector selects the first elements of the population, which has been
 sorted by the Crowded-comparison operator (equation
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:crowding-distance"
plural "false"
caps "false"
noprefix "false"

\end_inset

), 
\begin_inset Formula $\underset{n}{\succ}$
\end_inset

, as described in
\begin_inset CommandInset citation
LatexCommand cite
key "Deb:2002:FEM:2221359.2221582"
literal "true"

\end_inset


\family typewriter

\begin_inset Formula 
\begin{eqnarray}
i\underset{n}{\succ}j & \mathsf{if} & \left(i_{rank}<j_{rank}\right)\lor\left(\left(i_{rank}=j_{rank}\right)\land i_{dist}>j_{dist}\right),\label{eq:crowding-distance}
\end{eqnarray}

\end_inset


\family default
where 
\begin_inset Formula $i_{rank}$
\end_inset

 denotes the non-domination rank of individual 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $i_{dist}$
\end_inset

 the crowding distance of individual
\begin_inset Formula $i$
\end_inset

.
\end_layout

\begin_layout Paragraph
Unique fitness tournament selector
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Unique fitness tournament selector
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The selection of unique fitnesses lifts the selection bias towards over
 represented fitnesses by reducing multiple solutions sharing the same fitness
 to a single point in the objective space.
 It is therefore no longer required to assign a crowding distance of zero
 to individual of equal fitness as the selection operator correctly enforces
 diversity preservation by picking unique points in the objective space.
\begin_inset CommandInset citation
LatexCommand cite
key "Fortin2013"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
Since the multi-objective optimization (MOO) classes are an extensions to
 the existing evolution
\family typewriter
 Engine
\family sans
, the implementation doesn't exactly follow an established algorithm, like
 NSGA2 or SPEA2.
 The results and performance, described in the relevant papers, are therefore
 not directly comparable.
 See listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Genetic-algorithm"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for comparing the
\series bold
\shape smallcaps
 Jenetics
\series default
\shape default
 evolution flavor.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Termination
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Termination
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the existing termination strategies, implemented in the
\family typewriter
 Limits
\family default
 class, presumes a total order of the fitness values.
 This assumption holds for single-objective optimization problems, but not
 for multi-objective problems.
 Only termination strategies which don't rely on the total order of the
 fitness value, can be safely used.
 The following termination strategies can be used for multi-objective problems:
\end_layout

\begin_layout Itemize

\family typewriter
Limits::byFixedGeneration
\family default
,
\end_layout

\begin_layout Itemize

\family typewriter
Limits::byExecutionTime
\family default
 and
\end_layout

\begin_layout Itemize

\family typewriter
Limits::byGeneConvergence
\family default
.
\end_layout

\begin_layout Standard
All other strategies doesn't have a well defined termination behavior.
\end_layout

\begin_layout Subsubsection
Mixed optimization
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Mixed optimization
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Multi-objective optimization!Mixed optimization
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
MOO!Mixed optimization
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Till now, we have only considered MOO problems, where all objectives where
 either minimized or maximized.
 This property might be to restrictive for some problem classes.
 If you have MOO problem with three objectives, for example, where objective
 one and three must be minimized and objective two has to be maximized,
 you need some additional mechanisms for doing this.
 Defining the optimization direction of the
\family typewriter
 Engine
\family default
 is not sufficient.
 The fitness result
\family typewriter
 Vec
\family default
 has to be configured accordingly.
 This can be done by using the most generic factory method of the
\family typewriter
 Vec
\family default
 interface.
 Since this is quite bothersome, the
\family typewriter
 Vec\SpecialChar softhyphen
Factory
\family default
 can be used for this task.
 Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:VecFactory-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the main method of the interface.
 The additional static factory methods has been omitted.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

@FunctionalInterface
\end_layout

\begin_layout Plain Layout

public interface VecFactory<T> {
\end_layout

\begin_layout Plain Layout

    Vec<T> newVec(final T array);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
\begin_inset CommandInset label
LatexCommand label
name "lis:VecFactory-interface"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
VecFactory
\end_layout

\end_inset

VecFactory
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset

Instead of creating the solution
\family typewriter
 Vec
\family default
 instances directly, the fitness function must create it with a properly
 configured
\family typewriter
 Vec\SpecialChar softhyphen
Factory
\family default
 instance.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final VecFactory<double[]> factory = VecFactory.ofDoubleVec(
\end_layout

\begin_layout Plain Layout

    Optimize.MINIMUM,
\end_layout

\begin_layout Plain Layout

    Optimize.MAXIMUM,
\end_layout

\begin_layout Plain Layout

    Optimize.MINIMUM
\end_layout

\begin_layout Plain Layout

);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Vec<double[]> fitness(final double[] point) {
\end_layout

\begin_layout Plain Layout

    final double x = point[0];
\end_layout

\begin_layout Plain Layout

    final double y = point[1];
\end_layout

\begin_layout Plain Layout

    return factory.newVec(new double[] {
\end_layout

\begin_layout Plain Layout

        sin(x)*y,
\end_layout

\begin_layout Plain Layout

        cos(y)*x,
\end_layout

\begin_layout Plain Layout

        x + y
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The example code above shows how the
\family typewriter
 Vec\SpecialChar softhyphen
Factory
\family default
 must be configured to create
\family typewriter
 Vec<double[]>
\family default
 objects with the desired optimization properties.
 In the fitness function you will then use the
\family typewriter
 Vec\SpecialChar softhyphen
Factory
\family default
 instance for creating the fitness values instead of the
\family typewriter
 Vec::of(double...)
\family default
 factory method.
 The optimization direction of the evolution
\family typewriter
 Engine
\family default
 will remain at its default value,
\family typewriter
 Opti\SpecialChar softhyphen
mize\SpecialChar softhyphen
.MAX\SpecialChar softhyphen
IMUM
\family default
.
 If you configure the
\family typewriter
 Engine
\family default
 for minimization, the configured optimization directions in the
\family typewriter
 Vec\SpecialChar softhyphen
Factory
\family default
 will be reversed.
 That means, the first objective will be maximized instead of minimized,
 and so on.
\end_layout

\begin_layout Subsection
Grammatical evolution
\begin_inset CommandInset label
LatexCommand label
name "subsec:Grammatical-evolution"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Grammatical evolution
\end_layout

\end_inset


\end_layout

\begin_layout Standard
One of the difficulties when defining a codec
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Codec"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\end_inset

 for a given problem, is the creation of invalid solution candidates or
 individuals.
 Using constraints is one way of handling this problem, which is described
 in section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Constraint"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Another possibility is to assign bad fitness values to invalid individuals.
 This might work to some degree, but at the cost of additional CPU and evolution
 time.
 In the best case, your codec is creating no invalid solutions at all.
 Grammatical evolution (GE) can help you to achieve this.
 GE was introduced by Michael O’Neill and Conor Ryan
\begin_inset CommandInset citation
LatexCommand cite
key "ryan1998grammatical,ONeil2003,Ryan2018"
literal "false"

\end_inset

 for solving genetic programming (GP)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See section
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Genetic-programming"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\end_inset

 problems.
 Although the initial realm for GE was creating/evolving programs in arbitrary
 languages, it is not restricted to this area.
 GE can be used for every problems, where the problem domain can be expressed
 as
\emph on
 sentences
\emph default
 of a context-free language (CFL)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Context-free_language
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/GrammaticalEvolution.svg
	lyxscale 80
	width 45text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Grammatical-evolution"

\end_inset

Grammatical evolution
\end_layout

\end_inset


\end_layout

\end_inset

GE requires an additional
\emph on
 mapping
\emph default
 step for creating a sentence (program) from a given CFG.
 Diagram
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Grammatical-evolution"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the principal decoding process of GE.
 A
\family typewriter
 Bit\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 or
\family typewriter
 Int\SpecialChar softhyphen
eger\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 determines the rules which are used for creating the sentences.
 The grammar is usually given in Backus-Naur form (BNF).
 The result is the construction of a syntactically correct program from
 a binary string which can then be evaluated by a fitness function.
 In the following sections, the building blocks of GE are described in a
 greater detail.
\end_layout

\begin_layout Subsubsection
Context-free grammar
\begin_inset CommandInset label
LatexCommand label
name "subsec:Context-free-grammar"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Context-free grammar
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
CFG
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A context-free grammar (CFG)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Context-free_grammar
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Greenlaw1998"
literal "false"

\end_inset

 basically consists of a finite set of grammar rules.
 The grammar rules consists of two kind of symbols: 1) the terminals, which
 are the symbols of the alphabet underlying the languages, and 2) the
\emph on
 non
\emph default
-terminals, which behave like variables ranging over strings of terminals.
 A rule is of the form 
\begin_inset Formula $A\rightarrow\alpha$
\end_inset

, where 
\begin_inset Formula $A$
\end_inset

 is a non-terminal, and 
\begin_inset Formula $\alpha$
\end_inset

 is a terminal or non-terminal symbol.
 CFGs are used to
\emph on
 generate
\emph default
 strings (sentences), rather than
\emph on
 recognize
\emph default
 strings.
\end_layout

\begin_layout Definition*

\series bold
(CFG):
\series default
 A context-free grammar, 
\begin_inset Formula $G$
\end_inset

, is defined by the tuple 
\begin_inset Formula $G=\left(\mathcal{N},\mathcal{T},\mathcal{R},\mathcal{S}\right)$
\end_inset

, where
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathcal{N}$
\end_inset

 is a finite set of
\emph on
 non-terminal
\emph default
 symbols called the
\emph on
 variables
\emph default
.
 Every symbol represents a different type of phrase in the sentence.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathcal{T}$
\end_inset

 is a finite set of
\emph on
 terminal
\emph default
 symbols, not element of 
\begin_inset Formula $\mathcal{N}$
\end_inset

.
 Terminals make up the actual content of the sentences defined by 
\begin_inset Formula $G$
\end_inset

.
 The terminals are the alphabet of the language.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathcal{R}$
\end_inset

 is a finite relation in
\begin_inset Formula $\mathcal{N}\times\left(\mathcal{N}\cup\mathcal{T}\right)^{*}$
\end_inset

.
 Members of 
\begin_inset Formula $\mathcal{R}$
\end_inset

 are the rewrite rules of the grammar.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathcal{S}\in\mathcal{N}$
\end_inset

 is the start symbol and represents the whole sentence.
\end_layout

\begin_layout Subsubsection
Backus-Naur form
\begin_inset CommandInset label
LatexCommand label
name "subsec:Backus-Naur-form"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Backus-Naur form
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
BNF
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Backus-Naur form (BNF)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Backus-Naur_form
\end_layout

\end_inset


\end_layout

\end_inset

 is a traditional form to represent a CFG.
 It is used to formally define the grammar of a language, so that there
 is no ambiguity as to what is allowed and what is not.
 BNF uses a range of symbols and expressions to create production rules.
 The names of the production rules are put within angle brackets,
\family typewriter
 <...>
\family default
, and the alternatives are separated by vertical bars,
\family typewriter
|
\family default
.
 A simple BNF production rule might look like this:
\end_layout

\begin_layout LyX-Code
<num> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
\end_layout

\begin_layout Standard
In this example
\family typewriter
 num
\family default
 is the name of the production rule and the values
\family typewriter
 1..9
\family default
 represent the terminal symbols, associated with the rule.
 If a non-terminal symbol appears on the right hand side, it means that
 there will be another production rule (or a set of rules) to define its
 replacement.
\end_layout

\begin_layout LyX-Code
<expr> ::= <num> | <var> | <expr> <op> <expr>
\end_layout

\begin_layout Standard
This shows that
\family typewriter
 exp
\family default
 is either a
\family typewriter
 num
\family default
 or
\family typewriter
 var
\family default
 or two
\family typewriter
 expr
\family default
, concatenated by an
\family typewriter
 op
\family default
.
 All components are non-terminal, therefore further production rules are
 required.
\end_layout

\begin_layout LyX-Code
<op>  ::= + | - | * | /
\end_layout

\begin_layout LyX-Code
<var> ::= x | y
\end_layout

\begin_layout Standard
This two rules defines four
\family typewriter
 op
\family default
 symbols, 
\begin_inset Formula $\left\{ \mathsf{\mathtt{x,-,*,/}}\right\} $
\end_inset

, and two
\family typewriter
 var
\family default
 terminals, 
\begin_inset Formula $\left\{ \mathtt{x,y}\right\} $
\end_inset

.
 Production rules for the syntax of a language might come as a large set
 of BNF statements that specify how every aspect of the language is defined.
 Every non-terminal symbol on the right hand side of a production rule,
 must have a rule that has the symbol on the left side.
 This continues until everything can be specified in relation to terminal
 symbols.
 Here is the whole grammar, which will define a language for simple arithmetic
 expressions:
\end_layout

\begin_layout LyX-Code
<expr> ::= <num> | <var> | <expr> <op> <expr>
\end_layout

\begin_layout LyX-Code
<op>   ::= + | - | * | /
\end_layout

\begin_layout LyX-Code
<var>  ::= x | y
\end_layout

\begin_layout LyX-Code
<num>  ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
\end_layout

\begin_layout Standard
The symbol of the first rule,
\family typewriter
 expr
\family default
, will automatically serve as start symbol of the grammar, 
\begin_inset Formula $G$
\end_inset

, defined by the given BNF.
\end_layout

\begin_layout Subsubsection
Sentence generation
\end_layout

\begin_layout Standard
After we have defined the CFG, we want to create a valid (random) sentences
 from our grammar.
 To do so, we will introduce a numbering schema for the alternative expressions
 for every rule.
 Such a schema, for our simple arithmetic grammar is shown below:
\end_layout

\begin_layout LyX-Code

\emph on
             [0]    [1]            [2]
\end_layout

\begin_layout LyX-Code
<expr> ::= <num> | <var> | <expr> <op> <expr>
\end_layout

\begin_layout LyX-Code

\emph on
           [0] [1] [2] [3]
\end_layout

\begin_layout LyX-Code
<op>   ::= + | - | * | /
\end_layout

\begin_layout LyX-Code

\emph on
          [0] [1]
\end_layout

\begin_layout LyX-Code
<var>  ::= x | y
\end_layout

\begin_layout LyX-Code

\emph on
          [0] [1] [2] [3] [4] [5] [6] [7] [8]
\end_layout

\begin_layout LyX-Code
<num>  ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Enumerate
\begin_inset Formula $L\leftarrow\left[\mathcal{S}\right]$
\end_inset


\begin_inset Newline newline
\end_inset


\emph on
Initialize the symbol list, 
\begin_inset Formula $L$
\end_inset

, with the start symbol, 
\begin_inset Formula $\mathcal{S}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $n\leftarrow L\left[\min\left\{ i\right\} \right]\in\mathcal{N}$
\end_inset


\begin_inset Newline newline
\end_inset


\emph on
Pick the leftmost non-terminal symbol, 
\begin_inset Formula $L\left[\min\left\{ i\right\} \right]$
\end_inset

, from the current sentence list, 
\begin_inset Formula $L$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $E\leftarrow R\left(n\right)\left[\textrm{rand}\right]$
\end_inset


\begin_inset Newline newline
\end_inset


\emph on
Get the rule, 
\begin_inset Formula $R\left(n\right)$
\end_inset

, for the chosen non-terminal, 
\begin_inset Formula $n$
\end_inset

, and select a random rule alternative, 
\begin_inset Formula $E$
\end_inset

.
\begin_inset Formula $E$
\end_inset

 will contain one of more terminal and/or non-terminal symbols.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $L\left[\min\left\{ i\right\} \right]\leftarrow E$
\end_inset


\begin_inset Newline newline
\end_inset


\emph on
Replace the chosen variable, 
\begin_inset Formula $n$
\end_inset

, with the selected symbols, 
\begin_inset Formula $E$
\end_inset

.
\end_layout

\begin_layout Enumerate

\emph on
Repeat steps 
\begin_inset Formula $2..4$
\end_inset

 until the symbol list, 
\begin_inset Formula $L$
\end_inset

, contains only terminals.
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Leftmost-derivation"

\end_inset

Leftmost derivation
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following example shows snapshots of the symbol list, 
\begin_inset Formula $L$
\end_inset

, for a possible sentence creation run, according to the described leftmost
 derivation algorithm
\begin_inset CommandInset ref
LatexCommand vref
reference "alg:Leftmost-derivation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Enumerate

\family typewriter
L = [<expr>]
\family default
.
 Initialize the sentence list with the start symbol.
\end_layout

\begin_layout Enumerate

\family typewriter
L = [<expr>, <op>, <expr>]
\family default
.
 Select the first non-terminal symbol in the list,
\family typewriter
<expr>
\family default
, and replace it with an randomly chosen rule alternative.
 Alternative
\family typewriter
 [2]
\family default
,
\family typewriter
 <expr> <op> <expr>
\family default
, is chosen and replaces the variable
\family typewriter
 <expr>
\family default
.
\end_layout

\begin_layout Enumerate

\family typewriter
L = [<num>, <op>, <expr>]
\family default
.
 Replacing the first
\family typewriter
 <expr>
\family default
 with alternative
\family typewriter
 [0]
\family default
,
\family typewriter
 <num>
\family default
.
\end_layout

\begin_layout Enumerate

\family typewriter
L = [5, <op>, <expr>]
\family default
.
 Replacing
\family typewriter
 <num>
\family default
 with 5.
\end_layout

\begin_layout Enumerate

\family typewriter
L = [5, -, <expr>]
\end_layout

\begin_layout Enumerate

\family typewriter
L = [5, -, <var>]
\end_layout

\begin_layout Enumerate

\family typewriter
L = [5, -, x]
\end_layout

\begin_layout Standard
After the 6
\begin_inset script superscript

\begin_layout Plain Layout
th
\end_layout

\end_inset

 iteration the symbol list contains only terminal symbols and the generation
 process stops.
 If we convert the symbol list into a string, we get an algebraic expression,
 
\begin_inset Formula $5-x$
\end_inset

, which is an element of the CFL, defined by our simple CFG.
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Enumerate
\begin_inset Formula $L\leftarrow\left[\mathcal{S}\right]$
\end_inset


\begin_inset Newline newline
\end_inset


\emph on
Initialize the symbol list,
\begin_inset Formula $L$
\end_inset

, with the start symbol, 
\begin_inset Formula $\mathcal{S}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $n\leftarrow L\left[\max\left\{ i\right\} \right]\in\mathcal{N}$
\end_inset


\begin_inset Newline newline
\end_inset


\emph on
Pick the rightmost non-terminal symbol, 
\begin_inset Formula $L\left[\max\left\{ i\right\} \right]$
\end_inset

, from the current sentence list, 
\begin_inset Formula $L$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $E\leftarrow R\left(n\right)\left[\textrm{rand}\right]$
\end_inset


\begin_inset Newline newline
\end_inset


\emph on
Get the rule, 
\begin_inset Formula $R\left(n\right)$
\end_inset

, for the chosen non-terminal, 
\begin_inset Formula $n$
\end_inset

, and select a random rule alternative, 
\begin_inset Formula $E$
\end_inset

.
 
\begin_inset Formula $E$
\end_inset

 will contain one of more terminal and/or non-terminal symbols.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $L\left[\min\left\{ i\right\} \right]\leftarrow E$
\end_inset


\begin_inset Newline newline
\end_inset


\emph on
Replace the chosen variable, 
\begin_inset Formula $n$
\end_inset

, with the selected symbols, 
\begin_inset Formula $E$
\end_inset

.
\end_layout

\begin_layout Enumerate

\emph on
Repeat steps 
\begin_inset Formula $2..4$
\end_inset

 until the symbol list, 
\begin_inset Formula $L$
\end_inset

, contains only terminals.
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Rightmost-derivation"

\end_inset

Rightmost derivation
\end_layout

\end_inset


\end_layout

\end_inset

Algorithm
\begin_inset CommandInset ref
LatexCommand vref
reference "alg:Rightmost-derivation"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the rightmost derivation method, which is a variation of the leftmost
 derivation algorithm.
 The only difference is, that instead of the processing the symbol list
 from left to right, it is processed from right to left.
\end_layout

\begin_layout Subsubsection
Mapping
\end_layout

\begin_layout Standard
Now we have everything in place to do the last step.
 How to create a sentence from a given grammar? The original paper
\begin_inset CommandInset citation
LatexCommand cite
key "ryan1998grammatical"
literal "false"

\end_inset

 uses a bit string for creating a sentence from a given chromosome and called
 this process
\emph on
 mapping
\emph default
.
 Since we have already described how to create a sentence from a grammar,
 we must describe the last missing part of the process, and this missing
 part is the selection of alternative symbols from a given rule.
 This is step three in the described algorithms
\begin_inset CommandInset ref
LatexCommand vref
reference "alg:Leftmost-derivation"
plural "false"
caps "false"
noprefix "false"

\end_inset

 and
\begin_inset CommandInset ref
LatexCommand vref
reference "alg:Rightmost-derivation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Instead of selecting a
\emph on
 random
\emph default
 alternative, the index of the selected alternative must be determined by
 the given chromosome.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/GrammaticalEvolutionMapping.svg
	lyxscale 80
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:GE-mapping"

\end_inset

GE mapping
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GE-mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows he GE mapping process.
 The binary string is split into 8-bit junks and interpreted as unsigned
 integers, with vales in the range of 
\begin_inset Formula $\left[0,256\right)$
\end_inset

.
 This 8-bit junks are called
\emph on
 codons
\emph default
.
 Whenever a new rule alternative must be selected, a new codon is read from
 the chromosome.
 A simple modulo operation is used to get an index within the desired range.
 If more codons are needed during the mapping process than available in
 the input chromosome, the reading of the codons is wrapped over and starts
 at the beginning of the chromosome again.
\end_layout

\begin_layout Subsubsection
Implementing classes
\end_layout

\begin_layout Standard
This section describes the main classes which are part of the implementation
 of the GE.
 All the described classes are part of the
\family typewriter
 io\SpecialChar softhyphen
.jene\SpecialChar softhyphen
tics\SpecialChar softhyphen
.ext
\family default
 module and reside in the
\family typewriter
 io\SpecialChar softhyphen
.jene\SpecialChar softhyphen
tics\SpecialChar softhyphen
.ext.grammar
\family default
 package.
\end_layout

\begin_layout Description

\family typewriter
Cfg
\family default
 This class represents a context-free grammar as described in section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Context-free-grammar"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
Bnf
\family default
 Although it is possible to create instances of the
\family typewriter
 Cfg
\family default
 class manually, it is in most cases easier to define it as BNF string.
 This class contains methods for parsing and formatting CFGs from and to
 BNF strings.
\end_layout

\begin_layout Description

\family typewriter
SymbolIndex
\family default
 The
\family typewriter
 SymbolIndex
\family default
 interface defines the strategy, which alternative symbols of a given rule
 are selected during the sentence generation process.
 The classical algorithm uses codons, encoded in an binary string.
\end_layout

\begin_layout Description

\family typewriter
Codons
\family default
 This class is an implementation of the classical symbol selection algorithms
 as described in the original paper.
 It implements the
\family typewriter
 Sym\SpecialChar softhyphen
bol\SpecialChar softhyphen
In\SpecialChar softhyphen
dex
\family default
 interface.
\end_layout

\begin_layout Description

\family typewriter
Generator
\family default
 The
\family typewriter
 Generator
\family default
 interface is an abstraction of the sentence generation algorithm as such
 as algorithm
\begin_inset CommandInset ref
LatexCommand vref
reference "alg:Leftmost-derivation"
plural "false"
caps "false"
noprefix "false"

\end_inset

 or
\begin_inset CommandInset ref
LatexCommand vref
reference "alg:Rightmost-derivation"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
Mappings
\family default
 The
\family typewriter
 Mappings
\family default
 class contains factory methods for creating different mapping strategies.
 Since the mapping process, as shown in figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:GE-mapping"
plural "false"
caps "false"
noprefix "false"

\end_inset

, is implemented as
\family typewriter
 Codec
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Codec"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\end_inset

, the factory methods will return
\family typewriter
 Codec
\family default
 instances for the
\family typewriter
 Bit\SpecialChar softhyphen
Chro\SpecialChar softhyphen
mo\SpecialChar softhyphen
some
\family default
 and
\family typewriter
 Int\SpecialChar softhyphen
eger\SpecialChar softhyphen
Chro\SpecialChar softhyphen
mosome
\family default
.
\end_layout

\begin_layout Standard
Let's start with the
\family typewriter
 Cfg
\family default
 class and how to create grammars.
 The
\family typewriter
 Cfg
\family default
 class comes with a set of factory methods, which lets you create
\family typewriter
 Cfg
\family default
 objects quite easily.
 Our already known arithmetic expression grammar can be created with the
 following code.
 The used factory methods,
\family typewriter
 N
\family default
,
\family typewriter
 T
\family default
,
\family typewriter
 E
\family default
,
\family typewriter
 R
\family default
, were statically imported.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Cfg<String> cfg = Cfg.of(
\end_layout

\begin_layout Plain Layout

    R("expr",
\end_layout

\begin_layout Plain Layout

        E(N("num")), E(N("var")),
\end_layout

\begin_layout Plain Layout

        E(N("expr"), N("op"), N("expr"))
\end_layout

\begin_layout Plain Layout

    ),
\end_layout

\begin_layout Plain Layout

    R("op", E(T("+")), E(T("-")), E(T("*")), E(T("/"))),
\end_layout

\begin_layout Plain Layout

    R("var", E(T("x")), E(T("y"))),
\end_layout

\begin_layout Plain Layout

    R("num",
\end_layout

\begin_layout Plain Layout

        E(T("1")), E(T("2")), E(T("3")),
\end_layout

\begin_layout Plain Layout

        E(T("4")), E(T("5")), E(T("6")),
\end_layout

\begin_layout Plain Layout

        E(T("7")), E(T("8")), E(T("9"))
\end_layout

\begin_layout Plain Layout

    )
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

As alternative, the above CFG can also been creating via a string in BNF
 form, as described in section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Backus-Naur-form"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The code snippet below shows how to do this.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Cfg<String> cfg = Bnf.parse("""
\end_layout

\begin_layout Plain Layout

    <expr> ::= <num> | <var> | <expr> <op> <expr>
\end_layout

\begin_layout Plain Layout

    <op>   ::= + | - | * | /
\end_layout

\begin_layout Plain Layout

    <var>  ::= x | y
\end_layout

\begin_layout Plain Layout

    <num>  ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
\end_layout

\begin_layout Plain Layout

    """
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Symbol\SpecialChar softhyphen
Index
\family default
 interface is responsible for selecting the index of the rule alternative
 to choose.
 The reason for this interface is to decouple the selection algorithm from
 the data structure, which determines the selection; it should decouple
 the algorithm from the underlying
\family typewriter
 Bit\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 or
\family typewriter
 Int\SpecialChar softhyphen
eger\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

@FunctionalInterface
\end_layout

\begin_layout Plain Layout

public interface SymbolIndex {
\end_layout

\begin_layout Plain Layout

    int next(Cfg.Rule<?> rule, int bound);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
\begin_inset CommandInset label
LatexCommand label
name "lis:SymbolIndex-interface"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
SymbolIndex
\end_layout

\end_inset

SymbolIndex
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset

Listing
\begin_inset CommandInset ref
LatexCommand vref
reference "lis:SymbolIndex-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the single method of the
\family typewriter
 Symbol\SpecialChar softhyphen
Index
\family default
 interface.
 It takes the rule, for which to select the alternatives and the desired
 index bounds and returns the selected symbol index.
 The
\family typewriter
 rule
\family default
 parameter of the next function allows to use different index selection
 strategies, or different index sources, for the different rules.
 This interface makes it possible to let the sentence creation to be controlled
 by an
\family typewriter
 Int\SpecialChar softhyphen
eger\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 instead the classical bit string.
\end_layout

\begin_layout Standard
The
\family typewriter
 Codons
\family default
 class implements the
\family typewriter
 Symbol\SpecialChar softhyphen
Index
\family default
 interface and can be created from a
\family typewriter
 Bit\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 and
\family typewriter
 Int\SpecialChar softhyphen
eger\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 instances.

\family typewriter
 Codons
\family default
 created from a
\family typewriter
 Bit\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 gives you an implementation of the classic symbol selection algorithm.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

// Create codons backed up by binary string.
\end_layout

\begin_layout Plain Layout

var bch = BitChromosome.of(100*8);
\end_layout

\begin_layout Plain Layout

var bcodons = Codons.ofBitGenes(bch);
\end_layout

\begin_layout Plain Layout

// Creadte codons backed up by integer string.
\end_layout

\begin_layout Plain Layout

var ich = IntegerChromosome.of(IntRange.of(0, 256), 100);
\end_layout

\begin_layout Plain Layout

var icodons = Codons.ofIntegerGenes(ich);
\end_layout

\end_inset

The code snipped above shows two ways for creating essentially the same
 codons.
 In the first variant, the codons are read from a
\family typewriter
 Bit\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 with the length of 800, which results in 100 different indexes readable
 from the created
\family typewriter
 Cod\SpecialChar softhyphen
ons
\family default
 object.
 In the second variant an
\family typewriter
 Int\SpecialChar softhyphen
eger\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
, with a value range of 
\begin_inset Formula $\left[0,256\right)$
\end_inset

 and a length of 100, is used for the
\family typewriter
 Cod\SpecialChar softhyphen
ons
\family default
 object.
 Using an
\family typewriter
 Int\SpecialChar softhyphen
eger\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 instead of a
\family typewriter
 Bit\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 gives you a greater flexibility, as it allows you to specify an explicit
 range for the codon values.
\end_layout

\begin_layout Standard
Implementations of the functional
\family typewriter
 Generator
\family default
 interface are responsible for creating sentences from a given grammar.
 It takes a
\family typewriter
 Cfg
\family default
 object as input and creates a generic result object of type
\family typewriter
 T
\family default
.
 This genericity lets you use the same interface for different result type,
 like
\family typewriter
 List<\SpecialChar softhyphen
Sym\SpecialChar softhyphen
bol<\SpecialChar softhyphen
String\SpecialChar softhyphen
>\SpecialChar softhyphen
>
\family default
 or
\family typewriter
 Tree<\SpecialChar softhyphen
Sym\SpecialChar softhyphen
bol<\SpecialChar softhyphen
String\SpecialChar softhyphen
>, ?>
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

@FunctionalInterface
\end_layout

\begin_layout Plain Layout

public interface Generator<T, R> {
\end_layout

\begin_layout Plain Layout

    R generate(Cfg<? extends T> cfg);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\family typewriter
\begin_inset CommandInset label
LatexCommand label
name "lis:Generator-interface"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Generator
\end_layout

\end_inset

Generator
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset

Listing
\begin_inset CommandInset ref
LatexCommand vref
reference "lis:Generator-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the definition of the
\family typewriter
 Gene\SpecialChar softhyphen
rator
\family default
 interface.
 It takes a
\family typewriter
 Cfg
\family default
 object as input and returns the created result sentence of type
\family typewriter
 R
\family default
.
 The kind of the created result is not determined by interfaces.
 It can be a random instance of the input grammar, a reproducible, deterministic
 result, or even always the same result.
 It is the responsibility of the implementations to determine which kind
 of result to return.
 The reason for this is, not make assumptions about the sentence creation
 and bake this assumptions into the API; this avoid a leaky abstraction.
\end_layout

\begin_layout Standard
There are currently two implementation of the
\family typewriter
 Gene\SpecialChar softhyphen
rator
\family default
 interface: 1) the
\family typewriter
 Sen\SpecialChar softhyphen
tence\SpecialChar softhyphen
Gene\SpecialChar softhyphen
rator
\family default
, which generates a list of terminal symbols (sentences) from a given grammar,
 and 2) the
\family typewriter
 Deri\SpecialChar softhyphen
vat\SpecialChar softhyphen
ion\SpecialChar softhyphen
Tree\SpecialChar softhyphen
Gene\SpecialChar softhyphen
rator
\family default
, generating a derivation tree, or parse tree.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

// Define sentence generator for creating random sentences.
\end_layout

\begin_layout Plain Layout

var generator = new SentenceGenerator<String>(
\end_layout

\begin_layout Plain Layout

    SymbolIndex.of(RandomGenerator.getDefault()),
\end_layout

\begin_layout Plain Layout

    1_000
\end_layout

\begin_layout Plain Layout

);
\end_layout

\begin_layout Plain Layout

// Create random sentence for given CFG.
\end_layout

\begin_layout Plain Layout

List<Cfg.Terminal<String>> sentence = generator.generate(cfg);
\end_layout

\begin_layout Plain Layout

String string = sentence.stream()
\end_layout

\begin_layout Plain Layout

    .map(Cfg.Symbol::name)
\end_layout

\begin_layout Plain Layout

    .collect(Collectors.joining());
\end_layout

\end_inset

In the code snippet above you can see how to create a
\family typewriter
 Sen\SpecialChar softhyphen
tence\SpecialChar softhyphen
Gene\SpecialChar softhyphen
rator
\family default
 which will create random sentences with a maximal length of 1000.
 The generated sentence will be a list of terminal symbols.
 But it is quite easy to convert it to a string.
 The
\family typewriter
 Deri\SpecialChar softhyphen
vat\SpecialChar softhyphen
ion\SpecialChar softhyphen
Tree\SpecialChar softhyphen
Gene\SpecialChar softhyphen
rator
\family default
 work can be used similarly.
 Instead of a list of terminals, it creates a
\family typewriter
 Tree<\SpecialChar softhyphen
Sym\SpecialChar softhyphen
bol<\SpecialChar softhyphen
String>, ?>
\family default
 instead.
\end_layout

\begin_layout Standard
The factory methods of the
\family typewriter
 Mappings
\family default
 class puts it all together and let you easily specify the needed parts
 for the mapping process.

\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 already has an interface for expressing such a mapping process, the
\family typewriter
 Codec
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Codec"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\end_inset

 interface.
 So no additional interface or class was introduce and the
\family typewriter
 Mappings
\family default
 factories will return
\family typewriter
 Codec
\family default
 instances instead.
 In the code snippet below you can see how to create the classical mapping,
 with a single
\family typewriter
 Bit\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 used for the rule symbol selection.
 It is created via the
\family typewriter
 Map\SpecialChar softhyphen
pers\SpecialChar softhyphen
::sin\SpecialChar softhyphen
gle\SpecialChar softhyphen
Bit\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some\SpecialChar softhyphen
Map\SpecialChar softhyphen
per
\family default
 method.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Codec<List<Terminal<String>>, BitGene> codec =
\end_layout

\begin_layout Plain Layout

    Mappers.singleBitChromosomeMapper(
\end_layout

\begin_layout Plain Layout

        cfg,
\end_layout

\begin_layout Plain Layout

        // Length of the used BitChromosome.
\end_layout

\begin_layout Plain Layout

        100*8,
\end_layout

\begin_layout Plain Layout

        // The used generator, created from SymbolIndex.
\end_layout

\begin_layout Plain Layout

        index -> new SentenceGenerator<>(index, 1_000)
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\end_inset

For creating this codec you must specify the CFG, the length of the chromosome
 and the sentence
\family typewriter
 Gen\SpecialChar softhyphen
er\SpecialChar softhyphen
ator
\family default
.
 The
\family typewriter
 Gen\SpecialChar softhyphen
era\SpecialChar softhyphen
tor
\family default
 is given as factory function, which takes an
\family typewriter
 Sym\SpecialChar softhyphen
bol\SpecialChar softhyphen
In\SpecialChar softhyphen
dex
\family default
 at input.
 The codec, created in the code snippet below, is essentially the same as
 created with the
\family typewriter
 Map\SpecialChar softhyphen
pers\SpecialChar softhyphen
::sin\SpecialChar softhyphen
gle\SpecialChar softhyphen
Bit\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some\SpecialChar softhyphen
Map\SpecialChar softhyphen
per
\family default
 method.
 It only differs in the way the codons are created.
 Using an
\family typewriter
 Int\SpecialChar softhyphen
eger\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 as codons source gives you a greater flexibility and allows to change the
 value range of the created codons.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Codec<List<Terminal<String>>, IntegerGene> codec =
\end_layout

\begin_layout Plain Layout

    Mappers.singleIntegerChromosomeMapper(
\end_layout

\begin_layout Plain Layout

        cfg,
\end_layout

\begin_layout Plain Layout

        // Value range of created codons.
\end_layout

\begin_layout Plain Layout

        IntRange.of(0, 256),
\end_layout

\begin_layout Plain Layout

        // Length of the used IntegerChromosome.
\end_layout

\begin_layout Plain Layout

        100,
\end_layout

\begin_layout Plain Layout

        index -> new SentenceGenerator<>(index, 1_000)
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Beside the classical mapping algorithms,
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 contains also a novel method for genotype to sentence mapping.
 This new approach uses a separate
\family typewriter
 Int\SpecialChar softhyphen
eger\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 for every
\family typewriter
 Cfg.\SpecialChar softhyphen
Rule
\family default
.
 This allows to align the range of the chromosome with the number of alternative
s of the rule.
 With this property, no modulo operation is needed for creating codons with
 the correct bounds.
 No additional modulo operation means, that all alternatives have the same
 probability for being selected, for randomly created chromosomes.
 All rule alternatives have the same changes of being selected.
 There is no accidental bias towards a given rule alternative or symbol.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Codec<List<Terminal<String>>, IntegerGene> codec =
\end_layout

\begin_layout Plain Layout

    Mappers.multiIntegerChromosomeMapper(
\end_layout

\begin_layout Plain Layout

        cfg,
\end_layout

\begin_layout Plain Layout

        // Chromosome length depends of number of alternatives.
\end_layout

\begin_layout Plain Layout

        rule -> IntRange.of(rule.alternatives().size()*25),
\end_layout

\begin_layout Plain Layout

        index -> new SentenceGenerator<>(index, 1_000)
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\end_inset

The codes snippet above shows how to create a mapping, which uses a genotype
 with one chromosome for every rule in the given CFG.
 Our example CFG
\end_layout

\begin_layout LyX-Code

\emph on
            [0]     [1]           [2]
\end_layout

\begin_layout LyX-Code
<expr> ::= <num> | <var> | <expr> <op> <expr>
\end_layout

\begin_layout LyX-Code

\emph on
          [0] [1] [2] [3]
\end_layout

\begin_layout LyX-Code
<op>   ::= + | - | * | /
\end_layout

\begin_layout LyX-Code

\emph on
          [0] [1]
\end_layout

\begin_layout LyX-Code
<var>  ::= x | y
\end_layout

\begin_layout LyX-Code

\emph on
          [0] [1] [2] [3] [4] [5] [6] [7] [8]
\end_layout

\begin_layout LyX-Code
<num>  ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
\end_layout

\begin_layout Standard
will use a
\family typewriter
 Genotype
\family default
 with the following structure for the encoding of the codons.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

Genotype.of(
\end_layout

\begin_layout Plain Layout

    IntegerChromosome.of(IntRange.of(0, 3), 3*25), // <expr>
\end_layout

\begin_layout Plain Layout

    IntegerChromosome.of(IntRange.of(0, 4), 4*25), // <op>
\end_layout

\begin_layout Plain Layout

    IntegerChromosome.of(IntRange.of(0, 2), 2*25), // var
\end_layout

\begin_layout Plain Layout

    IntegerChromosome.of(IntRange.of(0, 9), 9*25)  // <num>
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

As you can see, the number range for each rule chromosome reflects the number
 of available rule alternatives and the chromosome length can be expressed
 as a multiple of the number of alternatives of the corresponding rule.
 If you don't need this flexibility, it is of course also possible to use
 constant chromosome lengths.
 Just use a length function like this:
\family typewriter
 rule -> IntRange.of(1_000)
\family default
.
\end_layout

\begin_layout Section
io.jenetics.prog
\begin_inset CommandInset label
LatexCommand label
name "sec:Genetic-programming"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genetic programming
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
GP
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
io.jenetics.prog
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Modules!io.jenetics.prog
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In artificial intelligence,
\emph on
 genetic programming
\emph default
 (GP) is a technique whereby computer programs are encoded as a set of genes
 that are then modified (evolved) using an evolutionary algorithm (often
 a genetic algorithm).
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Genetic_programming
\end_layout

\end_inset


\end_layout

\end_inset

 The
\family typewriter
 io.jenetics\SpecialChar softhyphen
.prog
\family default
 module contains classes which enables the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library doing GP.
 It introduces a
\family typewriter
 Program\SpecialChar softhyphen
Gene
\family default
 and
\family typewriter
 Program\SpecialChar softhyphen
Chromosome
\family default
 pair, which serves as the main data structure for genetic programs.
 A
\family typewriter
 Program\SpecialChar softhyphen
Gene
\family default
 is essentially a tree (AST
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Abstract_syntax_tree
\end_layout

\end_inset


\end_layout

\end_inset

) of operations (
\family typewriter
Op
\family default
) stored in a
\family typewriter
 Program\SpecialChar softhyphen
Chromosome
\family default
.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
When implementing the GP module, the emphasis was to not create a parallel
 world of genes and chromosomes.
 It was a requirement, that the existing Alterer and Selector classes could
 also be used for the new GP classes.
 This has been achieved by flattening the AST of a genetic program to fit
 into the 1-dimensional (flat) structure of a chromosome.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Operations
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genetic programming!Operations
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When creating own genetic programs, it is not necessary to derive classes
 from the
\family typewriter
 Program\SpecialChar softhyphen
Gene
\family default
 or
\family typewriter
 Program\SpecialChar softhyphen
Chromosome
\family default
.
 The intended extension point is the
\family typewriter
 Op
\family default
 interface.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
The extension point for own GP implementations is the
\family typewriter
 Op
\family sans
 interface.
 There is in general no need for extending the
\family typewriter
 ProgramChromosome
\family sans
 class.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface Op<T> {
\end_layout

\begin_layout Plain Layout

    String name();
\end_layout

\begin_layout Plain Layout

    int arity();
\end_layout

\begin_layout Plain Layout

    T apply(T[] args);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:GP-Op-interface"

\end_inset

GP
\family typewriter
 Op
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The generic type of the
\family typewriter
 Op
\family default
 interface (see listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:GP-Op-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

) enforces the data type constraints for the created program tree and makes
 the implementation a
\emph on
 strongly typed
\emph default
 GP.
 Using the
\family typewriter
 Op.of
\family default
 factory method, a new operation is created by defining the desired operation
 function.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Op<Double> add = Op.of("+", 2, v -> v[0] + v[1]);
\end_layout

\begin_layout Plain Layout

final Op<String> concat = Op.of("+", 2, v -> v[0] + v[1]);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A new
\family typewriter
 Program\SpecialChar softhyphen
Chromosome
\family default
 is created with the operations suitable for our problem.
 When creating a new
\family typewriter
 Program\SpecialChar softhyphen
Chromosome
\family default
, we must distinguish two different kind of operations:
\end_layout

\begin_layout Enumerate

\emph on
Non-terminal
\emph default
 operations have an arity greater than zero, which means they take at least
 one argument.
 These operations need to have child nodes, where the number of children
 must be equal to the arity of the operation of the parent node.
 Non-terminal operations will be abbreviated to
\emph on
 operations
\emph default
.
\end_layout

\begin_layout Enumerate

\emph on
Terminal
\emph default
 operations have an arity of zero and from the leaves of the program tree.
 Terminal operations will be abbreviated to
\emph on
 terminals
\emph default
.
\end_layout

\begin_layout Standard
The
\family typewriter
 io.jenetics.prog
\family default
 module comes with three predefined terminal operations:
\family typewriter
 Var
\family default
,
\family typewriter
 Const
\family default
 and
\family typewriter
 Ephemeral\SpecialChar softhyphen
Const
\family default
.
\end_layout

\begin_layout Paragraph

\family typewriter
Var
\end_layout

\begin_layout Standard
The
\family typewriter
 Var
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genetic programming!Var
\end_layout

\end_inset


\family default
 operation defines a variable of a program, which is set from outside when
 it is evaluated.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Var<Double> x = Var.of("x", 0);
\end_layout

\begin_layout Plain Layout

final Var<Double> y = Var.of("y", 1);
\end_layout

\begin_layout Plain Layout

final Var<Double> z = Var.of("z", 2);
\end_layout

\begin_layout Plain Layout

final ISeq<Op<Double>> terminals = ISeq.of(x, y, z);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The terminal operations defined in the listing above can be used for defining
 a program which takes a 
\begin_inset Formula $3$
\end_inset

-dimensional vector as input parameters, 
\begin_inset Formula $x$
\end_inset

, 
\begin_inset Formula $y$
\end_inset

, and 
\begin_inset Formula $z$
\end_inset

, with the argument indices 
\begin_inset Formula $0$
\end_inset

, 
\begin_inset Formula $1$
\end_inset

, and 
\begin_inset Formula $2$
\end_inset

.
 If you have again a look at the
\family typewriter
 apply
\family default
 method of the operation interface, you can see that this method takes an
 object array of type
\family typewriter
 T
\family default
.
 The variable 
\begin_inset Formula $x$
\end_inset

 will return the first element of the input arguments, because it has been
 created with index 
\begin_inset Formula $0$
\end_inset

.
\end_layout

\begin_layout Paragraph

\family typewriter
Const
\end_layout

\begin_layout Standard
The
\family typewriter
 Const
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genetic programming!Const
\end_layout

\end_inset


\family default
 operation will always return the same, constant value when evaluated.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Const<Double> one = Const.of(1.0);
\end_layout

\begin_layout Plain Layout

final Const<Double> pi = Const.of("PI", Math.PI);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can create a constant operation in to flavors: with a value only, and
 with a dedicated name.
 If a constant has a name, the symbolic name is used, instead of the value,
 when the program tree is printed.
\end_layout

\begin_layout Paragraph

\family typewriter
EphemeralConst
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Ephemeral constant
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An ephemeral constant is a terminal operation, which encapsulates a value
 that is generated at run time from the
\family typewriter
 Supplier
\family default
 it is created from.
 Ephemeral constants allows you to have terminals that don’t have all the
 same values.
 To create an ephemeral constant that takes its random value in 
\begin_inset Formula $\left[0,1\right)$
\end_inset

 you will write the following code.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Op<Double> rand1 = EphemeralConst
\end_layout

\begin_layout Plain Layout

    .of(RandomRegistry.random()::nextDouble);
\end_layout

\begin_layout Plain Layout

final Op<Double> rand2 = EphemeralConst
\end_layout

\begin_layout Plain Layout

    .of("R", RandomRegistry.random()::nextDouble);
\end_layout

\end_inset

The ephemeral constant value is determined when it is inserted in the tree
 and never changes until it is replaced by another ephemeral constant.
\end_layout

\begin_layout Subsection
Program creation
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genetic programming!Program creation
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Program\SpecialChar softhyphen
Chromosome
\family default
 comes with some factory methods, which lets you easily create program trees
 with a given depth and a given set of operations and terminals.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final int depth = 5;
\end_layout

\begin_layout Plain Layout

final ISeq<Op<Double>> operations = ISeq.of(...);
\end_layout

\begin_layout Plain Layout

final ISeq<Op<Double>> terminals = ISeq.of(...);
\end_layout

\begin_layout Plain Layout

final ProgramChromosome<Double> program = ProgramChromosome
\end_layout

\begin_layout Plain Layout

    .of(depth, operations, terminals);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code snippet above will create a
\emph on
 perfect
\emph default
 program tree
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
All leafs of a perfect tree have the same depth and all internal nodes have
 degree
\family typewriter
 Op.arity
\family default
.
\end_layout

\end_inset

 of depth 
\begin_inset Formula $5$
\end_inset

.
 All non-leaf nodes will contain operations, randomly selected from the
 given operations, whereas all leaf nodes are filled with operations from
 the terminals.
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
The created program tree is
\emph on
 perfect
\emph default
, which means that all leaf nodes have the same
\emph on
 depth
\emph default
.
 If new trees needs to be created during evolution, they will be created
 with the
\emph on
 depth
\emph default
,
\emph on
 operations
\emph default
 and
\emph on
 terminals
\emph default
 defined by the
\emph on
 template
\emph default
 program tree.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
During the evolution phase, the size of the
\family typewriter
 Program\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 can grow and shrink.
 The
\family typewriter
 Single\SpecialChar softhyphen
Node\SpecialChar softhyphen
Cross\SpecialChar softhyphen
over
\family default
, which is part of the
\family typewriter
 jenetics\SpecialChar softhyphen
.ext
\family default
 module is responsible for this change in the program size.
 When a smaller sub tree is exchanged with a bigger sub tree, the size of
 the first tree will grow and the size of the second tree will shrink.
 This can lead to undesirable large programs.
 Because of this reason, it is possible to create a
\family typewriter
 Program\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 with an additional
\emph on
 validation
\emph default
 predicate.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final ProgramChromosome<Double> program = ProgramChromosome.of(
\end_layout

\begin_layout Plain Layout

    depth, ch -> ch.root().size() <= 50,
\end_layout

\begin_layout Plain Layout

    operations, terminals
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

The predicate,
\family typewriter
 ch -> ch.root().size() <= 50
\family default
, marks all programs with more then 50 nodes as invalid.
 Invalid chromosomes will then be replaced by newly created one.
 When defining a validation predicate, you have to take care, that the desired
 depth and the validation predicate
\emph on
 matches
\emph default
.
 If the given program tree depth is too big, e.
\begin_inset space ~
\end_inset

g.
 51, every newly created program will be immediately marked as invalid.
 This is because a tree with depth 51 will have for sure more than 50 nodes.
\end_layout

\begin_layout Standard
The evolution
\family typewriter
 Engine
\family default
 used for solving GP problems is created the same way as for normal GA problems.
 Also the execution of the
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 stays the same.
 The first
\family typewriter
 Gene
\family default
 of the collected final
\family typewriter
 Genotype
\family default
 represents the evolved program, which can be used to calculate function
 values from arbitrary arguments.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<ProgramGene<Double>, Double> engine = Engine
\end_layout

\begin_layout Plain Layout

    .builder(Main::error, program)
\end_layout

\begin_layout Plain Layout

    .minimizing()
\end_layout

\begin_layout Plain Layout

    .alterers(
\end_layout

\begin_layout Plain Layout

        new SingleNodeCrossover<>(),
\end_layout

\begin_layout Plain Layout

        new Mutator<>())
\end_layout

\begin_layout Plain Layout

    .build();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

final ProgramGene<Double> program = engine.stream()
\end_layout

\begin_layout Plain Layout

    .limit(300)
\end_layout

\begin_layout Plain Layout

    .collect(EvolutionResult.toBestGenotype())
\end_layout

\begin_layout Plain Layout

    .gene();
\end_layout

\begin_layout Plain Layout

final double result = program.eval(3.4);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For a complete GP example have a look at the examples in chapter
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Symbolic-regression-example"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 The code example above also shows, that the program is represented by the
 first gene (aka root gene) of the
\family typewriter
 Program\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
.
 Since the
\family typewriter
 Program\SpecialChar softhyphen
Gene
\family default
 implements the
\family typewriter
 Tree<\SpecialChar softhyphen
Op<A>,\SpecialChar softhyphen
Program\SpecialChar softhyphen
Gene<A\SpecialChar softhyphen
>\SpecialChar softhyphen
>
\family default
 interface, it smoothly integrates with existing tree algorithms.
 Some possible program gene assignments are shown in the code snippet below,
 which will compile without warnings or additional casts.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final ProgramChromosome<Double> chromosome = ...;
\end_layout

\begin_layout Plain Layout

assert chromosome.gene() == chromosome.root();
\end_layout

\begin_layout Plain Layout

final ProgramGene<Double> program = chromosome.root();
\end_layout

\begin_layout Plain Layout

final Tree<Op<Double>, ?> opTree = chromosome.root();
\end_layout

\begin_layout Plain Layout

final Tree<?, ?> tree = chromosome.root();
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Program repair
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genetic programming!Program repair
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The specialized crossover class,
\family typewriter
 Single\SpecialChar softhyphen
Node\SpecialChar softhyphen
Crossover
\family default
, for a
\family typewriter
 Tree\SpecialChar softhyphen
Gene
\family default
 guarantees that the program tree after the alter operation is still valid.
 It obeys the tree structure of the
\family typewriter
 Gene
\family default
.
 General alterers, not written for
\family typewriter
 Program\SpecialChar softhyphen
Gene
\family default
 of
\family typewriter
 Tree\SpecialChar softhyphen
Gene
\family default
 classes, will most likely destroy the tree property of the altered chromosome.
 There are essentially two possibility for handling invalid tree chromosomes:
\end_layout

\begin_layout Enumerate
Marking the
\family typewriter
 Chromosome
\family default
 as invalid.
 This possibility is easier to achieve, but would also to lead to a large
 number of invalid
\family typewriter
 Chromo\SpecialChar softhyphen
somes
\family default
, which must be recreated.
 When recreating invalid
\family typewriter
 Chromo\SpecialChar softhyphen
somes
\family default
 we will also lose possible solutions.
\end_layout

\begin_layout Enumerate
Trying to repair the invalid
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
.
 This is the approach the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library has chosen.
 The repair process reuses the operations in a
\family typewriter
 Program\SpecialChar softhyphen
Chromosome
\family default
 and rebuilds the tree property by using the operation arity.
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
\series bold
\shape smallcaps
Jenetics
\series default
\shape default
 allows for the usage of arbitrary
\family typewriter
 Alterer
\family sans
 implementations.
 Even alterers not implemented for Program\SpecialChar softhyphen
Genes.
 Genes
\emph on
 destroyed
\emph default
 by such alterers are repaired.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Program pruning
\begin_inset CommandInset label
LatexCommand label
name "subsec:Program-pruning"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genetic programming!Program pruning
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When you are solving symbolic regression problems, the mathematical expression
 trees, created during the evolution process, can become quite big.
 From the diversity point of view, this might be not that bad, but it comes
 with additional computation cost.
 With the
\family typewriter
 Math\SpecialChar softhyphen
Rewrite\SpecialChar softhyphen
Alterer
\family default
 you are able to simplify some portion of the population in each generation.
 The rewrite alterer uses the
\emph on
 default
\family typewriter
\emph default
 Tree\SpecialChar softhyphen
Rewiter
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Rewriting"
plural "false"
caps "false"
noprefix "false"

\end_inset

 for a detailed description of the implemented tree rewrite system.
\end_layout

\end_inset


\family default
 defined by the
\family typewriter
 Math\SpecialChar softhyphen
Expr\SpecialChar softhyphen
.RE\SpecialChar softhyphen
WRITER
\family default
 field.
 It is also possible to create a
\family typewriter
 Math\SpecialChar softhyphen
Rewrite\SpecialChar softhyphen
Alterer
\family default
 instance with your own
\family typewriter
 Tree\SpecialChar softhyphen
Rewiter
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Engine<ProgramGene<Double>, Double> engine = Engine
\end_layout

\begin_layout Plain Layout

    .builder(Main::error, program)
\end_layout

\begin_layout Plain Layout

    .minimizing()
\end_layout

\begin_layout Plain Layout

    .alterers(
\end_layout

\begin_layout Plain Layout

        new SingleNodeCrossover<>(),
\end_layout

\begin_layout Plain Layout

        new Mutator<>(),
\end_layout

\begin_layout Plain Layout

        new MathRewriteAlterer<>(0.5))
\end_layout

\begin_layout Plain Layout

    .build();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the example above, half of the expression trees are simplified in each
 generation.
 If you want to prune the final result, you can do this with the
\family typewriter
 Math\SpecialChar softhyphen
Expr\SpecialChar softhyphen
::rewrite
\family default
 method, which uses the
\family typewriter
 Math\SpecialChar softhyphen
Expr\SpecialChar softhyphen
.RE\SpecialChar softhyphen
WRITER
\family default
 tree rewriter for the rewrite task.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final ProgramGene<Double> program = engine.stream()
\end_layout

\begin_layout Plain Layout

    .limit(3000)
\end_layout

\begin_layout Plain Layout

    .collect(EvolutionResult.toBestGenotype())
\end_layout

\begin_layout Plain Layout

    .gene();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

final TreeNode<Op<Double>> tree = TreeNode.ofTree(program);
\end_layout

\begin_layout Plain Layout

MathExpr.rewrite(tree);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The algorithm used for pruning the expression tree, currently only uses
 some basic mathematical identities, like 
\begin_inset Formula $x+0=x$
\end_inset

,
\begin_inset Formula $x\cdot1=x$
\end_inset

 or 
\begin_inset Formula $x\cdot0=0$
\end_inset

.
 More advanced simplification algorithms may be implemented in the future.
 The
\family typewriter
 MathExpr
\family default
 helper class can also be used for creating mathematical expression trees
 from the
\family typewriter
\emph on
 usual
\family default
\emph default
 textual representation.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final MathExpr expr = MathExpr
\end_layout

\begin_layout Plain Layout

    .parse("5*z + 6*x + sin(y)^3 + (1 + sin(z*5)/4)/6");
\end_layout

\begin_layout Plain Layout

final double value = expr.eval(5.5, 4, 2.3);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The variables in an expression string are sorted alphabetically.
 This means, that the expression is evaluated with 
\begin_inset Formula $x=5.5$
\end_inset

, 
\begin_inset Formula $y=4$
\end_inset

 and 
\begin_inset Formula $z=2.3$
\end_inset

, which leads to a result value of 
\begin_inset Formula $44.19673085074048$
\end_inset

.
\end_layout

\begin_layout Subsection
Multi-root programs
\end_layout

\begin_layout Standard
The given examples, so far, where using a single
\family typewriter
 Program\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
 for modeling the program.
 Since the
\family typewriter
 Genotype
\family default
 is able to hold more than one
\family typewriter
 Chromo\SpecialChar softhyphen
some
\family default
, it is possible to create more than one program root.
 These programs are evaluated concurrently.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Codec<ISeq<Function<Double[], Double>>, ProgramGene<Double>>
\end_layout

\begin_layout Plain Layout

codec = Codec.of(
\end_layout

\begin_layout Plain Layout

    Genotype.of(
\end_layout

\begin_layout Plain Layout

        // First 'program'.
\end_layout

\begin_layout Plain Layout

        ProgramChromosome.of(
\end_layout

\begin_layout Plain Layout

            4, ch -> ch.root().size() <= 30,
\end_layout

\begin_layout Plain Layout

            operations, terminals
\end_layout

\begin_layout Plain Layout

        ),
\end_layout

\begin_layout Plain Layout

        // Second 'program'.
\end_layout

\begin_layout Plain Layout

        ProgramChromosome.of(
\end_layout

\begin_layout Plain Layout

            5, ch -> ch.root().size() <= 50,
\end_layout

\begin_layout Plain Layout

            operations, terminals
\end_layout

\begin_layout Plain Layout

        )
\end_layout

\begin_layout Plain Layout

    ),
\end_layout

\begin_layout Plain Layout

    gt -> gt.stream()
\end_layout

\begin_layout Plain Layout

        .map(Chromosome::gene)
\end_layout

\begin_layout Plain Layout

        .collect(ISeq.toISeq())
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code snippet above shows how to create a codec with two independent
 program roots.
 These programs are then mapped, in the fitness function, to the combined
 fitness value.
 It is also possible to use different operations and terminals for each
\family typewriter
 Program\SpecialChar softhyphen
Chromo\SpecialChar softhyphen
some
\family default
.
\end_layout

\begin_layout Subsection
Symbolic regression
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Symbolic regression
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Symbolic regression is a specific type of regression analyses, where the
 search space consists of mathematical expressions.
 The task is to find a model, which fits a given data set in terms of accuracy
 and simplicity.
 In a classical approach, you will try to optimize the parameters of a predefine
d function type, e.
\begin_inset space ~
\end_inset

g.
 a polynomial of grade 
\begin_inset Formula $n$
\end_inset

:
\begin_inset Formula 
\[
f\left(x\right)=\sum_{k=0}^{n}a_{k}x^{k}.
\]

\end_inset

The encoding would only be a
\family typewriter
 Double\SpecialChar softhyphen
Chromosome
\family default
 of length 
\begin_inset Formula $n+1$
\end_inset

, where the
\family typewriter
 Gene
\family default
 at position 
\begin_inset Formula $k\in\left[0,...,n\right]$
\end_inset

 represents the factor 
\begin_inset Formula $a_{k}$
\end_inset

 of the polynomial.
 If the type of mathematical function is not known in advance, GP can be
 used finding a function which is composed out of a given set of
\emph on
 primitives
\emph default
.
\end_layout

\begin_layout Quote
Symbolic regression involves finding a mathematical expression, in symbolic
 form, that provides a good, best, or perfect fit between a given finite
 sampling of values of the independent variables and the associated values
 of the dependent variables.
\begin_inset CommandInset citation
LatexCommand cite
key "Koza:1992:GPP:138936"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
Since symbolic regression is quite a common task in GP,
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 comes with classes and interfaces, supporting the implementation of such
 problems.
 These classes are defined in the
\family typewriter
 io\SpecialChar softhyphen
.jen\SpecialChar softhyphen
etics\SpecialChar softhyphen
.prog\SpecialChar softhyphen
.reg\SpecialChar softhyphen
ression
\family default
 package.
 The following sections describes these classes and interfaces and its usage.
 A complete symbolic regression example is given in section
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Symbolic-regression-example"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Loss function
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Loss function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The loss function measures how good the evolved program (tree) predicts
 the expected outcome or data set.
 If the prediction deviates too much from the expected data, the loss function
 will cough up a larger number.
 Loss functions are classified into two major categories, depending on the
 type of the learning task—
\emph on
regression
\emph default
 losses and
\emph on
 classification
\emph default
 losses.
 In the following paragraphs, only loss functions suitable for
\emph on
 regression
\emph default
 problems will be described.
\end_layout

\begin_layout Paragraph
Mean squared error
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Mean squared error
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
MSE
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
L2
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Loss function!MSE
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Loss function!L2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The mean squared error is the default loss function used for regression
 analysis.
 It is also known as
\emph on
 quadratic
\emph default
 loss or
\emph on
 L2
\emph default
 loss and is calculated as the average of the squared differences between
 the predicted and actual values.
\begin_inset Formula 
\begin{equation}
MSE=\frac{1}{n}\sum_{i=0}^{n-1}\left(y_{i}-\tilde{y_{i}}\right)^{2},
\end{equation}

\end_inset

where 
\begin_inset Formula $y_{i}$
\end_inset

 denotes the expected function value and 
\begin_inset Formula $\tilde{y_{i}}$
\end_inset

 the calculated (estimated) value for data point, 
\begin_inset Formula $i$
\end_inset

.
 The result is always positive and the perfect value is 
\begin_inset Formula $0$
\end_inset

.
 The squaring means that larger mistakes result in more errors than smaller
 mistakes, meaning that the model penalizes larger mistakes.
 The mean squared error is the preferred loss function for regression problems.
\end_layout

\begin_layout Paragraph
Mean absolute error
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Mean absolute error
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
MAE
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
L1
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Loss function!MAE
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Loss function!L1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The mean absolute error, also known as
\emph on
 L1
\emph default
 loss, is calculated as the average of the absolute difference between the
 expected and calculated values.
\begin_inset Formula 
\begin{equation}
MAE=\frac{1}{n}\sum_{i=0}^{n-1}\left|y_{i}-\tilde{y_{i}}\right|
\end{equation}

\end_inset

This loss function is suitable for regression problems where the distribution
 of the target variable may be mostly Gaussian, but may have outliers, e.
\begin_inset space ~
\end_inset

g.
 large or small values far from the mean value.
 This means that the
\emph on
 MAE
\emph default
 is more robust than the
\emph on
 MSE
\emph default
, which is useful if the sample data is corrupted with outliers.
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
The MAE is more robust to outliers, but its derivatives are not continuous,
 making it less efficient to find the correct solution.
 The MSE is sensitive to corrupt data, but finds more stable and closed
 form solutions.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The interface used for calculating the loss between
\emph on
 calculated
\emph default
 and
\emph on
 expected
\emph default
 values is shown in listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:LossFunction-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

@FunctionalInterface
\end_layout

\begin_layout Plain Layout

public interface LossFunction<T> {
\end_layout

\begin_layout Plain Layout

	double apply(T[] calculated, T[] expected);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:LossFunction-interface"

\end_inset


\family typewriter
LossFunction
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Complexity function
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Complexity function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The complexity function measures the complexity of the evolved tree.
 If you have two programs with the
\emph on
 same
\emph default
 loss value, you usually want the
\emph on
 simpler
\emph default
 program to survive.
 A simple complexity measure is the number of nodes a program tree consists
 of.
 You can obtain such a measure by the
\family typewriter
 of\SpecialChar softhyphen
Node\SpecialChar softhyphen
Count(\SpecialChar softhyphen
int\SpecialChar softhyphen
)
\family default
 factory method of the
\family typewriter
 Com\SpecialChar softhyphen
plex\SpecialChar softhyphen
ity
\family default
 interface.
 The complexity measure, 
\begin_inset Formula $C\left(P\right)$
\end_inset

, is defined as
\begin_inset Formula 
\begin{equation}
C\left(P\right)=1-\sqrt{1-\frac{\min\left(N\left(P\right),N_{max}\right)^{2}}{N_{max}^{2}}},
\end{equation}

\end_inset

where 
\begin_inset Formula $N\left(P\right)$
\end_inset

 is the number of nodes the program, 
\begin_inset Formula $P$
\end_inset

, consists of and 
\begin_inset Formula $N_{max}$
\end_inset

 the maximal allowed program nodes.
 If the number of program nodes is equal or greater then the maximal node
 number, 
\begin_inset Formula $C\left(P\right)$
\end_inset

, will return 
\begin_inset Formula $1$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/TreeNodeCountComplexity.svg
	lyxscale 85
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:TreeNodeCountComplexity"

\end_inset

Node count complexity
\end_layout

\end_inset


\end_layout

\end_inset

The graph in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:TreeNodeCountComplexity"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how the program complexity increases with the number of nodes.
 For the example graph the maximal node count was set to 
\begin_inset Formula $28$
\end_inset

.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

@FunctionalInterface
\end_layout

\begin_layout Plain Layout

public interface Complexity<T> {
\end_layout

\begin_layout Plain Layout

	double apply(Tree<? extends Op<T>, ?> program);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Complexity-interface"

\end_inset


\family typewriter
Complexity
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset

Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Complexity-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the interface which calculates the complexity measure of a given
 program tree.
\end_layout

\begin_layout Subsubsection
Error function
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Error function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The error function combines the loss function and the complexity function
 into one error measure.
 It is used as fitness function which the GP is minimizing.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

@FunctionalInterface
\end_layout

\begin_layout Plain Layout

public interface Error<T> {
\end_layout

\begin_layout Plain Layout

	double apply(
\end_layout

\begin_layout Plain Layout

        Tree<? extends Op<T>, ?> program,
\end_layout

\begin_layout Plain Layout

        T[] calculated,
\end_layout

\begin_layout Plain Layout

        T[] expected
\end_layout

\begin_layout Plain Layout

    );
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Error-interface"

\end_inset


\family typewriter
Error
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset

Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Error-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the error (fitness) function used for evolving symbolic regression
 problems.
 Instead of implementing the error function from scratch, you will probably
 want to use one of the factory methods for creating it from one of the
 predefined
\family typewriter
 Loss\SpecialChar softhyphen
Function
\family default
 and
\family typewriter
 Com\SpecialChar softhyphen
plex\SpecialChar softhyphen
ity
\family default
 measure.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Error<Double> error1 = Error.of(LossFunction::mse);
\end_layout

\begin_layout Plain Layout

final Error<Double> error2 = Error.of(
\end_layout

\begin_layout Plain Layout

    LossFunction::mae,
\end_layout

\begin_layout Plain Layout

    Complexity.ofNodeCount(28)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\begin_layout Plain Layout

final Error<Double> error3 = Error.of(
\end_layout

\begin_layout Plain Layout

    LossFunction::mse,
\end_layout

\begin_layout Plain Layout

    Complexity.ofNodeCount(28),
\end_layout

\begin_layout Plain Layout

    (loss, complexity) -> loss + loss*complexity
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset

The code snippet above shows the three possibilities to create an error
 function by using the predefined loss functions and complexity measure.

\family typewriter
 error1
\family default
 is created by using the mean squared error, MES.
\family typewriter
error2
\family default
 and
\family typewriter
 error3
\family default
 defines the same error function.
 The only difference is that
\family typewriter
 error3
\family default
 defines the loss-complexity composition function explicitly.
\end_layout

\begin_layout Subsubsection
Sample points
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Sample point
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Solving regression problems requires to compare the current solution (program
 tree) with a set of sample points, which represents the
\emph on
 original
\emph default
 function to be approximated.
 The
\family typewriter
 Sample
\family default
 interface represents such sample point.
 It actually maps a
\emph on
 n
\emph default
-dimensional point of domain, 
\begin_inset Formula $\mathbb{D}$
\end_inset

, to an one-dimensional point of the same domain: 
\begin_inset Formula $\mathbb{D}^{n}\rightarrow\mathbb{D}$
\end_inset

.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public interface Sample<T> {
\end_layout

\begin_layout Plain Layout

	int arity();
\end_layout

\begin_layout Plain Layout

    T argAt(int index);
\end_layout

\begin_layout Plain Layout

    T result();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Sample-interface"

\end_inset


\family typewriter
Sample
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset

The arity of the sample point returns the dimension, 
\begin_inset Formula $n$
\end_inset

.
 To make it easier to create
\family typewriter
 double
\family default
 sample points, some factory methods are also given in the
\family typewriter
 Sample
\family default
 interface.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Sample<Double> sample1 = Sample.ofDouble(0.0, 0.0);
\end_layout

\begin_layout Plain Layout

final Sample<Double> sample2 = Sample.ofDouble(1.0, 1.0);
\end_layout

\begin_layout Plain Layout

final Sample<Double> sample3 = Sample.ofDouble(2.0, 2.0);
\end_layout

\end_inset

The code snippet above shows how to create three sample points for a function
 
\begin_inset Formula $f:\mathbb{R}\rightarrow\mathbb{R}$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Regression problem
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Regression problem
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Regression
\family default
 class is the only concrete type of the public API of the
\family typewriter
 regression
\family default
 package.
 It integrates the interfaces, described in the last sections, into one
 problem definition.
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public final class Regression<T>
\end_layout

\begin_layout Plain Layout

    implements Problem<Tree<Op<T>, ?>, ProgramGene<T>, Double>
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

As you can see in the code snippet above, the
\family typewriter
 Regression
\family default
 class implements the
\family typewriter
 Problem
\family default
 interface and can be therefore easily used in setting up an appropriate
 evolution
\family typewriter
 Engine
\family default
.
 A full such regression example can be found in section
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Symbolic-regression-example"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Boolean programs
\end_layout

\begin_layout Standard
The default data type for doing symbolic regression is the
\family typewriter
 Double
\family default
 class.
 This is supported by a standard set of mathematical operations, defined
 in the
\family typewriter
 Math\SpecialChar softhyphen
Op
\family default
 class.
 Since the GP operations are not restricted to any particular type, the
 boolean operations, defined in the
\family typewriter
 Bool\SpecialChar softhyphen
Op
\family default
 class, can be used for defining boolean programs.
\end_layout

\begin_layout Section
io.jenetics.xml
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
io.jenetics.xml
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Modules!io.jenetics.xml
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 io.jenetics.xml
\family default
 module allows for writing and reading
\family typewriter
 Chromosome
\family default
s and
\family typewriter
 Genotype
\family default
s to and from XML.
 Since the existing JAXB marshaling is part of the deprecated
\family typewriter
 javax.xml.bind
\family default
 module the
\family typewriter
 io.jenetics.xml
\family default
 module is now the recommended for XML marshalling of the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 classes.
 The XML marshalling, implemented in this module, is based on the Java
\family typewriter
 XML\SpecialChar softhyphen
Stream\SpecialChar softhyphen
Writer
\family default
 and
\family typewriter
 XML\SpecialChar softhyphen
Stream\SpecialChar softhyphen
Reader
\family default
 classes of the
\family typewriter
 java.xml
\family default
 module.
\end_layout

\begin_layout Subsection
XML writer
\end_layout

\begin_layout Standard
The main entry point for writing XML files is the typed XML
\family typewriter
Writer
\family default
 interface.
 Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:XML-Writer-interface"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the interface of the XML
\family typewriter
Writer
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

@FunctionalInterface
\end_layout

\begin_layout Plain Layout

public interface Writer<T> {
\end_layout

\begin_layout Plain Layout

    void write(XMLStreamWriter xml, T data)
\end_layout

\begin_layout Plain Layout

        throws XMLStreamException;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    static <T> Writer<T> attr(String name);
\end_layout

\begin_layout Plain Layout

    static <T> Writer<T> attr(String name, Object value);
\end_layout

\begin_layout Plain Layout

    static <T> Writer<T> text();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    static <T> Writer<T>
\end_layout

\begin_layout Plain Layout

    elem(String name, Writer<? super T>...
 children);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    static <T> Writer<Iterable<T>>
\end_layout

\begin_layout Plain Layout

    elems(Writer<? super T> writer);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:XML-Writer-interface"

\end_inset

XML
\family typewriter
Writer
\family default
 interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Together with the static
\family typewriter
 Writer
\family default
 factory method, it is possible to define arbitrary writers through composition.
 There is no need for implementing the
\family typewriter
 Writer
\family default
 interface.
 A simple example will show you how to create (compose) a
\family typewriter
 Writer
\family default
 class for the
\family typewriter
 Integer\SpecialChar softhyphen
Chromosome
\family default
.
 The created XML should look like the given example above.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
fontsize{6.8}{8}
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting[language=XML]{../resources/code/int-chromosome.xml}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following writer will create the desired XML from an integer
\family typewriter
 Chromosome
\family default
.
 As the example shows, the structure of the XML can easily be grasped from
 the XML writer definition and vice versa.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Writer<IntegerChromosome> writer =
\end_layout

\begin_layout Plain Layout

    elem("int-chromosome",
\end_layout

\begin_layout Plain Layout

        attr("length").map(ch -> ch.length()),
\end_layout

\begin_layout Plain Layout

        elem("min", Writer.<Integer>text().map(ch -> ch.min())),
\end_layout

\begin_layout Plain Layout

        elem("max", Writer.<Integer>text().map(ch -> ch.max())),
\end_layout

\begin_layout Plain Layout

        elem("alleles",
\end_layout

\begin_layout Plain Layout

             elems("allele",  Writer.<Integer>text())
\end_layout

\begin_layout Plain Layout

                 .map(ch -> ch.toSeq().map(g -> g.allele()))
\end_layout

\begin_layout Plain Layout

        )
\end_layout

\begin_layout Plain Layout

     );
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
XML reader
\end_layout

\begin_layout Standard
Reading and writing XML files uses the same concepts.
 For reading XML there is an abstract
\family typewriter
 Reader
\family default
 class, which can be easily composed.
 The main method of the Reader class can be seen in listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:XML-Reader-class"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public abstract class Reader<T> {
\end_layout

\begin_layout Plain Layout

    public abstract T read(final XMLStreamReader xml)
\end_layout

\begin_layout Plain Layout

        throws XMLStreamException;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:XML-Reader-class"

\end_inset

XML
\family typewriter
Reader
\family default
 class
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When creating a XML
\family typewriter
Reader
\family default
, the structure of the XML must be defined in a similar way as for the XML
\family typewriter
Writer
\family default
.
 Additionally, a factory function, which will create the desired object
 from the extracted XML data, is needed.
 A
\family typewriter
 Reader
\family default
, which will read the XML representation of an
\family typewriter
 Integer\SpecialChar softhyphen
Chromosome
\family default
 can be seen in the following code snippet below.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

 final Reader<IntegerChromosome> reader =
\end_layout

\begin_layout Plain Layout

     elem(
\end_layout

\begin_layout Plain Layout

         (Object[] v) -> {
\end_layout

\begin_layout Plain Layout

             final int length = (int)v[0];
\end_layout

\begin_layout Plain Layout

             final int min = (int)v[1];
\end_layout

\begin_layout Plain Layout

             final int max = (int)v[2];
\end_layout

\begin_layout Plain Layout

             final List<Integer> alleles = (List<Integer>)v[3];
\end_layout

\begin_layout Plain Layout

             assert alleles.size() == length;
\end_layout

\begin_layout Plain Layout

             return IntegerChromosome.of(
\end_layout

\begin_layout Plain Layout

                 alleles.stream()
\end_layout

\begin_layout Plain Layout

                     .map(value -> IntegerGene.of(value, min, max)
\end_layout

\begin_layout Plain Layout

                     .toArray(IntegerGene[]::new)
\end_layout

\begin_layout Plain Layout

             );
\end_layout

\begin_layout Plain Layout

         },
\end_layout

\begin_layout Plain Layout

         "int-chromosome",
\end_layout

\begin_layout Plain Layout

         attr("length").map(Integer::parseInt),
\end_layout

\begin_layout Plain Layout

         elem("min", text().map(Integer::parseInt)),
\end_layout

\begin_layout Plain Layout

         elem("max", text().map(Integer::parseInt)),
\end_layout

\begin_layout Plain Layout

         elem("alleles",
\end_layout

\begin_layout Plain Layout

             elems(elem("allele",text().map(Integer::parseInt)))
\end_layout

\begin_layout Plain Layout

         )
\end_layout

\begin_layout Plain Layout

     );
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Marshalling performance
\end_layout

\begin_layout Standard
Another important aspect when doing marshalling, is the space needed for
 the marshaled objects and the time needed for doing the marshalling.
 For the performance tests a genotype with a varying chromosome count is
 used.
 The used genotype template can be seen in the code snippet below.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Genotype<DoubleGene> genotype = Genotype.of(
\end_layout

\begin_layout Plain Layout

    DoubleChromosome.of(0.0, 1.0, 100),
\end_layout

\begin_layout Plain Layout

    chromosomeCount
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Table
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Marshaled-object-size"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the required space of the marshaled genotypes for different marshalling
 methods: (a) Java serialization, (b) JAXB
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The JAXB marshalling has been removed in version 4.0.
 It is still part of the table for comparison with the new XML marshalling.
\end_layout

\end_inset

 serialization and (c) XML
\family typewriter
Writer
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Chromosome count
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java serialization
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JAXB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
XML writer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0017 MiB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0045 MiB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0035 MiB
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0090 MiB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0439 MiB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0346 MiB
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0812 MiB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.4379 MiB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.3459 MiB
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1000
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.8039 MiB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.3772 MiB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.4578 MiB
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10000
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8.0309 MiB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
43.7730 MiB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
34.5795 MiB
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100000
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
80.3003 MiB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
437.7283 MiB
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
345.7940 MiB
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Marshaled-object-size"

\end_inset

Marshaled object size
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using the Java serialization will create the smallest files and the XML
\family typewriter
Writer
\family default
 of the
\family typewriter
 io.jenetics\SpecialChar softhyphen
.xml
\family default
 module will create files roughly 
\begin_inset Formula $75\%$
\end_inset

 the size of the JAXB serialized genotypes.
 The size of the marshaled objects also influences the write performance.
 As you can see in diagram
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Genotype-write-performance"
plural "false"
caps "false"
noprefix "false"

\end_inset

 the Java serialization is the fastest marshalling method, followed by the
 JAXB marshalling.
 The XML
\family typewriter
Writer
\family default
 is the slowest one, but still comparable to the JAXB method.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/genotype_write_perf.svg
	lyxscale 80
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Genotype-write-performance"

\end_inset

Genotype write performance
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For reading the serialized genotypes, we will see similar results (see diagram
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Genotype-read-performance"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
 Reading Java serialized genotypes has the best read performance, followed
 by JAXB and the XML Reader.
 This time the difference between JAXB and the XML Reader is hardly visible.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/genotype_read_perf.svg
	lyxscale 80
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Genotype-read-performance"

\end_inset

Genotype read performance
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
io.jenetics.prngine
\begin_inset CommandInset label
LatexCommand label
name "sec:io.jenetics.prngine"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
io.jenetics.prngine
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Modules!io.jenetics.prngine
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 prngine
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This module is not part of the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 project directly.
 Since it has no dependency on any of the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 modules, it has been extracted to a separate GitHub repository (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/jenetics/prngine
\end_layout

\end_inset

) with an independent versioning.
\end_layout

\end_inset

 module contains pseudo-random number generators for sequential and parallel
 Monte Carlo simulations
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://de.wikipedia.org/wiki/Monte-Carlo-Simulation
\end_layout

\end_inset


\end_layout

\end_inset

.
 It has been designed to work smoothly with the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 GA library, but it has no dependency to it.
 All PRNG implementations of this library implements the Java
\family typewriter
 Random\SpecialChar softhyphen
Generator
\family default
 interface, which makes it easily usable in other projects.
\end_layout

\begin_layout Standard
\align center
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "90col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout

\family sans
The pseudo random number generators of the
\family typewriter
io.\SpecialChar softhyphen
jenetics.\SpecialChar softhyphen
prngine
\family sans
 module are
\series bold
not
\series default
 cryptographically strong PRNGs.
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 io.\SpecialChar softhyphen
jenetics.\SpecialChar softhyphen
prngine
\family default
 module consists of the following PRNG implementations:
\end_layout

\begin_layout Description

\family typewriter
KISS32Random
\family default
 Implementation of an simple PRNG as proposed in
\emph on
 Good Practice in (Pseudo) Random Number Generation for Bioinformatics Applicati
ons
\emph default
 (JKISS32, page 3) David Jones, UCL Bioinformatics Group.
\begin_inset CommandInset citation
LatexCommand cite
key "GoodPRNGPractice"
literal "true"

\end_inset

 The period of this PRNG is 
\begin_inset Formula $\approx2.6\cdot10^{36}$
\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
KISS64Random
\family default
 Implementation of an simple PRNG as proposed in
\emph on
 Good Practice in (Pseudo) Random Number Generation for Bioinformatics Applicati
ons
\emph default
 (JKISS64, page 10) David Jones, UCL Bioinformatics Group.
\begin_inset CommandInset citation
LatexCommand cite
key "GoodPRNGPractice"
literal "true"

\end_inset

 The PRNG has a period of 
\begin_inset Formula $\approx1.8\cdot10^{75}$
\end_inset

.
\end_layout

\begin_layout Description

\family typewriter
LCG64ShiftRandom
\family default
 This class implements a linear congruential PRNG with additional bit-shift
 transition.
 It is a port of the trng::lcg64_shift PRNG class of the TRNG library created
 by Heiko Bauke.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/jenetics/trng4
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
MT19937_32Random
\family default
 This is a 32-bit version of Mersenne Twister pseudo random number generator.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Mersenne_Twister
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
MT19937_64Random
\family default
 This is a 64-bit version of Mersenne Twister pseudo random number generator.
\end_layout

\begin_layout Description

\family typewriter
XOR32ShiftRandom
\family default
 This generator was discovered and characterized by George Marsaglia [Xorshift
 RNGs].
 In just three XORs and three shifts (generally fast operations) it produces
 a full period of 
\begin_inset Formula $2^{32}-1$
\end_inset

 on 32 bits.
 (The missing value is zero, which perpetuates itself and must be avoided.)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://digitalcommons.wayne.edu/jmasm/vol2/iss1/2/
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
XOR64ShiftRandom
\family default
 This generator was discovered and characterized by George Marsaglia [Xorshift
 RNGs].
 In just three XORs and three shifts (generally fast operations) it produces
 a full period of 
\begin_inset Formula $2^{64}-1$
\end_inset

 on 64 bits.
 (The missing value is zero, which perpetuates itself and must be avoided.)
\end_layout

\begin_layout Standard
All implemented PRNGs have been tested with the
\family typewriter
 dieharder
\family default
 test suite.
 Table
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Dieharder-results"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the statistical performance of the implemented PRNGs, including the
 Java
\family typewriter
 Random\SpecialChar softhyphen
Generator, L64X256\SpecialChar softhyphen
Mix\SpecialChar softhyphen
Random
\family default
, which is the default generator used by the library.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="4">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="decimal" decimal_point="." valignment="top">
<column alignment="decimal" decimal_point="." valignment="top">
<column alignment="decimal" decimal_point="." valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PRNG
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Passed
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weak
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Failed
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
KISS32Random
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
113
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
KISS64Random
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
109
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
LCG64ShiftRandom
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
111
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
MT19937_32Random
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
111
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
MT19937_64Random
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
108
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
XOR32ShiftRandom
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
103
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
XOR64ShiftRandom
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
113
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
L64X256MixRandom
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
111
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Dieharder-results"

\end_inset

Dieharder results
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The second important performance measure for PRNGs is the number of random
 number it is able to create per second.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Measured on a Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz with Java(TM) SE
 Runtime Environment (build 1.8.0_102-b14)—Java HotSpot(TM) 64-Bit Server
 VM (build 25.102-b14, mixed mode)—, using the JHM micro-benchmark library.
\end_layout

\end_inset

 Table
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:PRNG-creation-speed"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the PRN creation speed for all implemented generators.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="5">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="decimal" decimal_point="." valignment="top">
<column alignment="decimal" decimal_point="." valignment="top">
<column alignment="decimal" decimal_point="." valignment="top">
<column alignment="decimal" decimal_point="." valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PRNG
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $10^{6}$
\end_inset

 int/s
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $10^{6}$
\end_inset

 float/s
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $10^{6}$
\end_inset

 long/s
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $10^{6}$
\end_inset

 double/s
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
KISS32Random
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
189
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
143
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
129
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
108
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
KISS64Random
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
128
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
124
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
115
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
124
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
LCG64ShiftRandom
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
258
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
185
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
261
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
191
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
MT19937_32Random
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
140
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
115
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
92
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
82
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
MT19937_64Random
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
148
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
120
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
148
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
120
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
XOR32ShiftRandom
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
227
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
161
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
140
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
120
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
XOR64ShiftRandom
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
225
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
166
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
235
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
166
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
L64X256MixRandom
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
162
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
136
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
121
\end_layout

\end_inset
</cell>
<cell alignment="decimal" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
166
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:PRNG-creation-speed"

\end_inset

PRNG speed
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Part*
Appendix
\end_layout

\begin_layout Chapter
Internals
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Internals
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This section contains internal implementation details which doesn't fit
 in one of the previous sections.
 They are not essential for using the library, but would give the user a
 deeper insight in some design decisions made when implementing the library.
 It also introduces tools and classes which were developed for testing purpose.
 These classes are not exported and
\series bold
 not
\series default
 part of the official API.
\end_layout

\begin_layout Section
PRNG testing
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
PRNG testing
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Random!testing
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 uses the
\family typewriter
 dieharder
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
From Robert G.
 Brown:
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.phy.duke.edu/~rgb/General/dieharder.php
\end_layout

\end_inset


\end_layout

\end_inset

 (command line) tool for testing the
\emph on
 randomness
\emph default
 of the used PRNGs.

\family typewriter
 dieharder
\family default
 is a random number generator (RNG) testing suite.
 It is intended to test generators, not files of possibly random numbers.
 Since
\family typewriter
 dieharder
\family default
 needs a huge amount of random data for testing the quality of a RNG, it
 is usually advisable to pipe the random numbers to the
\family typewriter
 dieharder
\family default
 process:
\end_layout

\begin_layout LyX-Code
$ cat /dev/urandom | dieharder -g 200 -a
\end_layout

\begin_layout Standard
The example above demonstrates how to stream a raw binary stream of bits
 to the
\family typewriter
 stdin
\family default
 (raw) interface of
\family typewriter
 dieharder
\family default
.
 With the
\family typewriter
 Die\SpecialChar softhyphen
Harder
\family default

\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Dieharder
\end_layout

\end_inset

 class, which is part of the
\family typewriter
 io.jenetics-.prngine.\SpecialChar softhyphen
internal
\family default
 package, it is easily possible to test PRNGs extending the
\family typewriter
 java.\SpecialChar softhyphen
util.ran\SpecialChar softhyphen
dom.\SpecialChar softhyphen
Ran\SpecialChar softhyphen
dom\SpecialChar softhyphen
Gen\SpecialChar softhyphen
erator
\family default
 interface.
 The only requirement is, that the PRNG must be
\emph on
 default
\emph default
-constructible and part of the classpath.
\end_layout

\begin_layout LyX-Code
$ java -cp prngine-2.0.0.jar 
\backslash

\end_layout

\begin_layout LyX-Code
      io.jenetics.prngine.internal.DieHarder 
\backslash

\end_layout

\begin_layout LyX-Code
      <random-engine-name> -a
\end_layout

\begin_layout Standard
Calling the command above will create an instance of the given random engine
 and stream the random data (bytes) to the raw interface of
\family typewriter
 dieharder
\family default
 process.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
fontsize{6.8}{8}
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/dieharder.protocol}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset

In the listing above, a part of the created
\family typewriter
 dieharder
\family default
 report is shown.
 For testing the
\family typewriter
 LCG64\SpecialChar softhyphen
Shift\SpecialChar softhyphen
Random
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
LCG64ShiftRandom
\end_layout

\end_inset


\family default
 class, which is part of the
\family typewriter
 io.jenetics.\SpecialChar softhyphen
prngine
\family default
 module, the following command can be called:
\end_layout

\begin_layout LyX-Code
$ java -cp prngine-2.0.0.jar 
\backslash

\end_layout

\begin_layout LyX-Code
      io.jenetics.prngine.internal.DieHarder 
\backslash

\end_layout

\begin_layout LyX-Code
      LCG64ShiftRandom -a
\end_layout

\begin_layout Standard
Table
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:LCG64ShiftRandom-quality"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the summary of the
\family typewriter
 dieharder
\family default
 tests.
 The full report is part of the source file of the
\family typewriter
 LCG64\SpecialChar softhyphen
Shift\SpecialChar softhyphen
Random
\family default
 class.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/jenetics/prngine/blob/master/prngine/src/main/java/io/jenetics
/prngine/LCG64ShiftRandom.java
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Passed tests
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weak tests
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Failed tests
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
111
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:LCG64ShiftRandom-quality"

\end_inset


\family typewriter
LCG64ShiftRandom
\family default
 quality
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Random seeding
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Seeding
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Random!seeding
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The PRNGs
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Randomness"

\end_inset

.
\end_layout

\end_inset

, used by the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library, needs to be initialized with a proper seed value before they can
 be used.
 The usual way for doing this, is to take the current time stamp.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public static long nanoSeed() {
\end_layout

\begin_layout Plain Layout

    return System.nanoTime();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Before applying this method throughout the whole library, I decided to perform
 some statistical tests.
 For this purpose I treated the
\family typewriter
 seed
\family default
 method itself as PRNG and analyzed the created long values with the
\family typewriter
 Die\SpecialChar softhyphen
Harder class
\family default
.
 The
\family typewriter
 nanoSeed
\family default
 method has been wrapped into the
\family typewriter
 io.\SpecialChar softhyphen
jenetics.\SpecialChar softhyphen
prngine.\SpecialChar softhyphen
inter\SpecialChar softhyphen
nal.\SpecialChar softhyphen
Nano\SpecialChar softhyphen
Time\SpecialChar softhyphen
Random
\family default
 class.
 Assuming that the
\family typewriter
 dieharder
\family default
 tool is in the search path, calling
\end_layout

\begin_layout LyX-Code
$ java -cp prngine-2.0.0.jar 
\backslash

\end_layout

\begin_layout LyX-Code
      io.jenetics.prngine.internal.DieHarder 
\backslash

\end_layout

\begin_layout LyX-Code
      NanoTimeRandom -a
\end_layout

\begin_layout Standard
will perform the statistical tests for the nano time random engine.
 The statistical quality is rather bad: every single test failed.
 Table
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Nano-time-seeding"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the summary of the
\family typewriter
 dieharder
\family default
 report.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The detailed test report can be found in the source of the Nano\SpecialChar softhyphen
Time\SpecialChar softhyphen
Random
 class.
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/jenetics/prngine/blob/master/prngine/src/main/java/io/jenetics
/prngine/internal/NanoTimeRandom.java
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Passed tests
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weak tests
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Failed tests
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
114
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Nano-time-seeding"

\end_inset

Nano time seeding quality
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
An alternative source of entropy, for generating seed values, would be the
\family typewriter
 /dev/random
\family default
 or
\family typewriter
 /dev/urandom
\family default
 file.
 But this approach is not portable, which was a prerequisite for the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library.
\end_layout

\begin_layout Standard
The next attempt tries to fetch the seeds from the JVM, via the
\family typewriter
 Object\SpecialChar softhyphen
::hashCode
\family default
 method.
 Since the hash code of an Object is available for every operating system
 and most likely 
\begin_inset Quotes ald
\end_inset

randomly
\begin_inset Quotes ard
\end_inset

 distributed.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public static long objectSeed() {
\end_layout

\begin_layout Plain Layout

    final long a = new Object().hashCode();
\end_layout

\begin_layout Plain Layout

    final long b = new Object().hashCode();
\end_layout

\begin_layout Plain Layout

    return mixStafford13(a << 32 | b);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

private static long mixStafford13(final long z) {
\end_layout

\begin_layout Plain Layout

    long v = (z^(z >>> 30))*0xbf58476d1ce4e5b9L;
\end_layout

\begin_layout Plain Layout

    v = (v^(v >>> 27))*0x94d049bb133111ebL;
\end_layout

\begin_layout Plain Layout

    return v^(v >>> 31);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

This seed method has been wrapped into the
\family typewriter
 Object\SpecialChar softhyphen
Hash\SpecialChar softhyphen
Random
\family default
 class and tested as well with
\end_layout

\begin_layout LyX-Code
$ java -cp prngine-2.0.0.jar 
\backslash

\end_layout

\begin_layout LyX-Code
      io.jenetics.prngine.internal.DieHarder 
\backslash

\end_layout

\begin_layout LyX-Code
      ObjectHashRandom -a
\end_layout

\begin_layout Standard
Table
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Object-hash-seeding"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the summary of the
\family typewriter
 dieharder
\family default
 report
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Full report:
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/jenetics/prngine/blob/master/prngine/src/main/java/io/jenetics
/prngine/internal/ObjectHashRandom.java
\end_layout

\end_inset


\end_layout

\end_inset

, which is already excellent.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Passed tests
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weak tests
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Failed tests
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
113
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Object-hash-seeding"

\end_inset

Object hash seeding quality
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
After additional experimentation, a combination of the nano time seed and
 the object hash seeding seems to be the
\emph on
 right
\emph default
 solution.
 The rational behind this was, that the PRNG seed shouldn't rely on a single
\emph on
 source
\emph default
 of entropy.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public static long seed() {
\end_layout

\begin_layout Plain Layout

    final long a = mixStafford13(System.currentTimeMillis());
\end_layout

\begin_layout Plain Layout

    final long b = mixStafford13(System.nanoTime());
\end_layout

\begin_layout Plain Layout

    return seed(mix(a, b));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

private static long seed(final long base) {
\end_layout

\begin_layout Plain Layout

    return mix(base, objectSeed());
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

private static long mix(final long a, final long b) {
\end_layout

\begin_layout Plain Layout

    long c = a^b;
\end_layout

\begin_layout Plain Layout

    c ^= c << 17;
\end_layout

\begin_layout Plain Layout

    c ^= c >>> 31;
\end_layout

\begin_layout Plain Layout

    c ^= c << 8;
\end_layout

\begin_layout Plain Layout

    return c;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Random-seeding"

\end_inset

Random seeding
\end_layout

\end_inset


\end_layout

\end_inset

 The code in listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Random-seeding"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows how the nano time seed is mixed with the object seed.
 The
\family typewriter
 mix
\family default
 method was inspired by the mixing step of the
\family typewriter
lcg64_shift
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This class is part of the
\begin_inset CommandInset href
LatexCommand href
name "TRNG"
target "http://numbercrunch.de/trng/"
literal "false"

\end_inset

 library:
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/rabauke/trng4/blob/master/src/lcg64_shift.hpp
\end_layout

\end_inset


\end_layout

\end_inset

 random engine, which has been reimplemented in the
\family typewriter
 LCG64\SpecialChar softhyphen
Shift\SpecialChar softhyphen
Random
\family default
 class.
 Running the tests with
\end_layout

\begin_layout LyX-Code
$ java -cp prngine-2.0.0.jar 
\backslash

\end_layout

\begin_layout LyX-Code
      io.jenetics.prngine.internal.DieHarder 
\backslash

\end_layout

\begin_layout LyX-Code
      SeedRandom -a
\end_layout

\begin_layout Standard
leads to the statistics summary
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Full report:
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/jenetics/prngine/blob/master/prngine/src/main/java/io/jenetics
/prngine/internal/SeedRandom.java
\end_layout

\end_inset


\end_layout

\end_inset

, which is shown in table
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Combined-random-seeding"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Passed tests
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Weak tests
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Failed tests
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
110
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Combined-random-seeding"

\end_inset

Combined random seeding quality
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The statistical performance of this seeding is better, according to the
\family typewriter
 die\SpecialChar softhyphen
harder
\family default
 test suite, than some of the real random engines, including the default
 Java
\family typewriter
 Random
\family default
 engine.
 Using the proposed
\family typewriter
 seed
\family default
 method is in any case preferable to the simple
\family typewriter
 System.\SpecialChar softhyphen
nano\SpecialChar softhyphen
Time()
\family default
 call.
\end_layout

\begin_layout Paragraph
Open questions
\end_layout

\begin_layout Itemize
How does this method perform on operating systems other than Linux?
\end_layout

\begin_layout Itemize
How does this method perform on other JVM implementations?
\end_layout

\begin_layout Chapter
Examples
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Examples
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This section contains some coding examples which should give you a feeling
 of how to use the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library.
 The given examples are complete, in the sense that they will compile and
 run and produce the given example output.
 Running the examples delivered with the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library can be started with the
\family typewriter
 run-examples.sh
\family default
 script.
\end_layout

\begin_layout LyX-Code
$ ./jenetics.example/src/main/scripts/run-examples.sh
\end_layout

\begin_layout Standard
Since the script uses JARs located in the build directory you have to build
 it with the
\family typewriter
 jar
\family default
\emph on
 Gradle
\emph default
 target first; see section
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Build"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Section
Ones counting
\begin_inset CommandInset label
LatexCommand label
name "subsec:Ones-counting-example"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Examples!Ones counting
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Ones counting
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ones counting is one of the simplest model problem.
 It uses a binary chromosome and forms a classic genetic algorithm
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
In the classic genetic algorithm the problem is a maximization problem and
 the fitness function is positive.
 The domain of the fitness function is a bit-chromosome.
\end_layout

\end_inset

.
 The fitness of a
\family typewriter
 Genotype
\family default
 is proportional to the number of ones.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting{../java/OnesCounting.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The
\family typewriter
 Genotype
\family default
 in this example consists of one
\family typewriter
 Bit\SpecialChar softhyphen
Chromosome
\family default
 with a ones probability of 0.15.
 The altering of the offspring population is performed by mutation, with
 mutation probability of 0.55, and then by a single-point crossover, with
 crossover probability of 0.06.
 After creating the initial population, with the
\family typewriter
 ga.setup()
\family default
 call, 100 generations are evolved.
 The tournament selector is used for both, the offspring- and the survivor
 selection—this is the default selector.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
For the other default values (population size, maximal age, ...) have a look
 at the Javadoc:
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://jenetics.io/javadoc/jenetics/@__minor_version__@/index.html
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
scriptsize
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/OnesCounting.out}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The given example will print the overall timing statistics onto the console.
 In the
\emph on
 Evolution statistics
\emph default
 section you can see that it actually takes 15 generations to fulfill the
 termination criteria—finding no better result after 7 consecutive generations.
\end_layout

\begin_layout Section
Real function
\begin_inset CommandInset label
LatexCommand label
name "subsec:Real-function-example"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Examples!Real function
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Real function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this example we try to find the minimum value of the function
\begin_inset Formula 
\begin{equation}
f(x)=\cos\left(\frac{1}{2}+\sin\left(x\right)\right)\cdot\cos\left(x\right).\label{eq:Example-real-function}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/RealFunction.svg
	lyxscale 85
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Real-function"

\end_inset

Real function
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The graph of function
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:Example-real-function"

\end_inset

, in the range of 
\begin_inset Formula $\left[0,2\pi\right]$
\end_inset

, is shown in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Real-function"

\end_inset

 and the listing beneath shows the GA implementation which will minimize
 the function.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting{../java/RealFunction.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The GA works with 
\begin_inset Formula $1\times1$
\end_inset


\family typewriter
 Double\SpecialChar softhyphen
Chromosomes
\family default
 whose values are restricted to the range 
\begin_inset Formula $[0,2\pi]$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
scriptsize
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/RealFunction.out}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The GA will generated an console output like above.
 The
\emph on
 exact
\emph default
 result of the function–for the given range–will be 
\begin_inset Formula $3.389,125,782,8907,939...$
\end_inset

 You can also see, that we reached the final result after 19 generations.
\end_layout

\begin_layout Section
Rastrigin function
\begin_inset CommandInset label
LatexCommand label
name "subsec:Rastrigin-function"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Examples!Rastrigin function
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Rastrigin function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Rastrigin function
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Rastrigin_function
\end_layout

\end_inset


\end_layout

\end_inset

 is often used to test the optimization performance of genetic algorithm.
\begin_inset Formula 
\begin{equation}
f\left(\mathbf{x}\right)=An+\sum_{i=1}^{n}\left(x_{i}^{2}-A\cos\left(2\pi x_{i}\right)\right).\label{eq:Rastrigin-function}
\end{equation}

\end_inset

As the plot in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Rastrigin-function"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows, the Rastrigin function has many local minima, which makes it difficult
 for standard, gradient based methods to find the global minimum.
 If 
\begin_inset Formula $A=10$
\end_inset

 and 
\begin_inset Formula $x_{i}\in\left[-5.12,5.12\right]$
\end_inset

, the function has only one global minimum at 
\begin_inset Formula $\mathbf{x}=\mathbf{0}$
\end_inset

 with 
\begin_inset Formula $f\left(\mathbf{x}\right)=0$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/RastriginFunction.png
	lyxscale 50
	width 100text%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Rastrigin-function"

\end_inset

Rastrigin function
\end_layout

\end_inset


\end_layout

\end_inset

The following listing shows the
\family typewriter
 Engine
\family default
 setup for solving the Rastrigin function, which is very similar to the
 setup for the real function in section
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Real-function-example"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Beside the different fitness function, the
\family typewriter
 Codec
\family default
 for
\family typewriter
 double
\family default
 vectors is used, instead of the
\family typewriter
 double
\family default
 scalar
\family typewriter
 Codec
\family default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting{../java/RastriginFunction.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The console output of the program shows, that
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 finds the
\emph on
 optimal
\emph default
 solution after 
\begin_inset Formula $38$
\end_inset

 generations.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
scriptsize
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/RastriginFunction.out}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Section
0/1 Knapsack
\begin_inset CommandInset label
LatexCommand label
name "subsec:0/1-Knapsack-example"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Examples!0/1 Knapsack
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
0/1 Knapsack
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the Knapsack problem
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Knapsack_problem
\end_layout

\end_inset


\end_layout

\end_inset

 a set of items, together with its size and value, is given.
 The task is to select a disjoint subset so that the total size does not
 exceed the knapsack size.
 For solving the 0/1 knapsack problem we define a
\family typewriter
 BitChromosome
\family default
, one bit for each item.
 If the 
\begin_inset Formula $i^{th}$
\end_inset

 bit is set to one the 
\begin_inset Formula $i^{th}$
\end_inset

 item is selected.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting{../java/Knapsack.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The console output for the Knapsack GA will look like the listing beneath.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
scriptsize
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/Knapsack.out}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Traveling salesman
\begin_inset CommandInset label
LatexCommand label
name "subsec:Traveling-salesman-example"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Examples!Traveling salesman
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Traveling salesman
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Traveling Salesman problem
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Travelling_salesman_problem
\end_layout

\end_inset


\end_layout

\end_inset

 is one of the classical problems in computational mathematics and it is
 the most notorious NP-complete problem.
 The goal is to find the shortest distance, or the path, with the least
 costs, between 
\begin_inset Formula $N$
\end_inset

 different cities.
 Testing all possible paths for 
\begin_inset Formula $N$
\end_inset

 cities would lead to 
\begin_inset Formula $N!$
\end_inset

 checks to find the shortest one.
\end_layout

\begin_layout Standard
The following example uses a path where the cities are lying on a circle.
 That means, the optimal path will be a polygon.
 This makes it easier to check the quality of the found solution.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting{../java/TravelingSalesman.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Traveling Salesman problem is a very good example which shows you how
 to solve combinatorial problems with an GA.

\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 contains several classes which will work very well with this kind of problems.
 Wrapping the base
\emph on
 type
\emph default
 into an
\family typewriter
 EnumGene
\family default
 is the first thing to do.
 In our example, every city has an unique number, that means we are wrapping
 an
\family typewriter
 Integer
\family default
 into an
\family typewriter
 EnumGene
\family default
.
 Creating a genotype for integer values is very easy with the factory method
 of the
\family typewriter
 PermutationChromosome
\family default
.
 For other data types you have to use one of the constructors of the permutation
 chromosome.
 As alterers, we are using a swap-mutator and a partially-matched crossover.
 These alterers guarantee that no invalid solutions are created—every city
 exists exactly once in the altered chromosomes.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
scriptsize
\backslash
ttfamily}
\end_layout

\begin_layout Plain Layout


\backslash
lstinputlisting{../resources/code/TravelingSalesman.out}
\end_layout

\begin_layout Plain Layout


\backslash
lstset{basicstyle=
\backslash
footnotesize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The listing above shows the output generated by our example.
 The last line represents the phenotype of the best solution found by the
 GA, which represents the traveling path.
 As you can see, the GA has found the shortest path, in reverse order.
\end_layout

\begin_layout Section
Evolving images
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Examples!Evolving images
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Evolving images
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following example tries to approximate a given image by semitransparent
 polygons.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Original idea by Roger Johansson
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://rogeralsing.com/2008/12/07/genetic-programming-evolution-of-mona-lisa
\end_layout

\end_inset

.
\end_layout

\end_inset

 It comes with an Swing UI, where you can immediately start your own experiments.
 After compiling the sources with
\end_layout

\begin_layout LyX-Code
$ ./gradlew jar
\end_layout

\begin_layout Standard
you can start the example by calling
\end_layout

\begin_layout LyX-Code
$ ./jrun io.jenetics.example.image.EvolvingImages
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/graphic/EvolvingImagesExampleScreenShot.png
	lyxscale 70
	width 95col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evolving-images"

\end_inset

Evolving images UI
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Evolving images
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Examples!Evolving images
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Evolving-images"
plural "false"
caps "false"
noprefix "false"

\end_inset

 show the GUI after evolving the default image for about 4,000 generations.
 With the 
\begin_inset Quotes ald
\end_inset

Open
\begin_inset Quotes ard
\end_inset

 button it is possible to load other images for
\emph on
 polygonization
\emph default
.
 The 
\begin_inset Quotes ald
\end_inset

Save
\begin_inset Quotes ard
\end_inset

 button allows to store
\emph on
 polygonized
\emph default
 images in PNG format to disk.
 At the button of the UI, you can change some of the GA parameters of the
 example:
\end_layout

\begin_layout Description
Population
\begin_inset space ~
\end_inset

size The number of individual in the population.
\end_layout

\begin_layout Description
Tournament
\begin_inset space ~
\end_inset

size The example uses a
\family typewriter
 Tournament\SpecialChar softhyphen
Selector
\family default
 for selecting the offspring population.
 This parameter lets you set the number of individuals used for the tournament
 step.
\end_layout

\begin_layout Description
Mutation
\begin_inset space ~
\end_inset

rate The probability that a polygon
\emph on
 component
\emph default
 (color or vertex position) is altered.
\end_layout

\begin_layout Description
Mutation
\begin_inset space ~
\end_inset

magnitude In case a polygon
\emph on
 component
\emph default
 is going to be mutated, its value will be randomly modified in the uniform
 range of 
\begin_inset Formula $[-m,+m]$
\end_inset

.
\end_layout

\begin_layout Description
Polygon
\begin_inset space ~
\end_inset

length The number of edges (or vertices) of the created polygons.
\end_layout

\begin_layout Description
Polygon
\begin_inset space ~
\end_inset

count The number of polygons of one individual (
\family typewriter
Genotype
\family default
).
\end_layout

\begin_layout Description
Reference
\begin_inset space ~
\end_inset

image
\begin_inset space ~
\end_inset

size To improve the processing speed, the fitness of a given polygon set
 (individual) is not calculated with the full sized image.
 Instead a scaled reference image with the given size is used.
 A smaller reference image will speed up the calculation, but will also
 reduce the accuracy.
\end_layout

\begin_layout Standard
It is also possible to run and configure the
\emph on
 Evolving Images
\emph default
 example from the command line.
 This allows for performing long running evolution
\emph on
 experiments
\emph default
 and save polygon images every
\begin_inset Formula $n$
\end_inset

 generations—specified with the
\family typewriter
 --image\SpecialChar softhyphen
-generation
\family default
 parameter.
\end_layout

\begin_layout LyX-Code
$ ./jrun io.jenetics.example.image.EvolvingImages evolve 
\backslash

\end_layout

\begin_layout LyX-Code
        --engine-properties
\emph on
 engine.properties
\emph default
 
\backslash

\end_layout

\begin_layout LyX-Code
        --input-image
\emph on
 monalisa.png
\emph default
 
\backslash

\end_layout

\begin_layout LyX-Code
        --output-dir
\emph on
 evolving-images
\emph default
 
\backslash

\end_layout

\begin_layout LyX-Code
        --generations
\emph on
 10000
\emph default
 
\backslash

\end_layout

\begin_layout LyX-Code
        --image-generation
\emph on
 100
\end_layout

\begin_layout Standard
Every command line argument has proper default values, so that it is possible
 to start it without parameters.
 Listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Default-engine.properties"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the default values for the GA engine if the
\family typewriter
 --engine\SpecialChar softhyphen
-properties
\family default
 parameter is not specified.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

population_size=50
\end_layout

\begin_layout Plain Layout

tournament_size=3
\end_layout

\begin_layout Plain Layout

mutation_rate=0.025
\end_layout

\begin_layout Plain Layout

mutation_multitude=0.15
\end_layout

\begin_layout Plain Layout

polygon_length=4
\end_layout

\begin_layout Plain Layout

polygon_count=250
\end_layout

\begin_layout Plain Layout

reference_image_width=60
\end_layout

\begin_layout Plain Layout

reference_image_height=60
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Default-engine.properties"

\end_inset

Default
\family typewriter
 engine.properties
\end_layout

\end_inset


\end_layout

\end_inset

For a quick start, you can simply call
\end_layout

\begin_layout LyX-Code
$ ./jrun io.jenetics.example.image.EvolvingImages evolve
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../resources/graphic/ml-image-0000001.png
	lyxscale 30
	width 30col%

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../resources/graphic/ml-image-0000100.png
	lyxscale 30
	width 30col%

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../resources/graphic/ml-image-0001000.png
	lyxscale 30
	width 30col%

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a) 
\begin_inset Formula $10^{0}$
\end_inset

 generations
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
b) 
\begin_inset Formula $10^{2}$
\end_inset

 generations
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
c) 
\begin_inset Formula $10^{3}$
\end_inset

 generations
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../resources/graphic/ml-image-0010000.png
	lyxscale 30
	width 30col%

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../resources/graphic/ml-image-0100000.png
	lyxscale 30
	width 30col%

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../resources/graphic/ml-image-1000000.png
	lyxscale 30
	width 30col%

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
d) 
\begin_inset Formula $10^{4}$
\end_inset

 generations
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
e) 
\begin_inset Formula $10^{5}$
\end_inset

 generations
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
f) 
\begin_inset Formula $10^{6}$
\end_inset

 generations
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evolving-Mona-Lisa"

\end_inset

Evolving
\emph on
 Mona Lisa
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Mona Lisa
\end_layout

\end_inset


\emph default
 images
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The images in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Evolving-Mona-Lisa"
plural "false"
caps "false"
noprefix "false"

\end_inset

 shows the resulting polygon images after the given number of generations.
 They where created with the command line version of the program using the
 default
\family typewriter
 engine\SpecialChar softhyphen
.properties
\family default
 file (listing
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Default-engine.properties"
plural "false"
caps "false"
noprefix "false"

\end_inset

):
\end_layout

\begin_layout LyX-Code
$ ./jrun io.jenetics.example.image.EvolvingImages evolve 
\backslash

\end_layout

\begin_layout LyX-Code
        --generations
\emph on
 1000000
\emph default
 
\backslash

\end_layout

\begin_layout LyX-Code
        --image-generation
\emph on
 100
\end_layout

\begin_layout Section
Symbolic regression
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Symbolic regression
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
GP
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Genetic programming
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Symbolic-regression-example"

\end_inset


\end_layout

\begin_layout Standard
The following example shows how to set up and solve a symbolic regression
 problem with the help of GP and
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
.
 The data set used for the example was created with the polynomial, 
\begin_inset Formula $4x^{3}-3x^{2}+x$
\end_inset

.
 This allows us to check the quality of the function found by the GP.
 Setting up a GP requires a little bit more effort then the setup of a GA.
 First, you have to define the set of atomic mathematical operations, the
 GP is working with.
 These operations influence the search space and is a kind of a
\emph on
 priori
\emph default
 knowledge put into the GP.
 As a second step you have to define the terminal operations.
 Terminals are either constants or variables.
 The number of variables defines the domain dimension of the fitness function.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting{../java/SymbolicRegression.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The error function uses the
\emph on
 mean squared error
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://en.wikipedia.org/wiki/Mean_squared_error
\end_layout

\end_inset


\end_layout

\end_inset

as loss function and no additional tree complexity metric.
 One output of a GP run is shown in figure
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Symbolic-regression-polynomial"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 If we simplify this program tree, we will get exactly the polynomial which
 created the sample data.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/code/SymbolicRegression.svg
	lyxscale 70
	width 70col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Symbolic-regression-polynomial"

\end_inset

Symbolic regression polynomial
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Grammar based regression
\begin_inset CommandInset label
LatexCommand label
name "sec:Grammar-based-regression"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Grammar based regression
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Grammar!Regression
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Grammar
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The same example as in given in section
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Symbolic-regression-example"
plural "false"
caps "false"
noprefix "false"

\end_inset

, can be done with grammatical evolution
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
See section
\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:Grammatical-evolution"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\end_inset

.
 How to do this is shown in the following example.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting{../java/GrammarBasedRegression.java}
\end_layout

\end_inset


\end_layout

\begin_layout Section
DTLZ1
\begin_inset CommandInset label
LatexCommand label
name "sec:DTLZ1"

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
DTLZ1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Deb, Thiele, Laumanns and Zitzler have proposed a set of generational MOPs
 for testing and comparing MOEAs.
 This suite of benchmarks attempts to define generic MOEA test problems
 that are scalable to a user defined number of objectives.
 Because of the last names of its creators, this test suite is known as
 DTLZ (Deb-Thiele-Laumanns-Zitzler).
\begin_inset CommandInset citation
LatexCommand cite
key "CoelloCoello2007"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
DTLZ1 is an 
\begin_inset Formula $M$
\end_inset

-objective problem with linear Pareto-optimal front:
\begin_inset CommandInset citation
LatexCommand cite
key "Deb2001"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
f_{1}\left(\mathbf{x}\right) & = & \frac{1}{2}x_{1}x_{2}\cdots x_{M-1}\left(1+g\left(\mathbf{x}_{M}\right)\right),\\
f_{2}\left(\mathbf{x}\right) & = & \frac{1}{2}x_{1}x_{2}\cdots\left(1-x_{M-1}\right)\left(1+g\left(\boldsymbol{x}_{M}\right)\right),\\
 & \vdots\\
f_{M-1}\left(\mathbf{x}\right) & = & \frac{1}{2}x_{1}\left(1-x_{2}\right)\left(1+g\left(\mathbf{x}_{M}\right)\right),\\
f_{M}\left(\mathbf{x}\right) & = & \frac{1}{2}\left(1-x_{1}\right)\left(1+g\left(\mathbf{x}_{M}\right)\right),\\
 &  & \forall i\in\left[1,..n\right]:\,\,0\leq x_{i}\leq1
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
The functional 
\begin_inset Formula $g\left(\mathbf{x}_{M}\right)$
\end_inset

 requires 
\begin_inset Formula $\left|\mathbf{x}_{M}\right|=k$
\end_inset

 variables and must take any function with 
\begin_inset Formula $g\geq0$
\end_inset

.
 Typically 
\begin_inset Formula $g$
\end_inset

 is defined as:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
g\left(\mathbf{x}_{M}\right)=100\left[\left|\mathbf{x}_{M}\right|+\left(x-\frac{1}{2}\right)^{2}-\cos\left(20\pi\left(x-\frac{1}{2}\right)\right)\right].
\]

\end_inset


\end_layout

\begin_layout Standard
In the above problem, the total number of variables is 
\begin_inset Formula $n=M+k-1$
\end_inset

.
 The search space contains 
\begin_inset Formula $11^{k}-1$
\end_inset

 local Pareto-optimal fronts, each of which can attract an MOEA.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting{../java/DTLZ1.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The listing above shows the encoding of the DTLZ1 problem with the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library.
 Figure
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Pareto-front-DTLZ1"

\end_inset

 shows the Pareto-optimal front of the DTLZ1 optimization.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../resources/diagram/dtlz1.svg
	width 100col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Pareto-front-DTLZ1"

\end_inset

Pareto front DTLZ1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Build
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Build
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Installation
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Download
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Build"

\end_inset


\end_layout

\begin_layout Standard
For building the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 library from source, download the most recent, stable package version from
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/jenetics/jenetics/releases
\end_layout

\end_inset

 and extract it to some build directory.
\end_layout

\begin_layout LyX-Code
$ unzip jenetics-<version>.zip -d <build\SpecialChar softhyphen
dir>
\end_layout

\begin_layout Standard

\family typewriter
<version>
\family default
 denotes the actual
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 version and
\family typewriter
 <build\SpecialChar softhyphen
dir>
\family default
 the actual build directory.
 Alternatively you can check out the latest version from the Git
\family typewriter
 master
\family default
 branch.
\end_layout

\begin_layout LyX-Code
$ git clone https://github.com/jenetics/jenetics.git
\backslash

\end_layout

\begin_layout LyX-Code
           <builddir>
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Git repository
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Source code
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family sans
\series bold
\shape smallcaps
Jenetics
\family default
\series default
\shape default
 uses Gradle
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://gradle.org/downloads
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Build!Gradle
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Gradle
\end_layout

\end_inset

 as build system and organizes the source into
\emph on
 sub
\emph default
-projects (
\emph on
modules
\emph default
).
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
If you are calling the
\family typewriter
 gradlew
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Build!gradlew
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
gradlew
\end_layout

\end_inset


\family default
 script (instead of
\family typewriter
 gradle
\family default
), which are part of the downloaded package, the proper Gradle version is
 automatically downloaded and you don't have to install Gradle explicitly.
\end_layout

\end_inset

 Each
\emph on
 sub
\emph default
-project is located in its own
\emph on
 sub
\emph default
-directory.
\end_layout

\begin_layout Paragraph
Published projects
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
jenetics
\family default
\series default
: This project contains the source code and tests for the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
\emph on
 base
\emph default
-module.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
jenetics.ext
\family default
\series default
: This module contains additional
\emph on
 non
\emph default
-standard GA operations and data types.
 It also contains classes for solving multi-objective problems (MOEA).
 Additional classes for defining tree rewrite systems are also part of this
 module.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
jenetics.prog
\family default
\series default
: The modules contains classes which allows to do genetic programming (GP).
 It seamlessly works with the existing
\family typewriter
 Evolution\SpecialChar softhyphen
Stream
\family default
 and evolution
\family typewriter
 Engine
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
jenetics.xml
\family default
\series default
: XML marshalling module for the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 base data structures.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
prngine
\family default
\series default
: PRNGine is a pseudo-random number generator library for sequential and
 parallel Monte Carlo simulations.
 Since this library has no dependencies to one of the other projects, it
 has its own repository
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/jenetics/prngine
\end_layout

\end_inset


\end_layout

\end_inset

 with independent versioning.
\end_layout

\begin_layout Paragraph
Non-published projects
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
jenetics.example
\family default
\series default
: This project contains example code for the
\emph on
 base
\emph default
-module.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
jenetics.incubator
\family default
\series default
: This project contains experimental code which might find its way into
 one of the
\emph on
 official
\emph default
 modules.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
jenetics.doc
\family default
\series default
: Contains the code of the website and this manual.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
jenetics.tool
\family default
\series default
: This module contains classes used for doing integration testing and algorithmi
c performance testing.
 It is also used for creating GA performance measures and creating diagrams
 from the performance measures.
\end_layout

\begin_layout Standard
For building the library change into the
\family typewriter
 <build\SpecialChar softhyphen
dir>
\family default
 directory (or one of the
\emph on
 module
\emph default
 directory) and call one of the available
\emph on
 tasks
\emph default
:
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
compileJava
\family default
\series default
:
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Compile
\end_layout

\end_inset

 Compiles the
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 sources and copies the class files to the
\family typewriter
 <build\SpecialChar softhyphen
dir>\SpecialChar breakableslash
<module-dir>/build\SpecialChar breakableslash
classes/main
\family default
 directory.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
jar
\family default
\series default
: Compiles the sources and creates the JAR files.
 The artifacts are copied to the
\family typewriter
 <build\SpecialChar softhyphen
dir>/<module-dir>\SpecialChar breakableslash
build\SpecialChar breakableslash
libs
\family default
 directory.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
test
\family default
\series default
: Compiles and executes the unit tests.
 The test results are printed onto the console and a test report, created
 by
\emph on
 TestNG
\emph default
, is written to
\family typewriter
 <build\SpecialChar softhyphen
dir>/<module-dir>
\family default
 directory.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
javadoc
\family default
\series default
: Generates the API documentation.
 The Javadoc is stored in the
\family typewriter
 <build\SpecialChar softhyphen
dir>/<module-dir>\SpecialChar breakableslash
build\SpecialChar breakableslash
docs
\family default
 directory.
\end_layout

\begin_layout Itemize

\family typewriter
\series bold
clean
\family default
\series default
: Deletes the
\family typewriter
 <build\SpecialChar softhyphen
dir>\SpecialChar breakableslash
build/*
\family default
 directories and removes all generated artifacts.
\end_layout

\begin_layout Standard
For
\family typewriter
 building the library from
\family default
 the source, call
\end_layout

\begin_layout LyX-Code
$ cd <build-dir>
\end_layout

\begin_layout LyX-Code
$ gradle jar
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout LyX-Code
$ ./gradlew jar
\end_layout

\begin_layout Standard
if you don't have the the Gradle build system installed—calling the the
 Gradle wrapper script will download all needed files and trigger the build
 task afterwards.
\end_layout

\begin_layout Paragraph
Maven Central
\end_layout

\begin_layout Standard
The whole
\family sans
\series bold
\shape smallcaps
 Jenetics
\family default
\series default
\shape default
 package can also be downloaded from the
\emph on
 Maven Central
\emph default
 repository
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://repo.maven.apache.org/maven2
\end_layout

\end_inset

:
\end_layout

\begin_layout Subparagraph

\family typewriter
pom.xml
\family default
 snippet for Maven
\end_layout

\begin_layout LyX-Code
<dependency>
\end_layout

\begin_layout LyX-Code
    <groupId>io.jenetics</groupId>
\end_layout

\begin_layout LyX-Code
    <artifactId>
\emph on
module-name
\emph default
</artifactId>
\end_layout

\begin_layout LyX-Code
    <version>@__version__@</version>
\end_layout

\begin_layout LyX-Code
</dependency>
\end_layout

\begin_layout Subparagraph
Gradle
\end_layout

\begin_layout LyX-Code
'io.jenetics:
\emph on
module-name
\emph default
:@__version__@'
\end_layout

\begin_layout Paragraph
License
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
License
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The library itself is licensed under the
\begin_inset CommandInset href
LatexCommand href
name "Apache License, Version 2.0"
target "http://www.apache.org/licenses/LICENSE-2.0.html"
literal "false"

\end_inset

.
\end_layout

\begin_layout LyX-Code

\size footnotesize
Copyright @__year__@ Franz Wilhelmstötter
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size footnotesize
Licensed under the Apache License, Version 2.0 (the "License");
\end_layout

\begin_layout LyX-Code

\size footnotesize
you may not use this file except in compliance with the License.
\end_layout

\begin_layout LyX-Code

\size footnotesize
You may obtain a copy of the License at
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size footnotesize
   http://www.apache.org/licenses/LICENSE-2.0
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size footnotesize
Unless required by applicable law or agreed to in writing, software
\end_layout

\begin_layout LyX-Code

\size footnotesize
distributed under the License is distributed on an "AS IS" BASIS,
\end_layout

\begin_layout LyX-Code

\size footnotesize
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
\end_layout

\begin_layout LyX-Code

\size footnotesize
See the License for the specific language governing permissions and
\end_layout

\begin_layout LyX-Code

\size footnotesize
limitations under the License.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "references"
options "bibtotoc,plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset index_print
LatexCommand printindex
type "idx"
name "Index"
literal "true"

\end_inset


\end_layout

\end_body
\end_document
